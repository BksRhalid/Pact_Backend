{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolFee",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_juryFee",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "_juryLength",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ContractStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "juryAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractStates",
      "outputs": [
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_today",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "totalVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "clientVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "workerVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getJuryMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isJury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "isJuryInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWorker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryLength",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "juryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "pullPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "requestClientValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "revealState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "selectJuryMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "setIsFinishedAndAllowPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_juryFee",
          "type": "uint8"
        }
      ],
      "name": "setJuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_juryLength",
          "type": "uint8"
        }
      ],
      "name": "setJuryLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolFee",
          "type": "uint8"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "signContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1543f4b93e99d47737156b16e3b320cc8eedf41165e20cf805856e59bc27ac30",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3200465",
    "logsBloom": "0x
    "blockHash": "0x97cd7af5ef29a6b039168f154e2f15625aea4698167730558dd9a0bf3b54cf46",
    "transactionHash": "0x1543f4b93e99d47737156b16e3b320cc8eedf41165e20cf805856e59bc27ac30",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x1543f4b93e99d47737156b16e3b320cc8eedf41165e20cf805856e59bc27ac30",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x97cd7af5ef29a6b039168f154e2f15625aea4698167730558dd9a0bf3b54cf46"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3200465",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    5,
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "1d2c7345086980734ed7e3ed50386b5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_juryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_juryLength\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ContractStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"juryAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractStates\",\"outputs\":[{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_today\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"totalVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"clientVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"workerVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getJuryMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isJury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"isJuryInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryLength\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"juryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"pullPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"requestClientValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"revealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"selectJuryMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"setIsFinishedAndAllowPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_juryFee\",\"type\":\"uint8\"}],\"name\":\"setJuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_juryLength\",\"type\":\"uint8\"}],\"name\":\"setJuryLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/freelanceContract.sol\":\"freelanceContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/freelanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./utils/randomNumber.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// import \\\"./utils/payments.sol\\\"; // to be added later with openzeppelin payment splitter\\n\\n// Contract to create a freelance contract\\n// @author: RhalidBks\\n// @date: 2023-02-08\\n// @version: 0.1.0\\ncontract freelanceContract is randomNumber, Ownable {\\n    // State variables\\n    uint24 public juryLength; // jury length\\n    // protocol fee\\n    uint8 public protocolFee; // 5% of the contract price\\n    uint8 public juryFee; // 5% of the contract price\\n    address payable protocolAddress; // protocol address\\n\\n    // admin constructor\\n    constructor(\\n        uint8 _protocolFee,\\n        uint8 _juryFee,\\n        uint24 _juryLength\\n    ) {\\n        protocolFee = _protocolFee;\\n        juryFee = _juryFee;\\n        juryLength = _juryLength;\\n        protocolAddress = payable(msg.sender);\\n    }\\n\\n    struct ContractPact {\\n        address payable client; // client address\\n        address payable worker; // worker address\\n        bytes32 hashJob; // title + description of the work - should be a hash\\n        uint256 deadline; // timestamp\\n        uint256 createAt; // timestamp\\n        uint256 price; // price of the work in wei\\n        uint256 disputeId; // dispute id\\n        ContractState state; // state of the contract\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId; // dispute id\\n        uint256 contractId; // contract id\\n        uint24 totalVoteCount; // jury vote\\n        uint24 clientVoteCount; // client vote count private until reveal\\n        uint24 workerVoteCount; // worker vote count private until reveal\\n        address disputeInitiator; // dispute initiator\\n        juryMember[] juryMembers; // jury address => jury hasVoted\\n    }\\n\\n    struct juryMember {\\n        uint24 juryId; // jury id\\n        bool hasVoted; // jury vote\\n        address payable juryAddress; // jury address\\n    }\\n\\n    // Mappings\\n\\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\\n\\n    uint256 public contractCounter = 0; // counter of contracts\\n    uint256 public disputeCounter = 0; // counter of disputes\\n    uint256 public juryCounter = 0; // counter of jury\\n\\n    enum ContractState {\\n        WaitingWorkerSign,\\n        WorkStarted,\\n        WaitingClientReview,\\n        WorkFinishedSuccessufully,\\n        DisputeOpened,\\n        WaitingforJuryVote,\\n        DisputeClosed,\\n        ClientLostInDispute,\\n        WorkerLostInDispute,\\n        CancelByFreelancer,\\n        CancelByClient,\\n        Archived\\n    }\\n    // reveal won or lost in dispute after jury vote completed (if jury vote is 50% or more)\\n\\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\\n\\n    // Events\\n\\n    // Event to display contract state change\\n    event ContractStateChange(\\n        ContractState previousStatus,\\n        ContractState newStatus\\n    );\\n\\n    event Voted(uint256 disputeId, address juryAddress);\\n\\n    // Modifiers\\n\\n    // Modifier to check if the contract is in the correct state\\n    modifier inState(uint256 _contractId, ContractState _state) {\\n        require(\\n            contracts[_contractId].state == _state,\\n            \\\"Contract is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].worker == msg.sender,\\n            \\\"Only the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClient(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender,\\n            \\\"Only the client can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClientOrWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender ||\\n                contracts[_contractId].worker == msg.sender,\\n            \\\"Only the client or the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Functions admin\\n\\n    function setProtocolFee(uint8 _protocolFee) public onlyOwner {\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function setJuryFee(uint8 _juryFee) public onlyOwner {\\n        juryFee = _juryFee;\\n    }\\n\\n    function setJuryLength(uint8 _juryLength) public onlyOwner {\\n        juryLength = _juryLength;\\n    }\\n\\n    // Function to add a worker to the workers mapping\\n\\n    function addWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == false, \\\"Worker already exists.\\\");\\n        workers[msg.sender] = true;\\n    }\\n\\n    // Function to add a client to the clients mapping\\n\\n    function addClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == false, \\\"Client already exists.\\\");\\n        clients[msg.sender] = true;\\n    }\\n\\n    // Function to add a jury to the clients mapping\\n\\n    function addJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(isJury(msg.sender) == false, \\\"Jury already exists.\\\");\\n        // add a new jury of juryPool\\n        juryCounter++;\\n        juryPool[juryCounter] = msg.sender;\\n    }\\n\\n    // Function to remove a client from the clients mapping\\n    function removeClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == true, \\\"Client does not exist.\\\");\\n        clients[msg.sender] = false;\\n    }\\n\\n    // Function to remove a worker from the workers mapping\\n    function removeWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == true, \\\"Worker does not exist.\\\");\\n        workers[msg.sender] = false;\\n    }\\n\\n    // Function to remove a jury from the juryPool mapping\\n    function removeJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(isJury(msg.sender) == true, \\\"Jury does not exist.\\\");\\n        // remove a jury of juryPool\\n        bool found = false;\\n        for (uint256 i = 0; i < juryCounter && !found; i++) {\\n            if (juryPool[i] == msg.sender) {\\n                found = true;\\n                delete juryPool[i];\\n            }\\n        }\\n        juryCounter--;\\n    }\\n\\n    function isClient() external view returns (bool) {\\n        if (clients[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isWorker() external view returns (bool) {\\n        if (workers[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isJury(address _address) public view returns (bool) {\\n        for (uint256 i = 0; i < juryCounter; i++) {\\n            if (juryPool[i] == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // Function to create a new contract send by client\\n    function createContract(\\n        uint256 _deadline,\\n        uint256 _today,\\n        bytes32 _hash\\n    ) public payable {\\n        require(\\n            clients[msg.sender] == true,\\n            \\\"Only client can create a contract.\\\"\\n        );\\n        require(msg.value > 0, \\\"The price must be greater than 0.\\\");\\n        contractCounter++;\\n        contracts[contractCounter] = ContractPact({\\n            client: payable(msg.sender),\\n            worker: payable(address(0)),\\n            hashJob: _hash,\\n            createAt: _today,\\n            deadline: _deadline,\\n            price: msg.value,\\n            state: ContractState.WaitingWorkerSign,\\n            disputeId: 0\\n        });\\n    }\\n\\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\\n\\n    function cancelContractByClient(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n        thisContract.state = ContractState.CancelByClient;\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.CancelByClient\\n        );\\n    }\\n\\n    // Function for the worker to cancel the contract\\n\\n    function cancelContractByWorker(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.CancelByFreelancer;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.CancelByFreelancer\\n        );\\n    }\\n\\n    // Function for the worker to sign the contract\\n    function signContract(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n\\n        thisContract.worker = payable(msg.sender);\\n        thisContract.state = ContractState.WorkStarted;\\n\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.WorkStarted\\n        );\\n    }\\n\\n    // Worker can request client validation\\n\\n    function requestClientValidation(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WaitingClientReview;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.WaitingClientReview\\n        );\\n    }\\n\\n    // Function for the client to validate the contract\\n\\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingClientReview)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\\n    }\\n\\n    function openDispute(uint256 _contractId)\\n        external\\n        onlyClientOrWorker(_contractId)\\n    {\\n        require(\\n            juryCounter > juryLength,\\n            \\\"Not enough jury in juryPool to open a dispute.\\\"\\n        );\\n        require(\\n            contracts[_contractId].state == ContractState.WorkStarted ||\\n                contracts[_contractId].state ==\\n                ContractState.WaitingClientReview,\\n            \\\"The contract must be in work started or waiting client review state.\\\"\\n        );\\n\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.DisputeOpened;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.DisputeOpened\\n        );\\n\\n        disputeCounter++;\\n        Dispute storage thisDispute = disputes[disputeCounter];\\n        thisDispute.contractId = _contractId;\\n        thisDispute.disputeInitiator = msg.sender;\\n        thisContract.disputeId = disputeCounter;\\n    }\\n\\n    // only the initiator can launch the jury selection\\n    // only if not already selected\\n    function selectJuryMember(uint256 _contractId) external {\\n        // address[] memory selectedJurors = new address[](juryLength);\\n        address[] memory selectedJurors = new address[](juryLength);\\n\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage _thisDispute = disputes[thisContract.disputeId];\\n\\n        // select a jury member\\n        juryMember memory jury;\\n\\n        address jurySelected = msg.sender;\\n        for (uint24 i = 0; i < juryLength; i++) {\\n            uint24 _seed = i;\\n            // uint256 randomIndex = random(_seed);\\n            // randomIndex = randomIndex % juryCounter;\\n            jurySelected = generateRandomJury(_contractId, _seed);\\n            bool selected = false;\\n            for (uint24 count = 0; count < selectedJurors.length; count++) {\\n                if (jurySelected == selectedJurors[count]) {\\n                    selected = true;\\n                    break;\\n                }\\n                selected = false;\\n            }\\n            // check if juryselected is already selected in mapping\\n            // bool selected = selectedJurors[jurySelected];\\n\\n            if (\\n                _thisDispute.juryMembers.length < juryLength &&\\n                selected == false\\n            ) {\\n                // selectedJurors[i] = jurySelected;\\n                // selectedJurors[jurySelected] = true;\\n                jury = juryMember({\\n                    juryId: i,\\n                    juryAddress: payable(jurySelected),\\n                    hasVoted: false\\n                });\\n                _thisDispute.juryMembers.push(jury);\\n            } else {\\n                i--;\\n                continue;\\n            }\\n        }\\n        thisContract.state = ContractState.WaitingforJuryVote;\\n        emit ContractStateChange(\\n            ContractState.DisputeOpened,\\n            ContractState.WaitingforJuryVote\\n        );\\n    }\\n\\n    function generateRandomJury(uint256 _contractId, uint24 _seed)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        address jurySelected = msg.sender;\\n        uint256 randomIndex;\\n        for (uint8 i = 0; i <= 3; i++) {\\n            randomIndex = random(_seed) % juryCounter;\\n            jurySelected = juryPool[randomIndex];\\n            if (\\n                jurySelected != address(0) &&\\n                jurySelected != thisContract.client &&\\n                jurySelected != thisContract.worker\\n            ) {\\n                break;\\n            }\\n        }\\n        return jurySelected;\\n    }\\n\\n    function isJuryInDispute(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == _juryAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getJuryMembers(uint256 _disputeId)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        address[] memory juryMembers = new address[](\\n            thisDispute.juryMembers.length\\n        );\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            juryMembers[i] = thisDispute.juryMembers[i].juryAddress;\\n        }\\n        return juryMembers;\\n    }\\n\\n    function hasVoted(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        bool result = false;\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (\\n                thisDispute.juryMembers[i].juryAddress == _juryAddress &&\\n                thisDispute.juryMembers[i].hasVoted == true\\n            ) {\\n                result = true;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Function for the jury to vote for the dispute between the client and the worker\\n\\n    function vote(uint256 _contractId, bool _vote)\\n        external\\n        inState(_contractId, ContractState.WaitingforJuryVote)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\\n\\n        // get the jury member id in the disput\\n        uint24 juryId = 0;\\n        uint256 juryMemberLength = thisDispute.juryMembers.length;\\n        for (uint24 i = 0; i < juryMemberLength; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == msg.sender) {\\n                juryId = i;\\n            }\\n        }\\n        //\\\"The jury member has already voted.\\\"\\n        require(\\n            thisDispute.juryMembers[juryId].hasVoted == false,\\n            \\\"The jury member has already voted.\\\"\\n        );\\n\\n        thisDispute.juryMembers[juryId].hasVoted = true;\\n        thisDispute.totalVoteCount++;\\n        if (_vote) {\\n            thisDispute.clientVoteCount++;\\n        } else {\\n            thisDispute.workerVoteCount++;\\n        }\\n        if (thisDispute.totalVoteCount == juryMemberLength) {\\n            thisContract.state = ContractState.DisputeClosed;\\n            emit ContractStateChange(\\n                ContractState.WaitingforJuryVote,\\n                ContractState.DisputeClosed\\n            );\\n        }\\n    }\\n\\n    // Function to reveal and count the vote of the jury\\n\\n    function revealState(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.DisputeClosed)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\\n\\n        if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\\n            thisContract.state = ContractState.WorkerLostInDispute;\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.WorkerLostInDispute\\n            );\\n        } else {\\n            thisContract.state = ContractState.ClientLostInDispute;\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.ClientLostInDispute\\n            );\\n        }\\n    }\\n\\n    // Function for client or worker to pull payment and split if juryDispute with jury Members and protocol share and the worker if he won the dispute\\n    //should call payment function with constructor(address[] memory payees, uint256[] memory shares)\\n\\n    function pullPayment(uint256 _contractId)\\n        external\\n        onlyClientOrWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.price > 0,\\n            \\\"This job contract balance is equal to zero\\\"\\n        );\\n\\n        // amount in wei\\n        uint256 amount = thisContract.price;\\n        uint256 _disputeId = thisContract.disputeId;\\n\\n        // if there is no dispute\\n        // if the job have been canceled by the client or freelance\\n        if (\\n            thisContract.state == ContractState.CancelByFreelancer ||\\n            thisContract.state == ContractState.CancelByClient\\n        ) {\\n            address payable clientAddress = thisContract.client;\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            (bool success, ) = clientAddress.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        // if the job is finished successfully\\n        else if (\\n            thisContract.state == ContractState.WorkFinishedSuccessufully\\n        ) {\\n            address WinnerAddress = thisContract.worker;\\n            uint256 WinnerShare = amount * (1 - (protocolFee / 100));\\n            // protocol address and share\\n            address[] memory payees = new address[](2);\\n            payees[0] = WinnerAddress;\\n            payees[1] = protocolAddress;\\n            uint256[] memory shares = new uint256[](2);\\n            shares[0] = WinnerShare;\\n            shares[1] = amount * (protocolFee / 100);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        }\\n        //if dispute existe and the client or worker lost the dispute\\n        // As dispute finished split payment between jurors, protocol and who wants\\n        else if (thisContract.state == ContractState.ClientLostInDispute) {\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n\\n            address WinnerAddress = thisContract.worker;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = ProtocolShare;\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = amount * (juryFee / juryMemberLength / 100);\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else if (thisContract.state == ContractState.WorkerLostInDispute) {\\n            // jury members address and share\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n            address WinnerAddress = thisContract.client;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = amount * (protocolFee / 100);\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = (amount * (juryFee / juryMemberLength)) / 100;\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else {\\n            revert(\\\"No allowed to pull payment\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7cd4987f3e8fa1c0e9d9db0bf796cd23db7a8ff765a7bca7a5943d0bc576d153\",\"license\":\"MIT\"},\"contracts/utils/randomNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nabstract contract randomNumber {\\n    // function random() public view returns (uint256) {\\n    //     return block.prevrandao;\\n    // }\\n\\n    function random(uint256 _seed) public view returns (uint256) {\\n        uint256 result = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, _seed)\\n            )\\n        );\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc88c7a274790d2e7ee119b4fc650e03428c4bda7413bd28021fc28481af3a768\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102d15760003560e01c806374b7399711610179578063b406df6d116100d6578063c8ac5e5f1161008a578063e421fbca11610064578063e421fbca14610914578063ef2c02a81461092a578063f2fde38b1461093f57600080fd5b8063c8ac5e5f146108bf578063c9d27afe146108df578063d77640fe146108ff57600080fd5b8063b9b268fe116100bb578063b9b268fe1461086a578063bbbb77fb1461088a578063c26939581461089f57600080fd5b8063b406df6d146107f9578063b863bd371461081957600080fd5b8063985835901161012d578063a7e7ec2011610112578063a7e7ec2014610785578063b01f0617146107b8578063b0e21e8a146107d857600080fd5b8063985835901461073c578063a3626ece1461077257600080fd5b80638008e8bc1161015e5780638008e8bc146106ca5780638da5cb5b146106ea5780639537e8d11461071c57600080fd5b806374b73997146106945780637d36f4d3146106b457600080fd5b8063474da79a116102325780635823440f116101e65780636c77ee8c116101c05780636c77ee8c1461064a578063715018a61461066a57806374b4f03a1461067f57600080fd5b80635823440f146105cd57806361eed2a9146105ed5780636b655e451461061d57600080fd5b80634e91f811116102175780634e91f811146104e7578063533aa47414610507578063564a565d1461051c57600080fd5b8063474da79a1461042d5780634b4d3489146104b057600080fd5b806327d00fb0116102895780632b254c771161026e5780632b254c77146103c85780634048a257146103dd578063438596321461040d57600080fd5b806327d00fb0146103835780632a2520a7146103a357600080fd5b80631c798b6a116102ba5780631c798b6a146103215780631d4c6e6d1461034157806324baf3bb1461036e57600080fd5b806305f744c1146102d6578063067bd3b4146102f8575b600080fd5b3480156102e257600080fd5b506102f66102f1366004613425565b61095f565b005b34801561030457600080fd5b5061030e60075481565b6040519081526020015b60405180910390f35b34801561032d57600080fd5b506102f661033c366004613425565b610b37565b34801561034d57600080fd5b5061036161035c366004613425565b610d99565b6040516103189190613476565b34801561037a57600080fd5b506102f6610dcd565b34801561038f57600080fd5b506102f661039e366004613425565b610e8a565b3480156103af57600080fd5b506103b8611189565b6040519015158152602001610318565b3480156103d457600080fd5b506102f66111b1565b3480156103e957600080fd5b506103b86103f83660046134a0565b60026020526000908152604090205460ff1681565b34801561041957600080fd5b506103b86104283660046134c2565b61126d565b34801561043957600080fd5b5061049c610448366004613425565b6005602081905260009182526040909120805460018201546002830154600384015460048501549585015460068601546007909601546001600160a01b039586169794909516959294919392909160ff1688565b6040516103189897969594939291906134ee565b3480156104bc57600080fd5b506000546104d390600160a01b900462ffffff1681565b60405162ffffff9091168152602001610318565b3480156104f357600080fd5b506102f6610502366004613545565b611326565b34801561051357600080fd5b506102f6611369565b34801561052857600080fd5b5061058c610537366004613425565b60046020526000908152604090208054600182015460029092015490919062ffffff8082169163010000008104821691660100000000000082041690690100000000000000000090046001600160a01b031686565b60408051968752602087019590955262ffffff9384169486019490945290821660608501521660808301526001600160a01b031660a082015260c001610318565b3480156105d957600080fd5b506102f66105e8366004613425565b611425565b3480156105f957600080fd5b506103b86106083660046134a0565b60036020526000908152604090205460ff1681565b34801561062957600080fd5b5061063d610638366004613425565b61157c565b6040516103189190613568565b34801561065657600080fd5b506102f6610665366004613545565b611660565b34801561067657600080fd5b506102f66116a3565b34801561068b57600080fd5b506102f66116b7565b3480156106a057600080fd5b506103b86106af3660046134a0565b611785565b3480156106c057600080fd5b5061030e60085481565b3480156106d657600080fd5b506102f66106e5366004613425565b6117d8565b3480156106f657600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610318565b34801561072857600080fd5b506102f6610737366004613425565b61193a565b34801561074857600080fd5b50610704610757366004613425565b6006602052600090815260409020546001600160a01b031681565b6102f66107803660046135b5565b611aa5565b34801561079157600080fd5b506000546107a690600160c01b900460ff1681565b60405160ff9091168152602001610318565b3480156107c457600080fd5b506102f66107d3366004613425565b611cca565b3480156107e457600080fd5b506000546107a690600160b81b900460ff1681565b34801561080557600080fd5b506103b86108143660046134c2565b611de8565b34801561082557600080fd5b5061030e610834366004613425565b60408051426020808301919091524482840152606080830194909452825180830390940184526080909101909152815191012090565b34801561087657600080fd5b506102f6610885366004613425565b611e6d565b34801561089657600080fd5b506102f6612b61565b3480156108ab57600080fd5b506102f66108ba366004613545565b612c1e565b3480156108cb57600080fd5b506102f66108da366004613425565b612c60565b3480156108eb57600080fd5b506102f66108fa3660046135e1565b612db7565b34801561090b57600080fd5b506102f66130d3565b34801561092057600080fd5b5061030e60095481565b34801561093657600080fd5b506103b86131f1565b34801561094b57600080fd5b506102f661095a3660046134a0565b613213565b8060008060008381526005602052604090206007015460ff16600b8111156109895761098961343e565b146109e95760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084015b60405180910390fd5b60008381526005602052604090205483906001600160a01b03163314610a615760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520636c69656e742063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109e0565b600084815260056020526040812090600782015460ff16600b811115610a8957610a8961343e565b14610ae45760405162461bcd60e51b815260206004820152602560248201527f54686520636f6e74726163742068617320616c7265616479206265656e20736960448201526433b732b21760d91b60648201526084016109e0565b60078101805460ff1916600a9081179091556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56691610b289160009190613616565b60405180910390a15050505050565b60008054600160a01b900462ffffff1667ffffffffffffffff811115610b5f57610b5f613631565b604051908082528060200260200182016040528015610b88578160200160208202803683370190505b506000838152600560209081526040808320600681015484526004835281842082516060810184528581529384018590529183018490529394509133905b60005462ffffff600160a01b90910481169082161015610d445780610beb88826132a3565b92506000805b88518162ffffff161015610c5557888162ffffff1681518110610c1657610c16613647565b60200260200101516001600160a01b0316856001600160a01b031603610c3f5760019150610c55565b6000915080610c4d81613673565b915050610bf1565b506000546003870154600160a01b90910462ffffff16118015610c76575080155b15610d1b576040805160608101825262ffffff8086168252600060208084018281526001600160a01b03808b1696860196875260038d0180546001810182559085529290932085519201805491519651909316640100000000027fffffffffffffffff0000000000000000000000000000000000000000ffffffff96151563010000000263ffffffff1990921692909416919091171793909316179091559450610d2f565b82610d2581613695565b9350505050610d32565b50505b80610d3c81613673565b915050610bc6565b5060078401805460ff191660059081179091556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56691610d899160049190613616565b60405180910390a1505050505050565b600a8181548110610da957600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b33610e0d5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b3360009081526003602052604090205460ff161515600114610e715760405162461bcd60e51b815260206004820152601660248201527f436c69656e7420646f6573206e6f742065786973742e0000000000000000000060448201526064016109e0565b336000908152600360205260409020805460ff19169055565b60008181526005602052604090205481906001600160a01b0316331480610eca57506000818152600560205260409020600101546001600160a01b031633145b610f3c5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c792074686520636c69656e74206f722074686520776f726b657220636160448201527f6e2063616c6c20746869732066756e6374696f6e2e000000000000000000000060648201526084016109e0565b600054600954600160a01b90910462ffffff1610610fc25760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f756768206a75727920696e206a757279506f6f6c20746f206f60448201527f70656e206120646973707574652e00000000000000000000000000000000000060648201526084016109e0565b600160008381526005602052604090206007015460ff16600b811115610fea57610fea61343e565b148061101b5750600260008381526005602052604090206007015460ff16600b8111156110195761101961343e565b145b6110b45760405162461bcd60e51b8152602060048201526044602482018190527f54686520636f6e7472616374206d75737420626520696e20776f726b20737461908201527f72746564206f722077616974696e6720636c69656e742072657669657720737460648201527f6174652e00000000000000000000000000000000000000000000000000000000608482015260a4016109e0565b60008281526005602052604090206007810180546004919060ff191660018302179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df5666001600460405161110b929190613616565b60405180910390a160088054906000611123836136b4565b90915550506008805460009081526004602052604090206001810194909455600290930180547fffffff0000000000000000000000000000000000000000ffffffffffffffffff1633690100000000000000000002179055915460069092019190915550565b3360009081526002602052604081205460ff1615156001036111ab5750600190565b50600090565b336111f15760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b3360009081526002602052604090205460ff16156112515760405162461bcd60e51b815260206004820152601660248201527f576f726b657220616c7265616479206578697374732e0000000000000000000060448201526064016109e0565b336000908152600260205260409020805460ff19166001179055565b600082815260046020526040812081805b600383015481101561131b57846001600160a01b03168360030182815481106112a9576112a9613647565b60009182526020909120015464010000000090046001600160a01b03161480156112ff57508260030181815481106112e3576112e3613647565b6000918252602090912001546301000000900460ff1615156001145b1561130957600191505b80611313816136b4565b91505061127e565b509150505b92915050565b61132e61337b565b6000805460ff909216600160b81b027fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b336113a95760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b3360009081526003602052604090205460ff16156114095760405162461bcd60e51b815260206004820152601660248201527f436c69656e7420616c7265616479206578697374732e0000000000000000000060448201526064016109e0565b336000908152600360205260409020805460ff19166001179055565b8060018060008381526005602052604090206007015460ff16600b81111561144f5761144f61343e565b146114aa5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b60008381526005602052604090206001015483906001600160a01b031633146115255760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520776f726b65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109e0565b60008481526005602052604090206007810180546009919060ff191660018302179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660016009604051610b28929190613616565b600081815260046020526040812060038101546060929067ffffffffffffffff8111156115ab576115ab613631565b6040519080825280602002602001820160405280156115d4578160200160208202803683370190505b50905060005b6003830154811015611658578260030181815481106115fb576115fb613647565b9060005260206000200160000160049054906101000a90046001600160a01b031682828151811061162e5761162e613647565b6001600160a01b039092166020928302919091019091015280611650816136b4565b9150506115da565b509392505050565b61166861337b565b6000805460ff909216600160c01b027fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff909216919091179055565b6116ab61337b565b6116b560006133d5565b565b336116f75760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b61170033611785565b1561174d5760405162461bcd60e51b815260206004820152601460248201527f4a75727920616c7265616479206578697374732e00000000000000000000000060448201526064016109e0565b6009805490600061175d836136b4565b9091555050600954600090815260066020526040902080546001600160a01b03191633179055565b6000805b6009548110156117cf576000818152600660205260409020546001600160a01b038085169116036117bd5750600192915050565b806117c7816136b4565b915050611789565b50600092915050565b8060068060008381526005602052604090206007015460ff16600b8111156118025761180261343e565b1461185d5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b6000838152600560209081526040808320600681015484526004909252909120600281015462ffffff66010000000000008204811663010000009092041611156118f25760078201805460ff191660089081179091556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566916118e59160069190613616565b60405180910390a1611933565b6007828101805460ff1916821790556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56691610b289160069190613616565b5050505050565b8060008060008381526005602052604090206007015460ff16600b8111156119645761196461343e565b146119bf5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b600083815260056020526040812090600782015460ff16600b8111156119e7576119e761343e565b14611a425760405162461bcd60e51b815260206004820152602560248201527f54686520636f6e74726163742068617320616c7265616479206265656e20736960448201526433b732b21760d91b60648201526084016109e0565b600181810180546001600160a01b0319163317905560078201805460ff1916821790556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56691611a979160009190613616565b60405180910390a150505050565b3360009081526003602052604090205460ff161515600114611b2f5760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920636c69656e742063616e20637265617465206120636f6e7472616360448201527f742e00000000000000000000000000000000000000000000000000000000000060648201526084016109e0565b60003411611ba55760405162461bcd60e51b815260206004820152602160248201527f546865207072696365206d7573742062652067726561746572207468616e203060448201527f2e0000000000000000000000000000000000000000000000000000000000000060648201526084016109e0565b60078054906000611bb5836136b4565b9190505550604051806101000160405280336001600160a01b0316815260200160006001600160a01b03168152602001828152602001848152602001838152602001348152602001600081526020016000600b811115611c1757611c1761343e565b905260078054600090815260056020818152604092839020855181546001600160a01b039182166001600160a01b031991821617835592870151600180840180549290931691909416179055928501516002840155606085015160038401556080850151600484015560a08501519183019190915560c0840151600683015560e08401519282018054929392909160ff199091169083600b811115611cbe57611cbe61343e565b02179055505050505050565b8060028060008381526005602052604090206007015460ff16600b811115611cf457611cf461343e565b14611d4f5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b60008381526005602052604090205483906001600160a01b03163314611dc75760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520636c69656e742063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109e0565b5050506000908152600560205260409020600701805460ff19166003179055565b6000828152600460205260408120815b6003820154811015611e6257836001600160a01b0316826003018281548110611e2357611e23613647565b60009182526020909120015464010000000090046001600160a01b031603611e5057600192505050611320565b80611e5a816136b4565b915050611df8565b506000949350505050565b60008181526005602052604090205481906001600160a01b0316331480611ead57506000818152600560205260409020600101546001600160a01b031633145b611f1f5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c792074686520636c69656e74206f722074686520776f726b657220636160448201527f6e2063616c6c20746869732066756e6374696f6e2e000000000000000000000060648201526084016109e0565b600082815260056020819052604090912090810154611fa65760405162461bcd60e51b815260206004820152602a60248201527f54686973206a6f6220636f6e74726163742062616c616e63652069732065717560448201527f616c20746f207a65726f0000000000000000000000000000000000000000000060648201526084016109e0565b600581015460068201546009600784015460ff16600b811115611fcb57611fcb61343e565b1480611fef5750600a600784015460ff16600b811115611fed57611fed61343e565b145b156120a957825460078401805460ff1916600b1790556000600585018190556040516001600160a01b0390921691829085908381818185875af1925050503d8060008114612059576040519150601f19603f3d011682016040523d82523d6000602084013e61205e565b606091505b50509050806120a25760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109e0565b5050611933565b6003600784015460ff16600b8111156120c4576120c461343e565b0361231b576001830154600080546001600160a01b03909216916120f490606490600160b81b900460ff166136e3565b6120ff906001613705565b61210c9060ff168561371e565b6040805160028082526060820183529293506000929091602083019080368337019050509050828160008151811061214657612146613647565b6001600160a01b039283166020918202929092010152600180548351921691839190811061217657612176613647565b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352600093919290918301908036833701905050905082816000815181106121c5576121c5613647565b60209081029190910101526000546121e990606490600160b81b900460ff166136e3565b6121f69060ff168761371e565b8160018151811061220957612209613647565b602090810291909101015260078701805460ff1916600b1790556000600588018190555b825181101561231157600083828151811061224a5761224a613647565b60200260200101516001600160a01b031683838151811061226d5761226d613647565b602002602001015160405160006040518083038185875af1925050503d80600081146122b5576040519150601f19603f3d011682016040523d82523d6000602084013e6122ba565b606091505b50509050806122fe5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109e0565b5080612309816136b4565b91505061222d565b5050505050611933565b60078084015460ff16600b8111156123355761233561343e565b036127135760008181526004602052604081206003810154909161235a826002613735565b67ffffffffffffffff81111561237257612372613631565b60405190808252806020026020018201604052801561239b578160200160208202803683370190505b50905060006123ab836002613735565b67ffffffffffffffff8111156123c3576123c3613631565b6040519080825280602002602001820160405280156123ec578160200160208202803683370190505b5060078801805460ff1916600b179055600060058901819055600189015481549293506001600160a01b031691606490899061243490889060ff600160c01b90910416613748565b61243e919061371e565b6124489190613748565b600080549192509061246690606490600160b81b900460ff166136e3565b6124739060ff168a61371e565b9050600081612482848c61375c565b61248c919061375c565b905083866000815181106124a2576124a2613647565b60200260200101906001600160a01b031690816001600160a01b03168152505080856000815181106124d6576124d6613647565b60209081029190910101526001805487516001600160a01b03909116918891811061250357612503613647565b60200260200101906001600160a01b031690816001600160a01b031681525050818560018151811061253757612537613647565b60200260200101818152505060005b8781101561261d5788600301818154811061256357612563613647565b60009182526020909120015464010000000090046001600160a01b03168761258c836002613735565b8151811061259c5761259c613647565b6001600160a01b03909216602092830291909101909101526000546064906125d0908a9060ff600160c01b90910416613748565b6125da9190613748565b6125e4908c61371e565b866125f0836002613735565b8151811061260057612600613647565b602090810291909101015280612615816136b4565b915050612546565b5060005b865181101561270557600087828151811061263e5761263e613647565b60200260200101516001600160a01b031687838151811061266157612661613647565b602002602001015160405160006040518083038185875af1925050503d80600081146126a9576040519150601f19603f3d011682016040523d82523d6000602084013e6126ae565b606091505b50509050806126f25760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109e0565b50806126fd816136b4565b915050612621565b505050505050505050611933565b6008600784015460ff16600b81111561272e5761272e61343e565b03612b1957600081815260046020526040812060038101549091612753826002613735565b67ffffffffffffffff81111561276b5761276b613631565b604051908082528060200260200182016040528015612794578160200160208202803683370190505b50905060006127a4836002613735565b67ffffffffffffffff8111156127bc576127bc613631565b6040519080825280602002602001820160405280156127e5578160200160208202803683370190505b5060078801805460ff1916600b179055600060058901819055885481549293506001600160a01b031691606490899061282a90889060ff600160c01b90910416613748565b612834919061371e565b61283e9190613748565b600080549192509061285c90606490600160b81b900460ff166136e3565b6128699060ff168a61371e565b9050600081612878848c61375c565b612882919061375c565b9050838660008151811061289857612898613647565b60200260200101906001600160a01b031690816001600160a01b03168152505080856000815181106128cc576128cc613647565b60209081029190910101526001805487516001600160a01b0390911691889181106128f9576128f9613647565b6001600160a01b039092166020928302919091019091015260005461292b9060649060ff600160b81b909104166136e3565b6129389060ff168b61371e565b8560018151811061294b5761294b613647565b60200260200101818152505060005b87811015612a315788600301818154811061297757612977613647565b60009182526020909120015464010000000090046001600160a01b0316876129a0836002613735565b815181106129b0576129b0613647565b6001600160a01b03909216602092830291909101909101526000546064906129e4908a9060ff600160c01b90910416613748565b6129ee908d61371e565b6129f89190613748565b86612a04836002613735565b81518110612a1457612a14613647565b602090810291909101015280612a29816136b4565b91505061295a565b5060005b8651811015612705576000878281518110612a5257612a52613647565b60200260200101516001600160a01b0316878381518110612a7557612a75613647565b602002602001015160405160006040518083038185875af1925050503d8060008114612abd576040519150601f19603f3d011682016040523d82523d6000602084013e612ac2565b606091505b5050905080612b065760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109e0565b5080612b11816136b4565b915050612a35565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20616c6c6f77656420746f2070756c6c207061796d656e7400000000000060448201526064016109e0565b33612ba15760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b3360009081526002602052604090205460ff161515600114612c055760405162461bcd60e51b815260206004820152601660248201527f576f726b657220646f6573206e6f742065786973742e0000000000000000000060448201526064016109e0565b336000908152600260205260409020805460ff19169055565b612c2661337b565b600080547fffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffffff1660ff92909216600160a01b02919091179055565b8060018060008381526005602052604090206007015460ff16600b811115612c8a57612c8a61343e565b14612ce55760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b60008381526005602052604090206001015483906001600160a01b03163314612d605760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520776f726b65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109e0565b60008481526005602052604090206007810180546002919060ff191660018302179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660016002604051610b28929190613616565b8160058060008381526005602052604090206007015460ff16600b811115612de157612de161343e565b14612e3c5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736044820152643a30ba329760d91b60648201526084016109e0565b60008481526005602090815260408083206006810154845260049092528220600381015491929091815b818162ffffff161015612ecf57336001600160a01b0316846003018262ffffff1681548110612e9757612e97613647565b60009182526020909120015464010000000090046001600160a01b031603612ebd578092505b80612ec781613673565b915050612e66565b50826003018262ffffff1681548110612eea57612eea613647565b6000918252602090912001546301000000900460ff1615612f735760405162461bcd60e51b815260206004820152602260248201527f546865206a757279206d656d6265722068617320616c726561647920766f746560448201527f642e00000000000000000000000000000000000000000000000000000000000060648201526084016109e0565b6001836003018362ffffff1681548110612f8f57612f8f613647565b60009182526020822001805492151563010000000263ff000000199093169290921790915560028401805462ffffff1691612fc983613673565b91906101000a81548162ffffff021916908362ffffff16021790555050861561302c576002830180546301000000900462ffffff1690600361300a83613673565b91906101000a81548162ffffff021916908362ffffff1602179055505061306b565b6002830180546601000000000000900462ffffff1690600661304d83613673565b91906101000a81548162ffffff021916908362ffffff160217905550505b600283015462ffffff168190036130c95760078401805460ff191660069081179091556040517fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566916130c09160059190613616565b60405180910390a15b5050505050505050565b336131135760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109e0565b61311c33611785565b151560011461316d5760405162461bcd60e51b815260206004820152601460248201527f4a75727920646f6573206e6f742065786973742e00000000000000000000000060448201526064016109e0565b6000805b60095481108015613180575081155b156131d857600081815260066020526040902054336001600160a01b03909116036131c657600081815260066020526040902080546001600160a01b0319169055600191505b806131d0816136b4565b915050613171565b50600980549060006131e98361376f565b919050555050565b3360009081526003602052604081205460ff1615156001036111ab5750600190565b61321b61337b565b6001600160a01b0381166132975760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016109e0565b6132a0816133d5565b50565b60008281526005602052604081203382805b60038160ff1611613370576009546040805142602080830191909152448284015262ffffff8a1660608084019190915283518084039091018152608090920190925280519101206133069190613786565b6000818152600660205260409020546001600160a01b031693509150821580159061333e575083546001600160a01b03848116911614155b801561335a575060018401546001600160a01b03848116911614155b61337057806133688161379a565b9150506132b5565b509095945050505050565b6000546001600160a01b031633146116b55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109e0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561343757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600c811061347257634e487b7160e01b600052602160045260246000fd5b9052565b602081016113208284613454565b80356001600160a01b038116811461349b57600080fd5b919050565b6000602082840312156134b257600080fd5b6134bb82613484565b9392505050565b600080604083850312156134d557600080fd5b823591506134e560208401613484565b90509250929050565b6000610100820190506001600160a01b03808b168352808a166020840152508760408301528660608301528560808301528460a08301528360c083015261353860e0830184613454565b9998505050505050505050565b60006020828403121561355757600080fd5b813560ff811681146134bb57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156135a95783516001600160a01b031683529284019291840191600101613584565b50909695505050505050565b6000806000606084860312156135ca57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156135f457600080fd5b823591506020830135801515811461360b57600080fd5b809150509250929050565b604081016136248285613454565b6134bb6020830184613454565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600062ffffff80831681810361368b5761368b61365d565b6001019392505050565b600062ffffff8216806136aa576136aa61365d565b6000190192915050565b6000600182016136c6576136c661365d565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806136f6576136f66136cd565b8060ff84160491505092915050565b60ff82811682821603908111156113205761132061365d565b80820281158282048414176113205761132061365d565b808201808211156113205761132061365d565b600082613757576137576136cd565b500490565b818103818111156113205761132061365d565b60008161377e5761377e61365d565b506000190190565b600082613795576137956136cd565b500690565b600060ff821660ff81036137b0576137b061365d565b6001019291505056fea264697066735822122051e230216b48da894acfb8f9725f6763f89d7199ccf11afb1f6346472d69e46c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1342,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryLength",
        "offset": 20,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 1344,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolFee",
        "offset": 23,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1346,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryFee",
        "offset": 24,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1348,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 1424,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "workers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1428,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "clients",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1433,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Dispute)1413_storage)"
      },
      {
        "astId": 1438,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contracts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ContractPact)1396_storage)"
      },
      {
        "astId": 1442,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryPool",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1445,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1448,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputeCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1451,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1468,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractStates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_enum(ContractState)1464)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(ContractState)1464)dyn_storage": {
        "base": "t_enum(ContractState)1464",
        "encoding": "dynamic_array",
        "label": "enum freelanceContract.ContractState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(juryMember)1420_storage)dyn_storage": {
        "base": "t_struct(juryMember)1420_storage",
        "encoding": "dynamic_array",
        "label": "struct freelanceContract.juryMember[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractState)1464": {
        "encoding": "inplace",
        "label": "enum freelanceContract.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ContractPact)1396_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.ContractPact)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractPact)1396_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)1413_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)1413_storage"
      },
      "t_struct(ContractPact)1396_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.ContractPact",
        "members": [
          {
            "astId": 1380,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 1382,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "worker",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 1384,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hashJob",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1386,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1388,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "createAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1390,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1392,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1395,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(ContractState)1464"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Dispute)1413_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.Dispute",
        "members": [
          {
            "astId": 1398,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1400,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1402,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 1404,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "clientVoteCount",
            "offset": 3,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 1406,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "workerVoteCount",
            "offset": 6,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 1408,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeInitiator",
            "offset": 9,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1412,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryMembers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(juryMember)1420_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(juryMember)1420_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.juryMember",
        "members": [
          {
            "astId": 1415,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 1417,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hasVoted",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1419,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}