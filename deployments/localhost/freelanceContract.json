{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolFee",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_juryFee",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "_juryLength",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ContractStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "juryAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractStates",
      "outputs": [
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_today",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "totalVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "clientVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "workerVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getContractDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getJuryMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isJury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "isJuryInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWorker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryLength",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "juryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "pullPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "requestClientValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "revealState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "selectJuryMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "setIsFinishedAndAllowPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_juryFee",
          "type": "uint8"
        }
      ],
      "name": "setJuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_juryLength",
          "type": "uint8"
        }
      ],
      "name": "setJuryLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolFee",
          "type": "uint8"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "signContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe38d1745962e63d362c88cd5171d0a482525d994d6c95812de663ab5a97a425c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3034512",
    "logsBloom": "0x
    "blockHash": "0x178d95a76cb20ecfd4c7486d3d2d2e46bdd0e6f81db788b3020803e39c017f9a",
    "transactionHash": "0xe38d1745962e63d362c88cd5171d0a482525d994d6c95812de663ab5a97a425c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe38d1745962e63d362c88cd5171d0a482525d994d6c95812de663ab5a97a425c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x178d95a76cb20ecfd4c7486d3d2d2e46bdd0e6f81db788b3020803e39c017f9a"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3034512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    5,
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "9e07701de4109a91eca9b80faa41ae08",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_juryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_juryLength\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ContractStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"juryAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractStates\",\"outputs\":[{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_today\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"totalVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"clientVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"workerVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getContractDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getJuryMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isJury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"isJuryInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryLength\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"juryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"pullPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"requestClientValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"revealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"selectJuryMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"setIsFinishedAndAllowPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_juryFee\",\"type\":\"uint8\"}],\"name\":\"setJuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_juryLength\",\"type\":\"uint8\"}],\"name\":\"setJuryLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/freelanceContract.sol\":\"freelanceContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/freelanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./utils/randomNumber.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract freelanceContract is randomNumber, Ownable {\\n    // State variables\\n\\n    uint24 public juryLength; // jury length\\n    // protocol fee\\n    uint8 public protocolFee; // 5% of the contract price\\n    uint8 public juryFee; // 5% of the contract price\\n    address payable protocolAddress; // protocol address\\n\\n    // admin constructor\\n    constructor(\\n        uint8 _protocolFee,\\n        uint8 _juryFee,\\n        uint24 _juryLength\\n    ) {\\n        protocolFee = _protocolFee;\\n        juryFee = _juryFee;\\n        juryLength = _juryLength;\\n        protocolAddress = payable(msg.sender);\\n    }\\n\\n    struct ContractPact {\\n        address payable client; // client address\\n        address payable worker; // worker address\\n        bytes32 hashJob; // title + description of the work - should be a hash\\n        uint256 deadline; // timestamp\\n        uint256 createAt; // timestamp\\n        uint256 price; // price of the work in wei\\n        uint256 disputeId; // dispute id\\n        ContractState state; // state of the contract\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId; // dispute id\\n        uint256 contractId; // contract id\\n        uint24 totalVoteCount; // jury vote\\n        uint24 clientVoteCount; // client vote count private until reveal\\n        uint24 workerVoteCount; // worker vote count private until reveal\\n        address disputeInitiator; // dispute initiator\\n        juryMember[] juryMembers; // jury address => jury hasVoted\\n    }\\n\\n    struct juryMember {\\n        uint24 juryId; // jury id\\n        bool hasVoted; // jury vote\\n        address payable juryAddress; // jury address\\n    }\\n\\n    // Mappings\\n\\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\\n\\n    uint256 public contractCounter = 0; // counter of contracts\\n    uint256 public disputeCounter = 0; // counter of disputes\\n    uint256 public juryCounter = 0; // counter of jury\\n\\n    enum ContractState {\\n        WaitingWorkerSign,\\n        WorkStarted,\\n        WaitingClientReview,\\n        WorkFinishedSuccessufully,\\n        DisputeOpened,\\n        WaitingforJuryVote,\\n        DisputeClosed,\\n        ClientLostInDispute,\\n        WorkerLostInDispute,\\n        CancelByFreelancer,\\n        CancelByClient,\\n        Archived\\n    }\\n    // reveal won or lost in dispute after jury vote completed (if jury vote is 50% or more)\\n\\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\\n\\n    // Events\\n\\n    // Event to display contract state change\\n    event ContractStateChange(\\n        ContractState previousStatus,\\n        ContractState newStatus\\n    );\\n\\n    event Voted(uint256 disputeId, address juryAddress);\\n\\n    // Modifiers\\n\\n    // Modifier to check if the contract is in the correct state\\n    modifier inState(uint256 _contractId, ContractState _state) {\\n        require(\\n            contracts[_contractId].state == _state,\\n            \\\"Contract is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].worker == msg.sender,\\n            \\\"Only the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClient(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender,\\n            \\\"Only the client can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClientOrWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender ||\\n                contracts[_contractId].worker == msg.sender,\\n            \\\"Only the client or the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Functions admin\\n\\n    function setProtocolFee(uint8 _protocolFee) public onlyOwner {\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function setJuryFee(uint8 _juryFee) public onlyOwner {\\n        juryFee = _juryFee;\\n    }\\n\\n    function setJuryLength(uint8 _juryLength) public onlyOwner {\\n        juryLength = _juryLength;\\n    }\\n\\n    // Function to add a worker to the workers mapping\\n\\n    function addWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == false, \\\"Worker already exists.\\\");\\n        workers[msg.sender] = true;\\n    }\\n\\n    // Function to add a client to the clients mapping\\n\\n    function addClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == false, \\\"Client already exists.\\\");\\n        clients[msg.sender] = true;\\n    }\\n\\n    // Function to add a jury to the clients mapping\\n\\n    function addJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(isJury(msg.sender) == false, \\\"Jury already exists.\\\");\\n        // add a new jury of juryPool\\n        juryCounter++;\\n        juryPool[juryCounter] = msg.sender;\\n    }\\n\\n    // Function to remove a client from the clients mapping\\n    function removeClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == true, \\\"Client does not exist.\\\");\\n        clients[msg.sender] = false;\\n    }\\n\\n    // Function to remove a worker from the workers mapping\\n    function removeWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == true, \\\"Worker does not exist.\\\");\\n        workers[msg.sender] = false;\\n    }\\n\\n    // Function to remove a jury from the juryPool mapping\\n    function removeJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(isJury(msg.sender) == true, \\\"Jury does not exist.\\\");\\n        // remove a jury of juryPool\\n        bool found = false;\\n        for (uint256 i = 0; i < juryCounter && !found; i++) {\\n            if (juryPool[i] == msg.sender) {\\n                delete juryPool[i];\\n                found = true;\\n            }\\n        }\\n        juryCounter--;\\n    }\\n\\n    function isClient() external view returns (bool) {\\n        if (clients[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isWorker() external view returns (bool) {\\n        if (workers[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isJury(address _address) public view returns (bool) {\\n        for (uint256 i = 0; i < juryCounter; i++) {\\n            if (juryPool[i] == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // Function to create a new contract send by client\\n    function createContract(\\n        uint256 _deadline,\\n        uint256 _today,\\n        bytes32 _hash\\n    ) public payable {\\n        require(\\n            clients[msg.sender] == true,\\n            \\\"Only client can create a contract.\\\"\\n        );\\n        require(msg.value > 0, \\\"The price must be greater than 0.\\\");\\n        contractCounter++;\\n        contracts[contractCounter] = ContractPact({\\n            client: payable(msg.sender),\\n            worker: payable(address(0)),\\n            hashJob: _hash,\\n            createAt: _today,\\n            deadline: _deadline,\\n            price: msg.value,\\n            state: ContractState.WaitingWorkerSign,\\n            disputeId: 0\\n        });\\n    }\\n\\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\\n\\n    function cancelContractByClient(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n        thisContract.state = ContractState.CancelByClient;\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.CancelByClient\\n        );\\n    }\\n\\n    // Function for the worker to cancel the contract\\n\\n    function cancelContractByWorker(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.CancelByFreelancer;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.CancelByFreelancer\\n        );\\n    }\\n\\n    // Function for the worker to sign the contract\\n    function signContract(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n\\n        thisContract.worker = payable(msg.sender);\\n        thisContract.state = ContractState.WorkStarted;\\n\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.WorkStarted\\n        );\\n    }\\n\\n    // Function to get the contract details\\n\\n    function getContractDetails(uint256 _contractId)\\n        external\\n        view\\n        returns (\\n            uint256 contractId,\\n            address client,\\n            address worker,\\n            bytes32 hashJob,\\n            uint256 deadline,\\n            uint256 price\\n        )\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        contractId = _contractId;\\n        client = thisContract.client;\\n        worker = thisContract.worker;\\n        hashJob = thisContract.hashJob;\\n        deadline = thisContract.deadline;\\n        price = thisContract.price;\\n    }\\n\\n    // Worker can request client validation\\n\\n    function requestClientValidation(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WaitingClientReview;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.WaitingClientReview\\n        );\\n    }\\n\\n    // Function for the client to validate the contract\\n\\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingClientReview)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\\n    }\\n\\n    function openDispute(uint256 _contractId)\\n        external\\n        onlyClientOrWorker(_contractId)\\n    {\\n        require(\\n            juryCounter > juryLength,\\n            \\\"Not enough jury in juryPool to open a dispute.\\\"\\n        );\\n        require(\\n            contracts[_contractId].state == ContractState.WorkStarted ||\\n                contracts[_contractId].state ==\\n                ContractState.WaitingClientReview,\\n            \\\"The contract must be in work started or waiting client review state.\\\"\\n        );\\n\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.DisputeOpened;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.DisputeOpened\\n        );\\n\\n        disputeCounter++;\\n        Dispute storage thisDispute = disputes[disputeCounter];\\n        thisDispute.contractId = _contractId;\\n        thisDispute.disputeInitiator = msg.sender;\\n        thisContract.disputeId = disputeCounter;\\n    }\\n\\n    // only the initiator can launch the jury selection\\n    // only if not already selected\\n    function selectJuryMember(uint256 _contractId) external {\\n        // address[] memory selectedJurors = new address[](juryLength);\\n        address[] memory selectedJurors = new address[](juryLength);\\n\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage _thisDispute = disputes[thisContract.disputeId];\\n\\n        // select a jury member\\n        juryMember memory jury;\\n\\n        address jurySelected = msg.sender;\\n        for (uint24 i = 0; i < juryLength; i++) {\\n            uint24 _seed = i;\\n            // uint256 randomIndex = random(_seed);\\n            // randomIndex = randomIndex % juryCounter;\\n            jurySelected = generateRandomJury(_contractId, _seed);\\n            bool selected = false;\\n            for (uint24 count = 0; count < selectedJurors.length; count++) {\\n                if (jurySelected == selectedJurors[count]) {\\n                    selected = true;\\n                    break;\\n                }\\n                selected = false;\\n            }\\n            // check if juryselected is already selected in mapping\\n            // bool selected = selectedJurors[jurySelected];\\n\\n            if (\\n                _thisDispute.juryMembers.length < juryLength &&\\n                selected == false\\n            ) {\\n                // selectedJurors[i] = jurySelected;\\n                // selectedJurors[jurySelected] = true;\\n                jury = juryMember({\\n                    juryId: i,\\n                    juryAddress: payable(jurySelected),\\n                    hasVoted: false\\n                });\\n                _thisDispute.juryMembers.push(jury);\\n            } else {\\n                i--;\\n                continue;\\n            }\\n        }\\n        thisContract.state = ContractState.WaitingforJuryVote;\\n        emit ContractStateChange(\\n            ContractState.DisputeOpened,\\n            ContractState.WaitingforJuryVote\\n        );\\n    }\\n\\n    function generateRandomJury(uint256 _contractId, uint24 _seed)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        address jurySelected = msg.sender;\\n        uint256 randomIndex;\\n        for (uint8 i = 0; i <= 3; i++) {\\n            randomIndex = random(_seed) % juryCounter;\\n            jurySelected = juryPool[randomIndex];\\n            if (\\n                jurySelected != address(0) &&\\n                jurySelected != thisContract.client &&\\n                jurySelected != thisContract.worker\\n            ) {\\n                break;\\n            }\\n        }\\n        return jurySelected;\\n    }\\n\\n    function isJuryInDispute(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == _juryAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getJuryMembers(uint256 _disputeId)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        address[] memory juryMembers = new address[](\\n            thisDispute.juryMembers.length\\n        );\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            juryMembers[i] = thisDispute.juryMembers[i].juryAddress;\\n        }\\n        return juryMembers;\\n    }\\n\\n    function hasVoted(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        bool result = false;\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (\\n                thisDispute.juryMembers[i].juryAddress == _juryAddress &&\\n                thisDispute.juryMembers[i].hasVoted == true\\n            ) {\\n                result = true;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Function for the jury to vote for the dispute between the client and the worker\\n\\n    function vote(uint256 _contractId, bool _vote)\\n        external\\n        inState(_contractId, ContractState.WaitingforJuryVote)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\\n\\n        // get the jury member id in the disput\\n        uint24 juryId = 0;\\n        uint256 juryMemberLength = thisDispute.juryMembers.length;\\n        for (uint24 i = 0; i < juryMemberLength; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == msg.sender) {\\n                juryId = i;\\n            }\\n        }\\n        //\\\"The jury member has already voted.\\\"\\n        require(\\n            thisDispute.juryMembers[juryId].hasVoted == false,\\n            \\\"The jury member has already voted.\\\"\\n        );\\n\\n        thisDispute.juryMembers[juryId].hasVoted = true;\\n        thisDispute.totalVoteCount++;\\n        if (_vote) {\\n            thisDispute.clientVoteCount++;\\n        } else {\\n            thisDispute.workerVoteCount++;\\n        }\\n        if (thisDispute.totalVoteCount == juryMemberLength) {\\n            thisContract.state = ContractState.DisputeClosed;\\n            emit ContractStateChange(\\n                ContractState.WaitingforJuryVote,\\n                ContractState.DisputeClosed\\n            );\\n        }\\n    }\\n\\n    // Function to reveal and count the vote of the jury\\n\\n    function revealState(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.DisputeClosed)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\\n\\n        if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\\n            thisContract.state = ContractState.WorkerLostInDispute;\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.WorkerLostInDispute\\n            );\\n        } else {\\n            thisContract.state = ContractState.ClientLostInDispute;\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.ClientLostInDispute\\n            );\\n        }\\n    }\\n\\n    // Function for client or worker to pull payment and split if juryDispute with jury Members and protocol share and the worker if he won the dispute\\n    //should call payment function with constructor(address[] memory payees, uint256[] memory shares)\\n\\n    function pullPayment(uint256 _contractId)\\n        external\\n        onlyClientOrWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        // amount in wei\\n        uint256 amount = thisContract.price;\\n        uint256 _disputeId = thisContract.disputeId;\\n\\n        // if there is no dispute\\n        // if the job have been canceled by the client or freelance\\n        if (\\n            thisContract.state == ContractState.CancelByFreelancer ||\\n            thisContract.state == ContractState.CancelByClient\\n        ) {\\n            address payable clientAddress = thisContract.client;\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            (bool success, ) = clientAddress.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        // if the job is finished successfully\\n        else if (\\n            thisContract.state == ContractState.WorkFinishedSuccessufully\\n        ) {\\n            address WinnerAddress = thisContract.worker;\\n            uint256 WinnerShare = amount * (1 - (protocolFee / 100));\\n            // protocol address and share\\n            address[] memory payees = new address[](2);\\n            payees[0] = WinnerAddress;\\n            payees[1] = protocolAddress;\\n            uint256[] memory shares = new uint256[](2);\\n            shares[0] = WinnerShare;\\n            shares[1] = amount * (protocolFee / 100);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            // create a new payment\\n            // PaymentSplitter payment = new PaymentSplitter(payees, shares);\\n            // transfer the amount to the payment contract\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        }\\n        //if dispute existe and the client or worker lost the dispute\\n        // As dispute finished split payment between jurors, protocol and who wants\\n        else if (thisContract.state == ContractState.ClientLostInDispute) {\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n\\n            address WinnerAddress = thisContract.worker;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = ProtocolShare;\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = amount * (juryFee / juryMemberLength / 100);\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else if (thisContract.state == ContractState.WorkerLostInDispute) {\\n            // jury members address and share\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n            address WinnerAddress = thisContract.client;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = amount * (protocolFee / 100);\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = (amount * (juryFee / juryMemberLength)) / 100;\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else {\\n            revert(\\\"No allowed to pull payment\\\");\\n        }\\n        // transfer the payment to the contract\\n        //payment.transfer(amount); // <--- this is the line that fails\\n        // delete the contract\\n        // delete contracts[_contractId];\\n\\n        // emit PaymentReleased(_contractId, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb052d5433d93b2b5beba2eeb7c3b5009bf1a30e15c3a5b8683ac9ee94d5f8eb9\",\"license\":\"MIT\"},\"contracts/utils/randomNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nabstract contract randomNumber {\\n    // function random() public view returns (uint256) {\\n    //     return block.prevrandao;\\n    // }\\n\\n    function random(uint256 _seed) public view returns (uint256) {\\n        uint256 result = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, _seed)\\n            )\\n        );\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc88c7a274790d2e7ee119b4fc650e03428c4bda7413bd28021fc28481af3a768\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061028c5760003560e01c806374b4f03a11610164578063b406df6d116100c6578063c8ac5e5f1161008a578063e421fbca11610064578063e421fbca14610961578063ef2c02a814610977578063f2fde38b1461098c57600080fd5b8063c8ac5e5f1461090c578063c9d27afe1461092c578063d77640fe1461094c57600080fd5b8063b406df6d14610846578063b863bd3714610866578063b9b268fe146108b7578063bbbb77fb146108d7578063c2693958146108ec57600080fd5b80639537e8d111610128578063a7e7ec2011610102578063a7e7ec20146107d2578063b01f061714610805578063b0e21e8a1461082557600080fd5b80639537e8d1146107695780639858359014610789578063a3626ece146107bf57600080fd5b806374b4f03a146106cc57806374b73997146106e15780637d36f4d3146107015780638008e8bc146107175780638da5cb5b1461073757600080fd5b8063474da79a1161020d578063564a565d116101d15780636b655e45116101ab5780636b655e451461066a5780636c77ee8c14610697578063715018a6146106b757600080fd5b8063564a565d146105695780635823440f1461061a57806361eed2a91461063a57600080fd5b8063474da79a146103e85780634b4d34891461046b5780634d6d6a9c146104a25780634e91f81114610534578063533aa4741461055457600080fd5b806327d00fb01161025457806327d00fb01461033e5780632a2520a71461035e5780632b254c77146103835780634048a2571461039857806343859632146103c857600080fd5b806305f744c114610291578063067bd3b4146102b35780631c798b6a146102dc5780631d4c6e6d146102fc57806324baf3bb14610329575b600080fd5b34801561029d57600080fd5b506102b16102ac3660046130b4565b6109ac565b005b3480156102bf57600080fd5b506102c960075481565b6040519081526020015b60405180910390f35b3480156102e857600080fd5b506102b16102f73660046130b4565b610b38565b34801561030857600080fd5b5061031c6103173660046130b4565b610d81565b6040516102d39190613105565b34801561033557600080fd5b506102b1610db5565b34801561034a57600080fd5b506102b16103593660046130b4565b610e72565b34801561036a57600080fd5b5061037361112f565b60405190151581526020016102d3565b34801561038f57600080fd5b506102b1611157565b3480156103a457600080fd5b506103736103b336600461312f565b60026020526000908152604090205460ff1681565b3480156103d457600080fd5b506103736103e3366004613151565b611213565b3480156103f457600080fd5b506104576104033660046130b4565b6005602081905260009182526040909120805460018201546002830154600384015460048501549585015460068601546007909601546001600160a01b039586169794909516959294919392909160ff1688565b6040516102d398979695949392919061317d565b34801561047757600080fd5b5060005461048e90600160a01b900462ffffff1681565b60405162ffffff90911681526020016102d3565b3480156104ae57600080fd5b506104fb6104bd3660046130b4565b60008181526005602081905260409091208054600182015460028301546003840154939094015494956001600160a01b039283169591909216939291565b604080519687526001600160a01b03958616602088015293909416928501929092526060840152608083015260a082015260c0016102d3565b34801561054057600080fd5b506102b161054f3660046131d4565b6112cc565b34801561056057600080fd5b506102b16112f4565b34801561057557600080fd5b506105d96105843660046130b4565b60046020526000908152604090208054600182015460029092015490919062ffffff8082169163010000008104821691660100000000000082041690690100000000000000000090046001600160a01b031686565b60408051968752602087019590955262ffffff9384169486019490945290821660608501521660808301526001600160a01b031660a082015260c0016102d3565b34801561062657600080fd5b506102b16106353660046130b4565b6113b0565b34801561064657600080fd5b5061037361065536600461312f565b60036020526000908152604090205460ff1681565b34801561067657600080fd5b5061068a6106853660046130b4565b6114b7565b6040516102d391906131f7565b3480156106a357600080fd5b506102b16106b23660046131d4565b61159b565b3480156106c357600080fd5b506102b16115c3565b3480156106d857600080fd5b506102b16115d7565b3480156106ed57600080fd5b506103736106fc36600461312f565b6116a5565b34801561070d57600080fd5b506102c960085481565b34801561072357600080fd5b506102b16107323660046130b4565b6116f8565b34801561074357600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016102d3565b34801561077557600080fd5b506102b16107843660046130b4565b6117f8565b34801561079557600080fd5b506107516107a43660046130b4565b6006602052600090815260409020546001600160a01b031681565b6102b16107cd366004613244565b611913565b3480156107de57600080fd5b506000546107f390600160c01b900460ff1681565b60405160ff90911681526020016102d3565b34801561081157600080fd5b506102b16108203660046130b4565b611b01565b34801561083157600080fd5b506000546107f390600160b81b900460ff1681565b34801561085257600080fd5b50610373610861366004613151565b611be1565b34801561087257600080fd5b506102c96108813660046130b4565b60408051426020808301919091524482840152606080830194909452825180830390940184526080909101909152815191012090565b3480156108c357600080fd5b506102b16108d23660046130b4565b611c66565b3480156108e357600080fd5b506102b16128db565b3480156108f857600080fd5b506102b16109073660046131d4565b612998565b34801561091857600080fd5b506102b16109273660046130b4565b6129c1565b34801561093857600080fd5b506102b1610947366004613270565b612ac8565b34801561095857600080fd5b506102b1612d79565b34801561096d57600080fd5b506102c960095481565b34801561098357600080fd5b50610373612e97565b34801561099857600080fd5b506102b16109a736600461312f565b612eb9565b8060008060008381526005602052604090206007015460ff16600b8111156109d6576109d66130cd565b146109fc5760405162461bcd60e51b81526004016109f3906132a5565b60405180910390fd5b60008381526005602052604090205483906001600160a01b03163314610a745760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520636c69656e742063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109f3565b600084815260056020526040812090600782015460ff16600b811115610a9c57610a9c6130cd565b14610af75760405162461bcd60e51b815260206004820152602560248201527f54686520636f6e74726163742068617320616c7265616479206265656e20736960448201526433b732b21760d91b60648201526084016109f3565b60078101805460ff1916600a90811790915560405160008051602061348e83398151915291610b2991600091906132ea565b60405180910390a15050505050565b60008054600160a01b900462ffffff1667ffffffffffffffff811115610b6057610b60613305565b604051908082528060200260200182016040528015610b89578160200160208202803683370190505b506000838152600560209081526040808320600681015484526004835281842082516060810184528581529384018590529183018490529394509133905b60005462ffffff600160a01b90910481169082161015610d3e5780610bec8882612f32565b92506000805b88518162ffffff161015610c5657888162ffffff1681518110610c1757610c1761331b565b60200260200101516001600160a01b0316856001600160a01b031603610c405760019150610c56565b6000915080610c4e81613347565b915050610bf2565b506000546003870154600160a01b90910462ffffff16118015610c77575080155b15610d15576040805160608101825262ffffff8086168252600060208084018281526001600160a01b03808b1696860196875260038d01805460018101825590855292909320855192018054915196519093166401000000000277ffffffffffffffffffffffffffffffffffffffff000000001996151563010000000263ffffffff1990921692909416919091171793909316179091559450610d29565b82610d1f81613369565b9350505050610d2c565b50505b80610d3681613347565b915050610bc7565b5060078401805460ff1916600590811790915560405160008051602061348e83398151915291610d7191600491906132ea565b60405180910390a1505050505050565b600a8181548110610d9157600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b33610df55760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b3360009081526003602052604090205460ff161515600114610e595760405162461bcd60e51b815260206004820152601660248201527f436c69656e7420646f6573206e6f742065786973742e0000000000000000000060448201526064016109f3565b336000908152600360205260409020805460ff19169055565b60008181526005602052604090205481906001600160a01b0316331480610eb257506000818152600560205260409020600101546001600160a01b031633145b610f1c5760405162461bcd60e51b815260206004820152603560248201527f4f6e6c792074686520636c69656e74206f722074686520776f726b6572206361604482015274371031b0b636103a3434b990333ab731ba34b7b71760591b60648201526084016109f3565b600054600954600160a01b90910462ffffff1610610f935760405162461bcd60e51b815260206004820152602e60248201527f4e6f7420656e6f756768206a75727920696e206a757279506f6f6c20746f206f60448201526d3832b71030903234b9b83aba329760911b60648201526084016109f3565b600160008381526005602052604090206007015460ff16600b811115610fbb57610fbb6130cd565b1480610fec5750600260008381526005602052604090206007015460ff16600b811115610fea57610fea6130cd565b145b61106c5760405162461bcd60e51b8152602060048201526044602482018190527f54686520636f6e7472616374206d75737420626520696e20776f726b20737461908201527f72746564206f722077616974696e6720636c69656e742072657669657720737460648201526330ba329760e11b608482015260a4016109f3565b60008281526005602052604090206007810180546004919060ff1916600183021790555060008051602061348e833981519152600160046040516110b19291906132ea565b60405180910390a1600880549060006110c983613388565b90915550506008805460009081526004602052604090206001810194909455600290930180547fffffff0000000000000000000000000000000000000000ffffffffffffffffff1633690100000000000000000002179055915460069092019190915550565b3360009081526002602052604081205460ff1615156001036111515750600190565b50600090565b336111975760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b3360009081526002602052604090205460ff16156111f75760405162461bcd60e51b815260206004820152601660248201527f576f726b657220616c7265616479206578697374732e0000000000000000000060448201526064016109f3565b336000908152600260205260409020805460ff19166001179055565b600082815260046020526040812081805b60038301548110156112c157846001600160a01b031683600301828154811061124f5761124f61331b565b60009182526020909120015464010000000090046001600160a01b03161480156112a557508260030181815481106112895761128961331b565b6000918252602090912001546301000000900460ff1615156001145b156112af57600191505b806112b981613388565b915050611224565b509150505b92915050565b6112d461300a565b6000805460ff909216600160b81b0260ff60b81b19909216919091179055565b336113345760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b3360009081526003602052604090205460ff16156113945760405162461bcd60e51b815260206004820152601660248201527f436c69656e7420616c7265616479206578697374732e0000000000000000000060448201526064016109f3565b336000908152600360205260409020805460ff19166001179055565b8060018060008381526005602052604090206007015460ff16600b8111156113da576113da6130cd565b146113f75760405162461bcd60e51b81526004016109f3906132a5565b60008381526005602052604090206001015483906001600160a01b031633146114725760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520776f726b65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109f3565b60008481526005602052604090206007810180546009919060ff1916600183021790555060008051602061348e83398151915260016009604051610b299291906132ea565b600081815260046020526040812060038101546060929067ffffffffffffffff8111156114e6576114e6613305565b60405190808252806020026020018201604052801561150f578160200160208202803683370190505b50905060005b6003830154811015611593578260030181815481106115365761153661331b565b9060005260206000200160000160049054906101000a90046001600160a01b03168282815181106115695761156961331b565b6001600160a01b03909216602092830291909101909101528061158b81613388565b915050611515565b509392505050565b6115a361300a565b6000805460ff909216600160c01b0260ff60c01b19909216919091179055565b6115cb61300a565b6115d56000613064565b565b336116175760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b611620336116a5565b1561166d5760405162461bcd60e51b815260206004820152601460248201527f4a75727920616c7265616479206578697374732e00000000000000000000000060448201526064016109f3565b6009805490600061167d83613388565b9091555050600954600090815260066020526040902080546001600160a01b03191633179055565b6000805b6009548110156116ef576000818152600660205260409020546001600160a01b038085169116036116dd5750600192915050565b806116e781613388565b9150506116a9565b50600092915050565b8060068060008381526005602052604090206007015460ff16600b811115611722576117226130cd565b1461173f5760405162461bcd60e51b81526004016109f3906132a5565b6000838152600560209081526040808320600681015484526004909252909120600281015462ffffff66010000000000008204811663010000009092041611156117c25760078201805460ff1916600890811790915560405160008051602061348e833981519152916117b591600691906132ea565b60405180910390a16117f1565b6007828101805460ff19168217905560405160008051602061348e83398151915291610b2991600691906132ea565b5050505050565b8060008060008381526005602052604090206007015460ff16600b811115611822576118226130cd565b1461183f5760405162461bcd60e51b81526004016109f3906132a5565b600083815260056020526040812090600782015460ff16600b811115611867576118676130cd565b146118c25760405162461bcd60e51b815260206004820152602560248201527f54686520636f6e74726163742068617320616c7265616479206265656e20736960448201526433b732b21760d91b60648201526084016109f3565b600181810180546001600160a01b0319163317905560078201805460ff19168217905560405160008051602061348e8339815191529161190591600091906132ea565b60405180910390a150505050565b3360009081526003602052604090205460ff1615156001146119825760405162461bcd60e51b815260206004820152602260248201527f4f6e6c7920636c69656e742063616e20637265617465206120636f6e747261636044820152613a1760f11b60648201526084016109f3565b600034116119dc5760405162461bcd60e51b815260206004820152602160248201527f546865207072696365206d7573742062652067726561746572207468616e20306044820152601760f91b60648201526084016109f3565b600780549060006119ec83613388565b9190505550604051806101000160405280336001600160a01b0316815260200160006001600160a01b03168152602001828152602001848152602001838152602001348152602001600081526020016000600b811115611a4e57611a4e6130cd565b905260078054600090815260056020818152604092839020855181546001600160a01b039182166001600160a01b031991821617835592870151600180840180549290931691909416179055928501516002840155606085015160038401556080850151600484015560a08501519183019190915560c0840151600683015560e08401519282018054929392909160ff199091169083600b811115611af557611af56130cd565b02179055505050505050565b8060028060008381526005602052604090206007015460ff16600b811115611b2b57611b2b6130cd565b14611b485760405162461bcd60e51b81526004016109f3906132a5565b60008381526005602052604090205483906001600160a01b03163314611bc05760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520636c69656e742063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109f3565b5050506000908152600560205260409020600701805460ff19166003179055565b6000828152600460205260408120815b6003820154811015611c5b57836001600160a01b0316826003018281548110611c1c57611c1c61331b565b60009182526020909120015464010000000090046001600160a01b031603611c49576001925050506112c6565b80611c5381613388565b915050611bf1565b506000949350505050565b60008181526005602052604090205481906001600160a01b0316331480611ca657506000818152600560205260409020600101546001600160a01b031633145b611d105760405162461bcd60e51b815260206004820152603560248201527f4f6e6c792074686520636c69656e74206f722074686520776f726b6572206361604482015274371031b0b636103a3434b990333ab731ba34b7b71760591b60648201526084016109f3565b60008281526005602081905260409091209081015460068201546009600784015460ff16600b811115611d4557611d456130cd565b1480611d695750600a600784015460ff16600b811115611d6757611d676130cd565b145b15611e2357825460078401805460ff1916600b1790556000600585018190556040516001600160a01b0390921691829085908381818185875af1925050503d8060008114611dd3576040519150601f19603f3d011682016040523d82523d6000602084013e611dd8565b606091505b5050905080611e1c5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109f3565b50506117f1565b6003600784015460ff16600b811115611e3e57611e3e6130cd565b03612095576001830154600080546001600160a01b0390921691611e6e90606490600160b81b900460ff166133b7565b611e799060016133d9565b611e869060ff16856133f2565b60408051600280825260608201835292935060009290916020830190803683370190505090508281600081518110611ec057611ec061331b565b6001600160a01b0392831660209182029290920101526001805483519216918391908110611ef057611ef061331b565b6001600160a01b039290921660209283029190910182015260408051600280825260608201835260009391929091830190803683370190505090508281600081518110611f3f57611f3f61331b565b6020908102919091010152600054611f6390606490600160b81b900460ff166133b7565b611f709060ff16876133f2565b81600181518110611f8357611f8361331b565b602090810291909101015260078701805460ff1916600b1790556000600588018190555b825181101561208b576000838281518110611fc457611fc461331b565b60200260200101516001600160a01b0316838381518110611fe757611fe761331b565b602002602001015160405160006040518083038185875af1925050503d806000811461202f576040519150601f19603f3d011682016040523d82523d6000602084013e612034565b606091505b50509050806120785760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109f3565b508061208381613388565b915050611fa7565b50505050506117f1565b60078084015460ff16600b8111156120af576120af6130cd565b0361248d576000818152600460205260408120600381015490916120d4826002613409565b67ffffffffffffffff8111156120ec576120ec613305565b604051908082528060200260200182016040528015612115578160200160208202803683370190505b5090506000612125836002613409565b67ffffffffffffffff81111561213d5761213d613305565b604051908082528060200260200182016040528015612166578160200160208202803683370190505b5060078801805460ff1916600b179055600060058901819055600189015481549293506001600160a01b03169160649089906121ae90889060ff600160c01b9091041661341c565b6121b891906133f2565b6121c2919061341c565b60008054919250906121e090606490600160b81b900460ff166133b7565b6121ed9060ff168a6133f2565b90506000816121fc848c613430565b6122069190613430565b9050838660008151811061221c5761221c61331b565b60200260200101906001600160a01b031690816001600160a01b03168152505080856000815181106122505761225061331b565b60209081029190910101526001805487516001600160a01b03909116918891811061227d5761227d61331b565b60200260200101906001600160a01b031690816001600160a01b03168152505081856001815181106122b1576122b161331b565b60200260200101818152505060005b87811015612397578860030181815481106122dd576122dd61331b565b60009182526020909120015464010000000090046001600160a01b031687612306836002613409565b815181106123165761231661331b565b6001600160a01b039092166020928302919091019091015260005460649061234a908a9060ff600160c01b9091041661341c565b612354919061341c565b61235e908c6133f2565b8661236a836002613409565b8151811061237a5761237a61331b565b60209081029190910101528061238f81613388565b9150506122c0565b5060005b865181101561247f5760008782815181106123b8576123b861331b565b60200260200101516001600160a01b03168783815181106123db576123db61331b565b602002602001015160405160006040518083038185875af1925050503d8060008114612423576040519150601f19603f3d011682016040523d82523d6000602084013e612428565b606091505b505090508061246c5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109f3565b508061247781613388565b91505061239b565b5050505050505050506117f1565b6008600784015460ff16600b8111156124a8576124a86130cd565b03612893576000818152600460205260408120600381015490916124cd826002613409565b67ffffffffffffffff8111156124e5576124e5613305565b60405190808252806020026020018201604052801561250e578160200160208202803683370190505b509050600061251e836002613409565b67ffffffffffffffff81111561253657612536613305565b60405190808252806020026020018201604052801561255f578160200160208202803683370190505b5060078801805460ff1916600b179055600060058901819055885481549293506001600160a01b03169160649089906125a490889060ff600160c01b9091041661341c565b6125ae91906133f2565b6125b8919061341c565b60008054919250906125d690606490600160b81b900460ff166133b7565b6125e39060ff168a6133f2565b90506000816125f2848c613430565b6125fc9190613430565b905083866000815181106126125761261261331b565b60200260200101906001600160a01b031690816001600160a01b03168152505080856000815181106126465761264661331b565b60209081029190910101526001805487516001600160a01b0390911691889181106126735761267361331b565b6001600160a01b03909216602092830291909101909101526000546126a59060649060ff600160b81b909104166133b7565b6126b29060ff168b6133f2565b856001815181106126c5576126c561331b565b60200260200101818152505060005b878110156127ab578860030181815481106126f1576126f161331b565b60009182526020909120015464010000000090046001600160a01b03168761271a836002613409565b8151811061272a5761272a61331b565b6001600160a01b039092166020928302919091019091015260005460649061275e908a9060ff600160c01b9091041661341c565b612768908d6133f2565b612772919061341c565b8661277e836002613409565b8151811061278e5761278e61331b565b6020908102919091010152806127a381613388565b9150506126d4565b5060005b865181101561247f5760008782815181106127cc576127cc61331b565b60200260200101516001600160a01b03168783815181106127ef576127ef61331b565b602002602001015160405160006040518083038185875af1925050503d8060008114612837576040519150601f19603f3d011682016040523d82523d6000602084013e61283c565b606091505b50509050806128805760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b60448201526064016109f3565b508061288b81613388565b9150506127af565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f20616c6c6f77656420746f2070756c6c207061796d656e7400000000000060448201526064016109f3565b3361291b5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b3360009081526002602052604090205460ff16151560011461297f5760405162461bcd60e51b815260206004820152601660248201527f576f726b657220646f6573206e6f742065786973742e0000000000000000000060448201526064016109f3565b336000908152600260205260409020805460ff19169055565b6129a061300a565b6000805462ffffff60a01b191660ff92909216600160a01b02919091179055565b8060018060008381526005602052604090206007015460ff16600b8111156129eb576129eb6130cd565b14612a085760405162461bcd60e51b81526004016109f3906132a5565b60008381526005602052604090206001015483906001600160a01b03163314612a835760405162461bcd60e51b815260206004820152602760248201527f4f6e6c792074686520776f726b65722063616e2063616c6c20746869732066756044820152663731ba34b7b71760c91b60648201526084016109f3565b60008481526005602052604090206007810180546002919060ff1916600183021790555060008051602061348e83398151915260016002604051610b299291906132ea565b8160058060008381526005602052604090206007015460ff16600b811115612af257612af26130cd565b14612b0f5760405162461bcd60e51b81526004016109f3906132a5565b60008481526005602090815260408083206006810154845260049092528220600381015491929091815b818162ffffff161015612ba257336001600160a01b0316846003018262ffffff1681548110612b6a57612b6a61331b565b60009182526020909120015464010000000090046001600160a01b031603612b90578092505b80612b9a81613347565b915050612b39565b50826003018262ffffff1681548110612bbd57612bbd61331b565b6000918252602090912001546301000000900460ff1615612c2b5760405162461bcd60e51b815260206004820152602260248201527f546865206a757279206d656d6265722068617320616c726561647920766f7465604482015261321760f11b60648201526084016109f3565b6001836003018362ffffff1681548110612c4757612c4761331b565b60009182526020822001805492151563010000000263ff000000199093169290921790915560028401805462ffffff1691612c8183613347565b91906101000a81548162ffffff021916908362ffffff160217905550508615612ce4576002830180546301000000900462ffffff16906003612cc283613347565b91906101000a81548162ffffff021916908362ffffff16021790555050612d23565b6002830180546601000000000000900462ffffff16906006612d0583613347565b91906101000a81548162ffffff021916908362ffffff160217905550505b600283015462ffffff16819003612d6f5760078401805460ff1916600690811790915560405160008051602061348e83398151915291612d6691600591906132ea565b60405180910390a15b5050505050505050565b33612db95760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21030b2323932b9b99760811b60448201526064016109f3565b612dc2336116a5565b1515600114612e135760405162461bcd60e51b815260206004820152601460248201527f4a75727920646f6573206e6f742065786973742e00000000000000000000000060448201526064016109f3565b6000805b60095481108015612e26575081155b15612e7e57600081815260066020526040902054336001600160a01b0390911603612e6c57600081815260066020526040902080546001600160a01b0319169055600191505b80612e7681613388565b915050612e17565b5060098054906000612e8f83613443565b919050555050565b3360009081526003602052604081205460ff1615156001036111515750600190565b612ec161300a565b6001600160a01b038116612f265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109f3565b612f2f81613064565b50565b60008281526005602052604081203382805b60038160ff1611612fff576009546040805142602080830191909152448284015262ffffff8a166060808401919091528351808403909101815260809092019092528051910120612f95919061345a565b6000818152600660205260409020546001600160a01b0316935091508215801590612fcd575083546001600160a01b03848116911614155b8015612fe9575060018401546001600160a01b03848116911614155b612fff5780612ff78161346e565b915050612f44565b509095945050505050565b6000546001600160a01b031633146115d55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016109f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156130c657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600c811061310157634e487b7160e01b600052602160045260246000fd5b9052565b602081016112c682846130e3565b80356001600160a01b038116811461312a57600080fd5b919050565b60006020828403121561314157600080fd5b61314a82613113565b9392505050565b6000806040838503121561316457600080fd5b8235915061317460208401613113565b90509250929050565b6000610100820190506001600160a01b03808b168352808a166020840152508760408301528660608301528560808301528460a08301528360c08301526131c760e08301846130e3565b9998505050505050505050565b6000602082840312156131e657600080fd5b813560ff8116811461314a57600080fd5b6020808252825182820181905260009190848201906040850190845b818110156132385783516001600160a01b031683529284019291840191600101613213565b50909695505050505050565b60008060006060848603121561325957600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561328357600080fd5b823591506020830135801515811461329a57600080fd5b809150509250929050565b60208082526025908201527f436f6e7472616374206973206e6f7420696e2074686520636f727265637420736040820152643a30ba329760d91b606082015260800190565b604081016132f882856130e3565b61314a60208301846130e3565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600062ffffff80831681810361335f5761335f613331565b6001019392505050565b600062ffffff82168061337e5761337e613331565b6000190192915050565b60006001820161339a5761339a613331565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600060ff8316806133ca576133ca6133a1565b8060ff84160491505092915050565b60ff82811682821603908111156112c6576112c6613331565b80820281158282048414176112c6576112c6613331565b808201808211156112c6576112c6613331565b60008261342b5761342b6133a1565b500490565b818103818111156112c6576112c6613331565b60008161345257613452613331565b506000190190565b600082613469576134696133a1565b500690565b600060ff821660ff810361348457613484613331565b6001019291505056feca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566a2646970667358221220759f1498bb3f904512e8ece7b4a63f9074d56f471acf81137285553e82e8552464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryLength",
        "offset": 20,
        "slot": "0",
        "type": "t_uint24"
      },
      {
        "astId": 146,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolFee",
        "offset": 23,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 148,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryFee",
        "offset": 24,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 150,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 226,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "workers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 230,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "clients",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 235,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Dispute)215_storage)"
      },
      {
        "astId": 240,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contracts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ContractPact)198_storage)"
      },
      {
        "astId": 244,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryPool",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 247,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 250,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputeCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 253,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 270,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractStates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_enum(ContractState)266)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(ContractState)266)dyn_storage": {
        "base": "t_enum(ContractState)266",
        "encoding": "dynamic_array",
        "label": "enum freelanceContract.ContractState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(juryMember)222_storage)dyn_storage": {
        "base": "t_struct(juryMember)222_storage",
        "encoding": "dynamic_array",
        "label": "struct freelanceContract.juryMember[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractState)266": {
        "encoding": "inplace",
        "label": "enum freelanceContract.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ContractPact)198_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.ContractPact)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractPact)198_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)215_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)215_storage"
      },
      "t_struct(ContractPact)198_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.ContractPact",
        "members": [
          {
            "astId": 182,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 184,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "worker",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 186,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hashJob",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 188,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 190,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "createAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 192,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 194,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 197,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(ContractState)266"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Dispute)215_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.Dispute",
        "members": [
          {
            "astId": 200,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 202,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 204,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 206,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "clientVoteCount",
            "offset": 3,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 208,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "workerVoteCount",
            "offset": 6,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 210,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeInitiator",
            "offset": 9,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 214,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryMembers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(juryMember)222_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(juryMember)222_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.juryMember",
        "members": [
          {
            "astId": 217,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 219,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hasVoted",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 221,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}