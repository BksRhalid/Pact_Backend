{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "WorkflowStatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOneProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getVoter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votedProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowStatus",
      "outputs": [
        {
          "internalType": "enum Voting.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x953542b4b6f447c1776ed65236272a25c18da52cf9ff27d23cf0a0315c38661a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2124156",
    "logsBloom": "0x
    "blockHash": "0x8ef66f251180e1b2382ce6cdbea168f6cb28c20881f28f994dab3346530a1dfb",
    "transactionHash": "0x953542b4b6f447c1776ed65236272a25c18da52cf9ff27d23cf0a0315c38661a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x953542b4b6f447c1776ed65236272a25c18da52cf9ff27d23cf0a0315c38661a",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8ef66f251180e1b2382ce6cdbea168f6cb28c20881f28f994dab3346530a1dfb"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2124156",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f1f1b2d4ecefdcbeaee7e232eb64a1cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOneProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStatus\",\"outputs\":[{\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProposal(string)\":{\"details\":\"callable by Voters only\",\"params\":{\"_desc\":\"The decription string of the proposal\"}},\"addVoter(address)\":{\"details\":\"callable by Owner only\",\"params\":{\"_addr\":\"The address of the voter to add\"}},\"endProposalsRegistering()\":{\"details\":\"callable by Owner only\"},\"endVotingSession()\":{\"details\":\"callable by Owner only\"},\"getOneProposal(uint256)\":{\"details\":\"Returns Proposal Array with description and vote count\",\"params\":{\"_id\":\"The index value of the proposal\"}},\"getVoter(address)\":{\"details\":\"only callable by VotersReturns 3 elements : isRegistred, hasVoted, votedProposedID\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVote(uint256)\":{\"details\":\"callable by Voters only\",\"params\":{\"_id\":\"The index value of the proposal\"}},\"startProposalsRegistering()\":{\"details\":\"callable by Owner only\"},\"startVotingSession()\":{\"details\":\"callable by Owner only\"},\"tallyVotes()\":{\"details\":\"callable by Owner only\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(string)\":{\"notice\":\"Add new proposal\"},\"addVoter(address)\":{\"notice\":\"Registre new voter\"},\"endProposalsRegistering()\":{\"notice\":\"State change from 1 to 2\"},\"endVotingSession()\":{\"notice\":\"State change from 3 to 4\"},\"getOneProposal(uint256)\":{\"notice\":\"Returns the proposal\"},\"getVoter(address)\":{\"notice\":\"Returns voters\"},\"setVote(uint256)\":{\"notice\":\"Add vote to a proposal\"},\"startProposalsRegistering()\":{\"notice\":\"State change from 0 to 1\"},\"startVotingSession()\":{\"notice\":\"State change from 2 to 3\"},\"tallyVotes()\":{\"notice\":\"Tally vote\"},\"winningProposalID()\":{\"notice\":\"Manage voting processus\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Voting system smart contract\\n/// @author RhalidBks\\n/// @notice You can use this contract to manage a decentralized autonomous organisation with proposas and voting process\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Voting is Ownable {\\n    /// @notice Manage voting processus\\n    uint256 public winningProposalID;\\n\\n    struct Voter {\\n        bool isRegistered;\\n        bool hasVoted;\\n        uint256 votedProposalId;\\n    }\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    enum WorkflowStatus {\\n        RegisteringVoters,\\n        ProposalsRegistrationStarted,\\n        ProposalsRegistrationEnded,\\n        VotingSessionStarted,\\n        VotingSessionEnded,\\n        VotesTallied\\n    }\\n\\n    WorkflowStatus public workflowStatus;\\n    Proposal[] proposalsArray;\\n    mapping(address => Voter) voters;\\n\\n    event VoterRegistered(address voterAddress);\\n    event WorkflowStatusChange(\\n        WorkflowStatus previousStatus,\\n        WorkflowStatus newStatus\\n    );\\n    event ProposalRegistered(uint256 proposalId);\\n    event Voted(address voter, uint256 proposalId);\\n\\n    modifier onlyVoters() {\\n        require(voters[msg.sender].isRegistered, \\\"You're not a voter\\\");\\n        _;\\n    }\\n\\n    // on peut faire un modifier pour les \\u00e9tats\\n\\n    // ::::::::::::: GETTERS ::::::::::::: //\\n\\n    /// @notice Returns voters\\n    /// @dev only callable by Voters\\n    /// @dev Returns 3 elements : isRegistred, hasVoted, votedProposedID\\n    function getVoter(address _addr)\\n        external\\n        view\\n        onlyVoters\\n        returns (Voter memory)\\n    {\\n        return voters[_addr];\\n    }\\n\\n    /// @notice Returns the proposal\\n    /// @param _id The index value of the proposal\\n    /// @dev Returns Proposal Array with description and vote count\\n    function getOneProposal(uint256 _id)\\n        external\\n        view\\n        onlyVoters\\n        returns (Proposal memory)\\n    {\\n        return proposalsArray[_id];\\n    }\\n\\n    // ::::::::::::: REGISTRATION ::::::::::::: //\\n\\n    /// @notice Registre new voter\\n    /// @param _addr The address of the voter to add\\n    /// @dev callable by Owner only\\n    function addVoter(address _addr) external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Voters registration is not open yet\\\"\\n        );\\n        require(voters[_addr].isRegistered != true, \\\"Already registered\\\");\\n\\n        voters[_addr].isRegistered = true;\\n        emit VoterRegistered(_addr);\\n    }\\n\\n    // ::::::::::::: PROPOSAL ::::::::::::: //\\n\\n    /// @notice Add new proposal\\n    /// @param _desc The decription string of the proposal\\n    /// @dev callable by Voters only\\n    function addProposal(string calldata _desc) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"Proposals are not allowed yet\\\"\\n        );\\n        require(\\n            keccak256(abi.encode(_desc)) != keccak256(abi.encode(\\\"\\\")),\\n            \\\"Vous ne pouvez pas ne rien proposer\\\"\\n        ); // facultatif\\n        // voir que desc est different des autres\\n        require(\\n            proposalsArray.length < 12,\\n            \\\"La session a atteint son nombre maximum de 12 propositions\\\"\\n        );\\n\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        proposalsArray.push(proposal);\\n        emit ProposalRegistered(proposalsArray.length - 1);\\n    }\\n\\n    // ::::::::::::: VOTE ::::::::::::: //\\n\\n    /// @notice Add vote to a proposal\\n    /// @param _id The index value of the proposal\\n    /// @dev callable by Voters only\\n    function setVote(uint256 _id) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"Voting session havent started yet\\\"\\n        );\\n        require(voters[msg.sender].hasVoted != true, \\\"You have already voted\\\");\\n        require(_id < proposalsArray.length, \\\"Proposal not found\\\"); // pas oblig\\u00e9, et pas besoin du >0 car uint\\n\\n        voters[msg.sender].votedProposalId = _id;\\n        voters[msg.sender].hasVoted = true;\\n        proposalsArray[_id].voteCount++;\\n\\n        emit Voted(msg.sender, _id);\\n    }\\n\\n    // ::::::::::::: STATE ::::::::::::: //\\n\\n    /// @notice State change from 0 to 1\\n    /// @dev callable by Owner only\\n    function startProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Registering proposals cant be started now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\\n\\n        Proposal memory proposal;\\n        proposal.description = \\\"GENESIS\\\";\\n        proposalsArray.push(proposal);\\n\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.RegisteringVoters,\\n            WorkflowStatus.ProposalsRegistrationStarted\\n        );\\n    }\\n\\n    /// @notice State change from 1 to 2\\n    /// @dev callable by Owner only\\n    function endProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"Registering proposals havent started yet\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationStarted,\\n            WorkflowStatus.ProposalsRegistrationEnded\\n        );\\n    }\\n\\n    /// @notice State change from 2 to 3\\n    /// @dev callable by Owner only\\n    function startVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationEnded,\\n            \\\"Registering proposals phase is not finished\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationEnded,\\n            WorkflowStatus.VotingSessionStarted\\n        );\\n    }\\n\\n    /// @notice State change from 3 to 4\\n    /// @dev callable by Owner only\\n    function endVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"Voting session havent started yet\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionStarted,\\n            WorkflowStatus.VotingSessionEnded\\n        );\\n    }\\n\\n    /// @notice Tally vote\\n    /// @dev callable by Owner only\\n    function tallyVotes() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionEnded,\\n            \\\"Current status is not voting session ended\\\"\\n        );\\n        uint256 _winningProposalId;\\n        for (uint256 p = 0; p < proposalsArray.length; p++) {\\n            if (\\n                proposalsArray[p].voteCount >\\n                proposalsArray[_winningProposalId].voteCount\\n            ) {\\n                _winningProposalId = p;\\n            }\\n        }\\n        winningProposalID = _winningProposalId;\\n\\n        workflowStatus = WorkflowStatus.VotesTallied;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionEnded,\\n            WorkflowStatus.VotesTallied\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xda129658020233fa67beeb7756593a3a678ea8c033d72262bd8f8d7e9657040b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61252f80620001146000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a7bfab1611610097578063d4f50f9811610066578063d4f50f98146101ee578063ee74c6781461021e578063f2fde38b14610228578063f4ab9adf14610244576100f5565b8063a7bfab16146101b2578063bdc01431146101bc578063c7038a4e146101da578063c88af42f146101e4576100f5565b8063715018a6116100d3578063715018a61461013c5780638da5cb5b14610146578063a1edffa214610164578063a2788cce14610182576100f5565b8063230796ae146100fa5780632fdae3c514610116578063378a217814610132575b600080fd5b610114600480360381019061010f9190611499565b610260565b005b610130600480360381019061012b919061152b565b61055b565b005b61013a610826565b005b610144610993565b005b61014e6109a7565b60405161015b91906115b9565b60405180910390f35b61016c6109d0565b604051610179919061164b565b60405180910390f35b61019c60048036038101906101979190611499565b6109e3565b6040516101a99190611742565b60405180910390f35b6101ba610b4a565b005b6101c4610c30565b6040516101d19190611773565b60405180910390f35b6101e2610c36565b005b6101ec610db1565b005b610208600480360381019061020391906117ba565b610e96565b6040516102159190611844565b60405180910390f35b610226610fbe565b005b610242600480360381019061023d91906117ba565b6110a4565b005b61025e600480360381019061025991906117ba565b611127565b005b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906118bc565b60405180910390fd5b60036005811115610303576103026115d4565b5b600260009054906101000a900460ff166005811115610325576103246115d4565b5b14610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c9061194e565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f2906119ba565b60405180910390fd5b6003805490508110610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990611a26565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106104f8576104f7611a46565b5b9060005260206000209060020201600101600081548092919061051a90611aa4565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca43382604051610550929190611aec565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906118bc565b60405180910390fd5b600160058111156105fe576105fd6115d4565b5b600260009054906101000a900460ff1660058111156106205761061f6115d4565b5b14610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611b61565b60405180910390fd5b60405160200161066f90611ba7565b604051602081830303815290604052805190602001208282604051602001610698929190611c03565b60405160208183030381529060405280519060200120036106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590611c99565b60405180910390fd5b600c60038054905010610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90611d2b565b60405180910390fd5b61073e61141a565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160000181905250600381908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816107cc9190611f86565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f600160038054905061080c9190612058565b6040516108199190611773565b60405180910390a1505050565b61082e6112d0565b60046005811115610842576108416115d4565b5b600260009054906101000a900460ff166005811115610864576108636115d4565b5b146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906120fe565b60405180910390fd5b600080600090505b60038054905081101561092257600382815481106108cd576108cc611a46565b5b906000526020600020906002020160010154600382815481106108f3576108f2611a46565b5b906000526020600020906002020160010154111561090f578091505b808061091a90611aa4565b9150506108ac565b50806001819055506005600260006101000a81548160ff021916908360058111156109505761094f6115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6004600560405161098892919061211e565b60405180910390a150565b61099b6112d0565b6109a5600061134e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b6109eb61141a565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a71906118bc565b60405180910390fd5b60038281548110610a8e57610a8d611a46565b5b9060005260206000209060020201604051806040016040529081600082018054610ab790611da9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae390611da9565b8015610b305780601f10610b0557610100808354040283529160200191610b30565b820191906000526020600020905b815481529060010190602001808311610b1357829003601f168201915b505050505081526020016001820154815250509050919050565b610b526112d0565b60036005811115610b6657610b656115d4565b5b600260009054906101000a900460ff166005811115610b8857610b876115d4565b5b14610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf9061194e565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610bee57610bed6115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610c2692919061211e565b60405180910390a1565b60015481565b610c3e6112d0565b60006005811115610c5257610c516115d4565b5b600260009054906101000a900460ff166005811115610c7457610c736115d4565b5b14610cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cab906121b9565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610cda57610cd96115d4565b5b0217905550610ce761141a565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610d669190611f86565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610da692919061211e565b60405180910390a150565b610db96112d0565b60016005811115610dcd57610dcc6115d4565b5b600260009054906101000a900460ff166005811115610def57610dee6115d4565b5b14610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061224b565b60405180910390fd5b60028060006101000a81548160ff02191690836005811115610e5457610e536115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60016002604051610e8c92919061211e565b60405180910390a1565b610e9e611434565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906118bc565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b610fc66112d0565b60026005811115610fda57610fd96115d4565b5b600260009054906101000a900460ff166005811115610ffc57610ffb6115d4565b5b1461103c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611033906122dd565b60405180910390fd5b6003600260006101000a81548160ff02191690836005811115611062576110616115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6002600360405161109a92919061211e565b60405180910390a1565b6110ac6112d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111129061236f565b60405180910390fd5b6111248161134e565b50565b61112f6112d0565b60006005811115611143576111426115d4565b5b600260009054906101000a900460ff166005811115611165576111646115d4565b5b146111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119c90612401565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615150361123b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112329061246d565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd816040516112c591906115b9565b60405180910390a150565b6112d8611412565b73ffffffffffffffffffffffffffffffffffffffff166112f66109a7565b73ffffffffffffffffffffffffffffffffffffffff161461134c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611343906124d9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61147681611463565b811461148157600080fd5b50565b6000813590506114938161146d565b92915050565b6000602082840312156114af576114ae611459565b5b60006114bd84828501611484565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114eb576114ea6114c6565b5b8235905067ffffffffffffffff811115611508576115076114cb565b5b602083019150836001820283011115611524576115236114d0565b5b9250929050565b6000806020838503121561154257611541611459565b5b600083013567ffffffffffffffff8111156115605761155f61145e565b5b61156c858286016114d5565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115a382611578565b9050919050565b6115b381611598565b82525050565b60006020820190506115ce60008301846115aa565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110611614576116136115d4565b5b50565b600081905061162582611603565b919050565b600061163582611617565b9050919050565b6116458161162a565b82525050565b6000602082019050611660600083018461163c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116a0578082015181840152602081019050611685565b60008484015250505050565b6000601f19601f8301169050919050565b60006116c882611666565b6116d28185611671565b93506116e2818560208601611682565b6116eb816116ac565b840191505092915050565b6116ff81611463565b82525050565b6000604083016000830151848203600086015261172282826116bd565b915050602083015161173760208601826116f6565b508091505092915050565b6000602082019050818103600083015261175c8184611705565b905092915050565b61176d81611463565b82525050565b60006020820190506117886000830184611764565b92915050565b61179781611598565b81146117a257600080fd5b50565b6000813590506117b48161178e565b92915050565b6000602082840312156117d0576117cf611459565b5b60006117de848285016117a5565b91505092915050565b60008115159050919050565b6117fc816117e7565b82525050565b60608201600082015161181860008501826117f3565b50602082015161182b60208501826117f3565b50604082015161183e60408501826116f6565b50505050565b60006060820190506118596000830184611802565b92915050565b600082825260208201905092915050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b60006118a660128361185f565b91506118b182611870565b602082019050919050565b600060208201905081810360008301526118d581611899565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061193860218361185f565b9150611943826118dc565b604082019050919050565b600060208201905081810360008301526119678161192b565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b60006119a460168361185f565b91506119af8261196e565b602082019050919050565b600060208201905081810360008301526119d381611997565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b6000611a1060128361185f565b9150611a1b826119da565b602082019050919050565b60006020820190508181036000830152611a3f81611a03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaf82611463565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ae157611ae0611a75565b5b600182019050919050565b6000604082019050611b0160008301856115aa565b611b0e6020830184611764565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611b4b601d8361185f565b9150611b5682611b15565b602082019050919050565b60006020820190508181036000830152611b7a81611b3e565b9050919050565b50565b6000611b9160008361185f565b9150611b9c82611b81565b600082019050919050565b60006020820190508181036000830152611bc081611b84565b9050919050565b82818337600083830152505050565b6000611be2838561185f565b9350611bef838584611bc7565b611bf8836116ac565b840190509392505050565b60006020820190508181036000830152611c1e818486611bd6565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611c8360238361185f565b9150611c8e82611c27565b604082019050919050565b60006020820190508181036000830152611cb281611c76565b9050919050565b7f4c612073657373696f6e20612061747465696e7420736f6e206e6f6d6272652060008201527f6d6178696d756d2064652031322070726f706f736974696f6e73000000000000602082015250565b6000611d15603a8361185f565b9150611d2082611cb9565b604082019050919050565b60006020820190508181036000830152611d4481611d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dc157607f821691505b602082108103611dd457611dd3611d7a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e3c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611dff565b611e468683611dff565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e83611e7e611e7984611463565b611e5e565b611463565b9050919050565b6000819050919050565b611e9d83611e68565b611eb1611ea982611e8a565b848454611e0c565b825550505050565b600090565b611ec6611eb9565b611ed1818484611e94565b505050565b5b81811015611ef557611eea600082611ebe565b600181019050611ed7565b5050565b601f821115611f3a57611f0b81611dda565b611f1484611def565b81016020851015611f23578190505b611f37611f2f85611def565b830182611ed6565b50505b505050565b600082821c905092915050565b6000611f5d60001984600802611f3f565b1980831691505092915050565b6000611f768383611f4c565b9150826002028217905092915050565b611f8f82611666565b67ffffffffffffffff811115611fa857611fa7611d4b565b5b611fb28254611da9565b611fbd828285611ef9565b600060209050601f831160018114611ff05760008415611fde578287015190505b611fe88582611f6a565b865550612050565b601f198416611ffe86611dda565b60005b8281101561202657848901518255600182019150602085019450602081019050612001565b86831015612043578489015161203f601f891682611f4c565b8355505b6001600288020188555050505b505050505050565b600061206382611463565b915061206e83611463565b925082820390508181111561208657612085611a75565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b60006120e8602a8361185f565b91506120f38261208c565b604082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b6000604082019050612133600083018561163c565b612140602083018461163c565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b60006121a360298361185f565b91506121ae82612147565b604082019050919050565b600060208201905081810360008301526121d281612196565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b600061223560288361185f565b9150612240826121d9565b604082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006122c7602b8361185f565b91506122d28261226b565b604082019050919050565b600060208201905081810360008301526122f6816122ba565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061235960268361185f565b9150612364826122fd565b604082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b60006123eb60238361185f565b91506123f68261238f565b604082019050919050565b6000602082019050818103600083015261241a816123de565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b600061245760128361185f565b915061246282612421565b602082019050919050565b600060208201905081810360008301526124868161244a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006124c360208361185f565b91506124ce8261248d565b602082019050919050565b600060208201905081810360008301526124f2816124b6565b905091905056fea264697066735822122019d7846b87fd5b96d9821a085423ebf7faaee19f79fac8792367e52d152937a864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a7bfab1611610097578063d4f50f9811610066578063d4f50f98146101ee578063ee74c6781461021e578063f2fde38b14610228578063f4ab9adf14610244576100f5565b8063a7bfab16146101b2578063bdc01431146101bc578063c7038a4e146101da578063c88af42f146101e4576100f5565b8063715018a6116100d3578063715018a61461013c5780638da5cb5b14610146578063a1edffa214610164578063a2788cce14610182576100f5565b8063230796ae146100fa5780632fdae3c514610116578063378a217814610132575b600080fd5b610114600480360381019061010f9190611499565b610260565b005b610130600480360381019061012b919061152b565b61055b565b005b61013a610826565b005b610144610993565b005b61014e6109a7565b60405161015b91906115b9565b60405180910390f35b61016c6109d0565b604051610179919061164b565b60405180910390f35b61019c60048036038101906101979190611499565b6109e3565b6040516101a99190611742565b60405180910390f35b6101ba610b4a565b005b6101c4610c30565b6040516101d19190611773565b60405180910390f35b6101e2610c36565b005b6101ec610db1565b005b610208600480360381019061020391906117ba565b610e96565b6040516102159190611844565b60405180910390f35b610226610fbe565b005b610242600480360381019061023d91906117ba565b6110a4565b005b61025e600480360381019061025991906117ba565b611127565b005b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e6906118bc565b60405180910390fd5b60036005811115610303576103026115d4565b5b600260009054906101000a900460ff166005811115610325576103246115d4565b5b14610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c9061194e565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f2906119ba565b60405180910390fd5b6003805490508110610442576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043990611a26565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106104f8576104f7611a46565b5b9060005260206000209060020201600101600081548092919061051a90611aa4565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca43382604051610550929190611aec565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e1906118bc565b60405180910390fd5b600160058111156105fe576105fd6115d4565b5b600260009054906101000a900460ff1660058111156106205761061f6115d4565b5b14610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611b61565b60405180910390fd5b60405160200161066f90611ba7565b604051602081830303815290604052805190602001208282604051602001610698929190611c03565b60405160208183030381529060405280519060200120036106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590611c99565b60405180910390fd5b600c60038054905010610736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072d90611d2b565b60405180910390fd5b61073e61141a565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160000181905250600381908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816107cc9190611f86565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f600160038054905061080c9190612058565b6040516108199190611773565b60405180910390a1505050565b61082e6112d0565b60046005811115610842576108416115d4565b5b600260009054906101000a900460ff166005811115610864576108636115d4565b5b146108a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089b906120fe565b60405180910390fd5b600080600090505b60038054905081101561092257600382815481106108cd576108cc611a46565b5b906000526020600020906002020160010154600382815481106108f3576108f2611a46565b5b906000526020600020906002020160010154111561090f578091505b808061091a90611aa4565b9150506108ac565b50806001819055506005600260006101000a81548160ff021916908360058111156109505761094f6115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6004600560405161098892919061211e565b60405180910390a150565b61099b6112d0565b6109a5600061134e565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b6109eb61141a565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a71906118bc565b60405180910390fd5b60038281548110610a8e57610a8d611a46565b5b9060005260206000209060020201604051806040016040529081600082018054610ab790611da9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae390611da9565b8015610b305780601f10610b0557610100808354040283529160200191610b30565b820191906000526020600020905b815481529060010190602001808311610b1357829003601f168201915b505050505081526020016001820154815250509050919050565b610b526112d0565b60036005811115610b6657610b656115d4565b5b600260009054906101000a900460ff166005811115610b8857610b876115d4565b5b14610bc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbf9061194e565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610bee57610bed6115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610c2692919061211e565b60405180910390a1565b60015481565b610c3e6112d0565b60006005811115610c5257610c516115d4565b5b600260009054906101000a900460ff166005811115610c7457610c736115d4565b5b14610cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cab906121b9565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610cda57610cd96115d4565b5b0217905550610ce761141a565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610d669190611f86565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610da692919061211e565b60405180910390a150565b610db96112d0565b60016005811115610dcd57610dcc6115d4565b5b600260009054906101000a900460ff166005811115610def57610dee6115d4565b5b14610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e269061224b565b60405180910390fd5b60028060006101000a81548160ff02191690836005811115610e5457610e536115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60016002604051610e8c92919061211e565b60405180910390a1565b610e9e611434565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f24906118bc565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b610fc66112d0565b60026005811115610fda57610fd96115d4565b5b600260009054906101000a900460ff166005811115610ffc57610ffb6115d4565b5b1461103c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611033906122dd565b60405180910390fd5b6003600260006101000a81548160ff02191690836005811115611062576110616115d4565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6002600360405161109a92919061211e565b60405180910390a1565b6110ac6112d0565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111129061236f565b60405180910390fd5b6111248161134e565b50565b61112f6112d0565b60006005811115611143576111426115d4565b5b600260009054906101000a900460ff166005811115611165576111646115d4565b5b146111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119c90612401565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff1615150361123b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112329061246d565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd816040516112c591906115b9565b60405180910390a150565b6112d8611412565b73ffffffffffffffffffffffffffffffffffffffff166112f66109a7565b73ffffffffffffffffffffffffffffffffffffffff161461134c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611343906124d9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61147681611463565b811461148157600080fd5b50565b6000813590506114938161146d565b92915050565b6000602082840312156114af576114ae611459565b5b60006114bd84828501611484565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114eb576114ea6114c6565b5b8235905067ffffffffffffffff811115611508576115076114cb565b5b602083019150836001820283011115611524576115236114d0565b5b9250929050565b6000806020838503121561154257611541611459565b5b600083013567ffffffffffffffff8111156115605761155f61145e565b5b61156c858286016114d5565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115a382611578565b9050919050565b6115b381611598565b82525050565b60006020820190506115ce60008301846115aa565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60068110611614576116136115d4565b5b50565b600081905061162582611603565b919050565b600061163582611617565b9050919050565b6116458161162a565b82525050565b6000602082019050611660600083018461163c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116a0578082015181840152602081019050611685565b60008484015250505050565b6000601f19601f8301169050919050565b60006116c882611666565b6116d28185611671565b93506116e2818560208601611682565b6116eb816116ac565b840191505092915050565b6116ff81611463565b82525050565b6000604083016000830151848203600086015261172282826116bd565b915050602083015161173760208601826116f6565b508091505092915050565b6000602082019050818103600083015261175c8184611705565b905092915050565b61176d81611463565b82525050565b60006020820190506117886000830184611764565b92915050565b61179781611598565b81146117a257600080fd5b50565b6000813590506117b48161178e565b92915050565b6000602082840312156117d0576117cf611459565b5b60006117de848285016117a5565b91505092915050565b60008115159050919050565b6117fc816117e7565b82525050565b60608201600082015161181860008501826117f3565b50602082015161182b60208501826117f3565b50604082015161183e60408501826116f6565b50505050565b60006060820190506118596000830184611802565b92915050565b600082825260208201905092915050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b60006118a660128361185f565b91506118b182611870565b602082019050919050565b600060208201905081810360008301526118d581611899565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061193860218361185f565b9150611943826118dc565b604082019050919050565b600060208201905081810360008301526119678161192b565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b60006119a460168361185f565b91506119af8261196e565b602082019050919050565b600060208201905081810360008301526119d381611997565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b6000611a1060128361185f565b9150611a1b826119da565b602082019050919050565b60006020820190508181036000830152611a3f81611a03565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaf82611463565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ae157611ae0611a75565b5b600182019050919050565b6000604082019050611b0160008301856115aa565b611b0e6020830184611764565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611b4b601d8361185f565b9150611b5682611b15565b602082019050919050565b60006020820190508181036000830152611b7a81611b3e565b9050919050565b50565b6000611b9160008361185f565b9150611b9c82611b81565b600082019050919050565b60006020820190508181036000830152611bc081611b84565b9050919050565b82818337600083830152505050565b6000611be2838561185f565b9350611bef838584611bc7565b611bf8836116ac565b840190509392505050565b60006020820190508181036000830152611c1e818486611bd6565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611c8360238361185f565b9150611c8e82611c27565b604082019050919050565b60006020820190508181036000830152611cb281611c76565b9050919050565b7f4c612073657373696f6e20612061747465696e7420736f6e206e6f6d6272652060008201527f6d6178696d756d2064652031322070726f706f736974696f6e73000000000000602082015250565b6000611d15603a8361185f565b9150611d2082611cb9565b604082019050919050565b60006020820190508181036000830152611d4481611d08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611dc157607f821691505b602082108103611dd457611dd3611d7a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e3c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611dff565b611e468683611dff565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611e83611e7e611e7984611463565b611e5e565b611463565b9050919050565b6000819050919050565b611e9d83611e68565b611eb1611ea982611e8a565b848454611e0c565b825550505050565b600090565b611ec6611eb9565b611ed1818484611e94565b505050565b5b81811015611ef557611eea600082611ebe565b600181019050611ed7565b5050565b601f821115611f3a57611f0b81611dda565b611f1484611def565b81016020851015611f23578190505b611f37611f2f85611def565b830182611ed6565b50505b505050565b600082821c905092915050565b6000611f5d60001984600802611f3f565b1980831691505092915050565b6000611f768383611f4c565b9150826002028217905092915050565b611f8f82611666565b67ffffffffffffffff811115611fa857611fa7611d4b565b5b611fb28254611da9565b611fbd828285611ef9565b600060209050601f831160018114611ff05760008415611fde578287015190505b611fe88582611f6a565b865550612050565b601f198416611ffe86611dda565b60005b8281101561202657848901518255600182019150602085019450602081019050612001565b86831015612043578489015161203f601f891682611f4c565b8355505b6001600288020188555050505b505050505050565b600061206382611463565b915061206e83611463565b925082820390508181111561208657612085611a75565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b60006120e8602a8361185f565b91506120f38261208c565b604082019050919050565b60006020820190508181036000830152612117816120db565b9050919050565b6000604082019050612133600083018561163c565b612140602083018461163c565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b60006121a360298361185f565b91506121ae82612147565b604082019050919050565b600060208201905081810360008301526121d281612196565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b600061223560288361185f565b9150612240826121d9565b604082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006122c7602b8361185f565b91506122d28261226b565b604082019050919050565b600060208201905081810360008301526122f6816122ba565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061235960268361185f565b9150612364826122fd565b604082019050919050565b600060208201905081810360008301526123888161234c565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b60006123eb60238361185f565b91506123f68261238f565b604082019050919050565b6000602082019050818103600083015261241a816123de565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b600061245760128361185f565b915061246282612421565b602082019050919050565b600060208201905081810360008301526124868161244a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006124c360208361185f565b91506124ce8261248d565b602082019050919050565b600060208201905081810360008301526124f2816124b6565b905091905056fea264697066735822122019d7846b87fd5b96d9821a085423ebf7faaee19f79fac8792367e52d152937a864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProposal(string)": {
        "details": "callable by Voters only",
        "params": {
          "_desc": "The decription string of the proposal"
        }
      },
      "addVoter(address)": {
        "details": "callable by Owner only",
        "params": {
          "_addr": "The address of the voter to add"
        }
      },
      "endProposalsRegistering()": {
        "details": "callable by Owner only"
      },
      "endVotingSession()": {
        "details": "callable by Owner only"
      },
      "getOneProposal(uint256)": {
        "details": "Returns Proposal Array with description and vote count",
        "params": {
          "_id": "The index value of the proposal"
        }
      },
      "getVoter(address)": {
        "details": "only callable by VotersReturns 3 elements : isRegistred, hasVoted, votedProposedID"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVote(uint256)": {
        "details": "callable by Voters only",
        "params": {
          "_id": "The index value of the proposal"
        }
      },
      "startProposalsRegistering()": {
        "details": "callable by Owner only"
      },
      "startVotingSession()": {
        "details": "callable by Owner only"
      },
      "tallyVotes()": {
        "details": "callable by Owner only"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(string)": {
        "notice": "Add new proposal"
      },
      "addVoter(address)": {
        "notice": "Registre new voter"
      },
      "endProposalsRegistering()": {
        "notice": "State change from 1 to 2"
      },
      "endVotingSession()": {
        "notice": "State change from 3 to 4"
      },
      "getOneProposal(uint256)": {
        "notice": "Returns the proposal"
      },
      "getVoter(address)": {
        "notice": "Returns voters"
      },
      "setVote(uint256)": {
        "notice": "Add vote to a proposal"
      },
      "startProposalsRegistering()": {
        "notice": "State change from 0 to 1"
      },
      "startVotingSession()": {
        "notice": "State change from 2 to 3"
      },
      "tallyVotes()": {
        "notice": "Tally vote"
      },
      "winningProposalID()": {
        "notice": "Manage voting processus"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Voting.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 142,
        "contract": "contracts/Voting.sol:Voting",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 164,
        "contract": "contracts/Voting.sol:Voting",
        "label": "workflowStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)161"
      },
      {
        "astId": 168,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposalsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)154_storage)dyn_storage"
      },
      {
        "astId": 173,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Voter)149_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)154_storage)dyn_storage": {
        "base": "t_struct(Proposal)154_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)161": {
        "encoding": "inplace",
        "label": "enum Voting.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)149_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)154_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 151,
            "contract": "contracts/Voting.sol:Voting",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 153,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)149_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 144,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/Voting.sol:Voting",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 148,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votedProposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}