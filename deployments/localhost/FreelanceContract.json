{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "ContractIsFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractReviewRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ContractStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        }
      ],
      "name": "DisputeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "DisputeStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "JuryVote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractStates",
      "outputs": [
        {
          "internalType": "enum FreelanceContract.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum FreelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_today",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeStates",
      "outputs": [
        {
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clientVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workerVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getContractDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getDisputeJury",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "juryList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWorker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "juryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_upper",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "setIsFinishedAndAllowPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "signContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcec56d97b4650542509d51c19bc7455b049ffac50db291121563eef34d464b3f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2748305",
    "logsBloom": "0x
    "blockHash": "0x2bcebbff36f07737964e46ee2e1d68d36591c21250170244344c19dfa7497f00",
    "transactionHash": "0xcec56d97b4650542509d51c19bc7455b049ffac50db291121563eef34d464b3f",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2748305",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4e6f8b26ce4988c662998d37282a17e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"ContractIsFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractReviewRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ContractStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"}],\"name\":\"DisputeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"DisputeStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"JuryVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractStates\",\"outputs\":[{\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_today\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeStates\",\"outputs\":[{\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workerVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getContractDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeJury\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"juryList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"juryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upper\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"setIsFinishedAndAllowPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FreelanceContract.sol\":\"FreelanceContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FreelanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./utils/randomNumber.sol\\\";\\n\\ncontract FreelanceContract is randomNumber {\\n    // State variables\\n\\n    struct ContractPact {\\n        address client; // client address\\n        address worker; // worker address\\n        bytes32 hashJob; // title + description of the work - should be a hash\\n        uint256 deadline; // timestamp\\n        uint256 createAt; // timestamp\\n        uint256 price; // price of the work in wei\\n        ContractState state; // state of the contract\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId; // dispute id\\n        uint256 contractId; // contract id\\n        address disputeInitiator; // dispute initiator\\n        uint256 totalVoteCount; // jury vote\\n        uint256 clientVoteCount; // client vote count\\n        uint256 workerVoteCount; // worker vote count\\n        mapping(address => bool) disputeJury; // jury address => jury vote\\n        DisputeState state;\\n    }\\n\\n    // Mappings\\n\\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\\n\\n    uint256 public contractCounter = 0; // counter of contracts\\n    uint256 public disputeCounter = 0; // counter of disputes\\n    uint256 public juryCounter = 0; // counter of jury\\n\\n    enum ContractState {\\n        WaitingWorkerSign,\\n        WorkStarted,\\n        WaitingClientReview,\\n        WorkFinishedSuccessufully,\\n        DisputeOpened,\\n        ClientLostInCourt,\\n        WorkerLostInCourt,\\n        DisputeClosed,\\n        CancelByFreelancer,\\n        CancelByClient,\\n        Archived\\n    }\\n    enum DisputeState {\\n        WaitingJuryVote,\\n        ClientWon,\\n        WorkerWon,\\n        DisputeClosed\\n    }\\n\\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\\n    DisputeState[] public disputeStates; // array of contract states - could be used to display contract states in the frontend\\n\\n    // Events\\n\\n    // Event to display contract state change\\n    event ContractStateChange(\\n        ContractState previousStatus,\\n        ContractState newStatus\\n    );\\n    event DisputeStateChange(\\n        DisputeState previousStatus,\\n        DisputeState newStatus\\n    );\\n    // Event to display contract creation by client\\n    event ContractCreated(\\n        uint256 contractId,\\n        address client,\\n        address worker,\\n        bytes32 hashJob,\\n        uint256 createAt,\\n        uint256 deadline,\\n        uint256 price,\\n        ContractState state\\n    );\\n\\n    event DisputeCreated(\\n        uint256 disputeId,\\n        uint256 contractId,\\n        address disputeInitiator\\n    );\\n\\n    // Event to display contract signing by worker\\n    event ContractSigned(uint256 contractId, address worker);\\n\\n    // Event to display work is finish by worker\\n    event ContractReviewRequested(uint256 contractId, address worker);\\n\\n    // Event to display work is validated by client\\n    event ContractIsFinished(uint256 contractId);\\n\\n    event JuryVote(uint256 disputeId);\\n\\n    // Modifiers\\n\\n    // Modifier to check if the contract is in the correct state\\n    modifier inState(uint256 _contractId, ContractState _state) {\\n        require(\\n            contracts[_contractId].state == _state,\\n            \\\"Contract is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier to check if the dispute is in the correct state\\n    modifier inStateDispute(uint256 _disputeId, DisputeState _state) {\\n        require(\\n            disputes[_disputeId].state == _state,\\n            \\\"Dispute is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].worker == msg.sender,\\n            \\\"Only the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClient(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender,\\n            \\\"Only the client can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClientOrWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender ||\\n                contracts[_contractId].worker == msg.sender,\\n            \\\"Only the client or the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyJury(uint256 _disputeId) {\\n        require(\\n            disputes[_disputeId].disputeJury[msg.sender] == true,\\n            \\\"Only the jury can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // TODO : add modifier to check only jury of the dispute can call the function\\n\\n    // Functions\\n\\n    // Function to add a worker to the workers mapping\\n\\n    function addWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == false, \\\"Worker already exists.\\\");\\n        workers[msg.sender] = true;\\n    }\\n\\n    // Function to add a client to the clients mapping\\n\\n    function addClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == false, \\\"Client already exists.\\\");\\n        clients[msg.sender] = true;\\n    }\\n\\n    // Function to add a jury to the clients mapping\\n\\n    function addJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        // have to be a worker or client before to apply to be a jury\\n\\n        // add a new jury of juryPool\\n\\n        juryCounter++;\\n        juryPool[juryCounter] = msg.sender;\\n    }\\n\\n    function isClient() external view returns (bool) {\\n        if (clients[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isWorker() external view returns (bool) {\\n        if (workers[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Function to create a new contract send by client\\n    function createContract(\\n        uint256 _deadline,\\n        uint256 _today,\\n        bytes32 _hash\\n    ) public payable {\\n        require(\\n            clients[msg.sender] == true,\\n            \\\"Only client can create a contract.\\\"\\n        );\\n        contractCounter++;\\n        contracts[contractCounter] = ContractPact({\\n            client: msg.sender,\\n            worker: address(0),\\n            hashJob: _hash,\\n            createAt: _today,\\n            deadline: _deadline,\\n            price: msg.value,\\n            state: ContractState.WaitingWorkerSign\\n        });\\n\\n        emit ContractCreated(\\n            contractCounter,\\n            msg.sender,\\n            address(0),\\n            _hash,\\n            _today,\\n            _deadline,\\n            msg.value,\\n            ContractState.WaitingWorkerSign\\n        );\\n    }\\n\\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\\n\\n    function cancelContractByClient(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n        thisContract.state = ContractState.CancelByClient;\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.CancelByClient\\n        );\\n    }\\n\\n    // Function for the worker to cancel the contract\\n\\n    function cancelContractByWorker(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.CancelByFreelancer;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.CancelByFreelancer\\n        );\\n    }\\n\\n    // Function for the worker to sign the contract\\n    function signContract(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n\\n        thisContract.worker = msg.sender;\\n        thisContract.state = ContractState.WorkStarted;\\n\\n        emit ContractSigned(_contractId, msg.sender);\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.WorkStarted\\n        );\\n    }\\n\\n    // Function to get the contract details\\n\\n    function getContractDetails(uint256 _contractId)\\n        external\\n        view\\n        returns (\\n            uint256 contractId,\\n            address client,\\n            address worker,\\n            bytes32 hashJob,\\n            uint256 deadline,\\n            uint256 price\\n        )\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        contractId = _contractId;\\n        client = thisContract.client;\\n        worker = thisContract.worker;\\n        hashJob = thisContract.hashJob;\\n        deadline = thisContract.deadline;\\n        price = thisContract.price;\\n    }\\n\\n    // Function for the client to validate the contract\\n\\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingClientReview)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\\n        emit ContractIsFinished(_contractId);\\n    }\\n\\n    // Function for the client or worker to open a dispute\\n    function openDispute(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyClientOrWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.DisputeOpened;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.DisputeOpened\\n        );\\n\\n        // create a new dispute\\n        disputeCounter++;\\n        Dispute storage thisDispute = disputes[disputeCounter];\\n        thisDispute.contractId = _contractId;\\n        thisDispute.disputeInitiator = msg.sender;\\n        thisDispute.state = DisputeState.WaitingJuryVote;\\n\\n        // select a jury member\\n        uint256 juryIndex = 0;\\n\\n        for (uint256 i = 0; i < 12; i++) {\\n            uint256 randomIndex = random(juryCounter);\\n            address jurySelected = juryPool[randomIndex];\\n            // address jurySelected = juryPool[juryIndex].juryAddress;\\n            if (\\n                jurySelected != thisContract.client &&\\n                jurySelected != thisContract.worker\\n            ) {\\n                thisDispute.disputeJury[jurySelected] = false;\\n                juryIndex++;\\n            } else {\\n                i--;\\n            }\\n        }\\n        // create a new dispute\\n    }\\n\\n    // Function to get the disputeJury list of a dispute\\n\\n    function getDisputeJury(uint256 _disputeId)\\n        external\\n        view\\n        returns (address[] memory juryList)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        juryList = new address[](12);\\n        uint256 index = 0;\\n        //get adress mapping\\n        for (uint256 i = 0; i < juryCounter; i++) {\\n            if (thisDispute.disputeJury[juryPool[i]] == false) {\\n                juryList[index] = juryPool[i];\\n                index++;\\n            }\\n        }\\n        return juryList;\\n    }\\n\\n    // Function for the jury to vote for the dispute between the client and the worker\\n\\n    function vote(uint256 _disputeId, bool _vote)\\n        external\\n        inStateDispute(_disputeId, DisputeState.WaitingJuryVote)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n\\n        // get the jury member\\n\\n        require(\\n            thisDispute.state == DisputeState.WaitingJuryVote,\\n            \\\"The dispute is already closed.\\\"\\n        );\\n        require(\\n            thisDispute.disputeJury[msg.sender] == false,\\n            \\\"The jury member has already voted.\\\"\\n        );\\n        thisDispute.disputeJury[msg.sender] == true;\\n        thisDispute.totalVoteCount++;\\n        if (_vote) {\\n            thisDispute.clientVoteCount++;\\n        } else {\\n            thisDispute.workerVoteCount++;\\n        }\\n        emit JuryVote(_disputeId);\\n        if (thisDispute.totalVoteCount == 12) {\\n            thisDispute.state = DisputeState.DisputeClosed;\\n            emit DisputeStateChange(\\n                DisputeState.WaitingJuryVote,\\n                DisputeState.DisputeClosed\\n            );\\n            if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\\n                ContractPact storage thisContract = contracts[\\n                    thisDispute.contractId\\n                ];\\n                thisContract.state = ContractState.WorkerLostInCourt;\\n                emit ContractIsFinished(thisDispute.contractId);\\n            } else {\\n                ContractPact storage thisContract = contracts[\\n                    thisDispute.contractId\\n                ];\\n                thisContract.state = ContractState.ClientLostInCourt;\\n                emit ContractIsFinished(thisDispute.contractId);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3adeeec79f05003baa2cd213c8430f09f1487d80df0c625fb0a5bfd559e438e2\",\"license\":\"MIT\"},\"contracts/utils/randomNumber.sol\":{\"content\":\"// create random number generator contract to generate random number for jury selection\\n\\n// https://soliditydeveloper.com/prevrandao\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract randomNumber {\\n    uint256 public randomResult;\\n\\n    function random(uint256 _upper) public virtual returns (uint256) {\\n        uint256 randomnumber = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, msg.sender))\\n        );\\n        randomResult = randomnumber % _upper;\\n        return randomResult;\\n    }\\n}\\n\",\"keccak256\":\"0x40f39cbb874d12dbb93748e4621570e61499f1235f9112d15a1b305ba8902dc6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1008,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "randomResult",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 44,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "workers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 48,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "clients",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 53,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Dispute)40_storage)"
      },
      {
        "astId": 58,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ContractPact)20_storage)"
      },
      {
        "astId": 62,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "juryPool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 65,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contractCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 68,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputeCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "juryCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 92,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contractStates",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_enum(ContractState)83)dyn_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputeStates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_enum(DisputeState)88)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(ContractState)83)dyn_storage": {
        "base": "t_enum(ContractState)83",
        "encoding": "dynamic_array",
        "label": "enum FreelanceContract.ContractState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(DisputeState)88)dyn_storage": {
        "base": "t_enum(DisputeState)88",
        "encoding": "dynamic_array",
        "label": "enum FreelanceContract.DisputeState[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractState)83": {
        "encoding": "inplace",
        "label": "enum FreelanceContract.ContractState",
        "numberOfBytes": "1"
      },
      "t_enum(DisputeState)88": {
        "encoding": "inplace",
        "label": "enum FreelanceContract.DisputeState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ContractPact)20_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FreelanceContract.ContractPact)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractPact)20_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)40_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FreelanceContract.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)40_storage"
      },
      "t_struct(ContractPact)20_storage": {
        "encoding": "inplace",
        "label": "struct FreelanceContract.ContractPact",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "worker",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "hashJob",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 12,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "createAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ContractState)83"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Dispute)40_storage": {
        "encoding": "inplace",
        "label": "struct FreelanceContract.Dispute",
        "members": [
          {
            "astId": 22,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeInitiator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 28,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 30,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "clientVoteCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 32,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "workerVoteCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 36,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeJury",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 39,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(DisputeState)88"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}