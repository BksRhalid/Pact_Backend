{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "ContractIsFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractReviewRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.ContractState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ContractStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        }
      ],
      "name": "DisputeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "DisputeStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "name": "JuryVote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractStates",
      "outputs": [
        {
          "internalType": "enum FreelanceContract.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum FreelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_today",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeStates",
      "outputs": [
        {
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clientVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "workerVoteCount",
          "type": "uint256"
        },
        {
          "internalType": "enum FreelanceContract.DisputeState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getContractDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getDisputeJury",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "juryList",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWorker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "juryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_upper",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "setIsFinishedAndAllowPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "signContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf35f1c28481b989845ff1d074ef6171dbefcd12501bc642bde476a53d8e6d6a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2831779",
    "logsBloom": "0x
    "blockHash": "0x0102247d8072408492b2c63adb3ea500569f584e6976f72c49cc5c9d170f7301",
    "transactionHash": "0xcf35f1c28481b989845ff1d074ef6171dbefcd12501bc642bde476a53d8e6d6a",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2831779",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "033d721555a3c5a511727b3b6fdff532",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"ContractIsFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractReviewRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ContractStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"}],\"name\":\"DisputeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"DisputeStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"name\":\"JuryVote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractStates\",\"outputs\":[{\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_today\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeStates\",\"outputs\":[{\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workerVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"enum FreelanceContract.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getContractDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getDisputeJury\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"juryList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"juryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_upper\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"setIsFinishedAndAllowPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FreelanceContract.sol\":\"FreelanceContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FreelanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./utils/randomNumber.sol\\\";\\n\\ncontract FreelanceContract is randomNumber {\\n    // State variables\\n\\n    struct ContractPact {\\n        address client; // client address\\n        address worker; // worker address\\n        bytes32 hashJob; // title + description of the work - should be a hash\\n        uint256 deadline; // timestamp\\n        uint256 createAt; // timestamp\\n        uint256 price; // price of the work in wei\\n        ContractState state; // state of the contract\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId; // dispute id\\n        uint256 contractId; // contract id\\n        address disputeInitiator; // dispute initiator\\n        uint256 totalVoteCount; // jury vote\\n        uint256 clientVoteCount; // client vote count\\n        uint256 workerVoteCount; // worker vote count\\n        mapping(address => bool) disputeJury; // jury address => jury vote\\n        DisputeState state;\\n    }\\n\\n    // Mappings\\n\\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\\n\\n    uint256 public contractCounter = 0; // counter of contracts\\n    uint256 public disputeCounter = 0; // counter of disputes\\n    uint256 public juryCounter = 0; // counter of jury\\n\\n    enum ContractState {\\n        WaitingWorkerSign,\\n        WorkStarted,\\n        WaitingClientReview,\\n        WorkFinishedSuccessufully,\\n        DisputeOpened,\\n        ClientLostInCourt,\\n        WorkerLostInCourt,\\n        DisputeClosed,\\n        CancelByFreelancer,\\n        CancelByClient,\\n        Archived\\n    }\\n    enum DisputeState {\\n        WaitingJuryVote,\\n        ClientWon,\\n        WorkerWon,\\n        DisputeClosed\\n    }\\n\\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\\n    DisputeState[] public disputeStates; // array of contract states - could be used to display contract states in the frontend\\n\\n    // Events\\n\\n    // Event to display contract state change\\n    event ContractStateChange(\\n        ContractState previousStatus,\\n        ContractState newStatus\\n    );\\n    event DisputeStateChange(\\n        DisputeState previousStatus,\\n        DisputeState newStatus\\n    );\\n    // Event to display contract creation by client\\n    event ContractCreated(\\n        uint256 contractId,\\n        address client,\\n        address worker,\\n        bytes32 hashJob,\\n        uint256 createAt,\\n        uint256 deadline,\\n        uint256 price,\\n        ContractState state\\n    );\\n\\n    event DisputeCreated(\\n        uint256 disputeId,\\n        uint256 contractId,\\n        address disputeInitiator\\n    );\\n\\n    // Event to display contract signing by worker\\n    event ContractSigned(uint256 contractId, address worker);\\n\\n    // Event to display work is finish by worker\\n    event ContractReviewRequested(uint256 contractId, address worker);\\n\\n    // Event to display work is validated by client\\n    event ContractIsFinished(uint256 contractId);\\n\\n    event JuryVote(uint256 disputeId);\\n\\n    // Modifiers\\n\\n    // Modifier to check if the contract is in the correct state\\n    modifier inState(uint256 _contractId, ContractState _state) {\\n        require(\\n            contracts[_contractId].state == _state,\\n            \\\"Contract is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier to check if the dispute is in the correct state\\n    modifier inStateDispute(uint256 _disputeId, DisputeState _state) {\\n        require(\\n            disputes[_disputeId].state == _state,\\n            \\\"Dispute is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].worker == msg.sender,\\n            \\\"Only the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClient(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender,\\n            \\\"Only the client can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClientOrWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender ||\\n                contracts[_contractId].worker == msg.sender,\\n            \\\"Only the client or the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyJury(uint256 _disputeId) {\\n        require(\\n            disputes[_disputeId].disputeJury[msg.sender] == true,\\n            \\\"Only the jury can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // TODO : add modifier to check only jury of the dispute can call the function\\n\\n    // Functions\\n\\n    // Function to add a worker to the workers mapping\\n\\n    function addWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == false, \\\"Worker already exists.\\\");\\n        workers[msg.sender] = true;\\n    }\\n\\n    // Function to add a client to the clients mapping\\n\\n    function addClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == false, \\\"Client already exists.\\\");\\n        clients[msg.sender] = true;\\n    }\\n\\n    // Function to add a jury to the clients mapping\\n\\n    function addJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        // have to be a worker or client before to apply to be a jury\\n\\n        // add a new jury of juryPool\\n\\n        juryCounter++;\\n        juryPool[juryCounter] = msg.sender;\\n    }\\n\\n    function isClient() external view returns (bool) {\\n        if (clients[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isWorker() external view returns (bool) {\\n        if (workers[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    // Function to create a new contract send by client\\n    function createContract(\\n        uint256 _deadline,\\n        uint256 _today,\\n        bytes32 _hash\\n    ) public payable {\\n        require(\\n            clients[msg.sender] == true,\\n            \\\"Only client can create a contract.\\\"\\n        );\\n        contractCounter++;\\n        contracts[contractCounter] = ContractPact({\\n            client: msg.sender,\\n            worker: address(0),\\n            hashJob: _hash,\\n            createAt: _today,\\n            deadline: _deadline,\\n            price: msg.value,\\n            state: ContractState.WaitingWorkerSign\\n        });\\n\\n        emit ContractCreated(\\n            contractCounter,\\n            msg.sender,\\n            address(0),\\n            _hash,\\n            _today,\\n            _deadline,\\n            msg.value,\\n            ContractState.WaitingWorkerSign\\n        );\\n    }\\n\\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\\n\\n    function cancelContractByClient(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n        thisContract.state = ContractState.CancelByClient;\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.CancelByClient\\n        );\\n    }\\n\\n    // Function for the worker to cancel the contract\\n\\n    function cancelContractByWorker(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.CancelByFreelancer;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.CancelByFreelancer\\n        );\\n    }\\n\\n    // Function for the worker to sign the contract\\n    function signContract(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.worker == msg.sender,\\n            \\\"Only the worker can sign this contract.\\\"\\n        );\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n\\n        thisContract.state = ContractState.WorkStarted;\\n\\n        emit ContractSigned(_contractId, msg.sender);\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.WorkStarted\\n        );\\n    }\\n\\n    // Function to get the contract details\\n\\n    function getContractDetails(uint256 _contractId)\\n        external\\n        view\\n        returns (\\n            uint256 contractId,\\n            address client,\\n            address worker,\\n            bytes32 hashJob,\\n            uint256 deadline,\\n            uint256 price\\n        )\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        contractId = _contractId;\\n        client = thisContract.client;\\n        worker = thisContract.worker;\\n        hashJob = thisContract.hashJob;\\n        deadline = thisContract.deadline;\\n        price = thisContract.price;\\n    }\\n\\n    // Function for the client to validate the contract\\n\\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingClientReview)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\\n        emit ContractIsFinished(_contractId);\\n    }\\n\\n    // Function for the client or worker to open a dispute\\n    function openDispute(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyClientOrWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.DisputeOpened;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.DisputeOpened\\n        );\\n\\n        // create a new dispute\\n        disputeCounter++;\\n        Dispute storage thisDispute = disputes[disputeCounter];\\n        thisDispute.contractId = _contractId;\\n        thisDispute.disputeInitiator = msg.sender;\\n        thisDispute.state = DisputeState.WaitingJuryVote;\\n\\n        // select a jury member\\n        uint256 juryIndex = 0;\\n\\n        for (uint256 i = 0; i < 12; i++) {\\n            uint256 randomIndex = random(juryCounter);\\n            address jurySelected = juryPool[randomIndex];\\n            // address jurySelected = juryPool[juryIndex].juryAddress;\\n            if (\\n                jurySelected != thisContract.client &&\\n                jurySelected != thisContract.worker\\n            ) {\\n                thisDispute.disputeJury[jurySelected] = false;\\n                juryIndex++;\\n            } else {\\n                i--;\\n            }\\n        }\\n        // create a new dispute\\n    }\\n\\n    // Function to get the disputeJury list of a dispute\\n\\n    function getDisputeJury(uint256 _disputeId)\\n        external\\n        view\\n        returns (address[] memory juryList)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        juryList = new address[](12);\\n        uint256 index = 0;\\n        //get adress mapping\\n        for (uint256 i = 0; i < juryCounter; i++) {\\n            if (thisDispute.disputeJury[juryPool[i]] == false) {\\n                juryList[index] = juryPool[i];\\n                index++;\\n            }\\n        }\\n        return juryList;\\n    }\\n\\n    // Function for the jury to vote for the dispute between the client and the worker\\n\\n    function vote(uint256 _disputeId, bool _vote)\\n        external\\n        inStateDispute(_disputeId, DisputeState.WaitingJuryVote)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n\\n        // get the jury member\\n\\n        require(\\n            thisDispute.state == DisputeState.WaitingJuryVote,\\n            \\\"The dispute is already closed.\\\"\\n        );\\n        require(\\n            thisDispute.disputeJury[msg.sender] == false,\\n            \\\"The jury member has already voted.\\\"\\n        );\\n        thisDispute.disputeJury[msg.sender] == true;\\n        thisDispute.totalVoteCount++;\\n        if (_vote) {\\n            thisDispute.clientVoteCount++;\\n        } else {\\n            thisDispute.workerVoteCount++;\\n        }\\n        emit JuryVote(_disputeId);\\n        if (thisDispute.totalVoteCount == 12) {\\n            thisDispute.state = DisputeState.DisputeClosed;\\n            emit DisputeStateChange(\\n                DisputeState.WaitingJuryVote,\\n                DisputeState.DisputeClosed\\n            );\\n            if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\\n                ContractPact storage thisContract = contracts[\\n                    thisDispute.contractId\\n                ];\\n                thisContract.state = ContractState.WorkerLostInCourt;\\n                emit ContractIsFinished(thisDispute.contractId);\\n            } else {\\n                ContractPact storage thisContract = contracts[\\n                    thisDispute.contractId\\n                ];\\n                thisContract.state = ContractState.ClientLostInCourt;\\n                emit ContractIsFinished(thisDispute.contractId);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb0ef27eab441089197586783bc024d083e0aab0ae5d4d8dafb7c91fad764909c\",\"license\":\"MIT\"},\"contracts/utils/randomNumber.sol\":{\"content\":\"// create random number generator contract to generate random number for jury selection\\n\\n// https://soliditydeveloper.com/prevrandao\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract randomNumber {\\n    uint256 public randomResult;\\n\\n    function random(uint256 _upper) public virtual returns (uint256) {\\n        uint256 randomnumber = uint256(\\n            keccak256(abi.encodePacked(block.timestamp, msg.sender))\\n        );\\n        randomResult = randomnumber % _upper;\\n        return randomResult;\\n    }\\n}\\n\",\"keccak256\":\"0x40f39cbb874d12dbb93748e4621570e61499f1235f9112d15a1b305ba8902dc6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006006556000600755600060085534801561001f57600080fd5b506132648061002f6000396000f3fe6080604052600436106101815760003560e01c806361eed2a9116100d1578063a3626ece1161008a578063c9d27afe11610064578063c9d27afe14610596578063e421fbca146105bf578063ef2c02a8146105ea578063fee6fb261461061557610181565b8063a3626ece14610514578063b01f061714610530578063b863bd371461055957610181565b806361eed2a9146103f257806374b4f03a1461042f5780637d36f4d3146104465780639537e8d114610471578063985835901461049a5780639ed854da146104d757610181565b80634048a2571161013e5780634d6d6a9c116101185780634d6d6a9c1461032d578063533aa4741461036f578063564a565d146103865780635823440f146103c957610181565b80634048a2571461028257806342619f66146102bf578063474da79a146102ea57610181565b806305f744c114610186578063067bd3b4146101af5780631d4c6e6d146101da57806327d00fb0146102175780632a2520a7146102405780632b254c771461026b575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190612305565b610652565b005b3480156101bb57600080fd5b506101c4610881565b6040516101d19190612341565b60405180910390f35b3480156101e657600080fd5b5061020160048036038101906101fc9190612305565b610887565b60405161020e91906123d3565b60405180910390f35b34801561022357600080fd5b5061023e60048036038101906102399190612305565b6108bb565b005b34801561024c57600080fd5b50610255610d25565b6040516102629190612409565b60405180910390f35b34801561027757600080fd5b50610280610d90565b005b34801561028e57600080fd5b506102a960048036038101906102a49190612482565b610eeb565b6040516102b69190612409565b60405180910390f35b3480156102cb57600080fd5b506102d4610f0b565b6040516102e19190612341565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190612305565b610f11565b60405161032497969594939291906124d7565b60405180910390f35b34801561033957600080fd5b50610354600480360381019061034f9190612305565b610fa0565b60405161036696959493929190612546565b60405180910390f35b34801561037b57600080fd5b50610384611030565b005b34801561039257600080fd5b506103ad60048036038101906103a89190612305565b61118c565b6040516103c097969594939291906125ef565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb9190612305565b6111fb565b005b3480156103fe57600080fd5b5061041960048036038101906104149190612482565b6113b2565b6040516104269190612409565b60405180910390f35b34801561043b57600080fd5b506104446113d2565b005b34801561045257600080fd5b5061045b6114af565b6040516104689190612341565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190612305565b6114b5565b005b3480156104a657600080fd5b506104c160048036038101906104bc9190612305565b6117af565b6040516104ce919061265e565b60405180910390f35b3480156104e357600080fd5b506104fe60048036038101906104f99190612305565b6117e2565b60405161050b9190612737565b60405180910390f35b61052e60048036038101906105299190612785565b61198d565b005b34801561053c57600080fd5b5061055760048036038101906105529190612305565b611bf7565b005b34801561056557600080fd5b50610580600480360381019061057b9190612305565b611daa565b60405161058d9190612341565b60405180910390f35b3480156105a257600080fd5b506105bd60048036038101906105b89190612804565b611df8565b005b3480156105cb57600080fd5b506105d4612225565b6040516105e19190612341565b60405180910390f35b3480156105f657600080fd5b506105ff61222b565b60405161060c9190612409565b60405180910390f35b34801561062157600080fd5b5061063c60048036038101906106379190612305565b612296565b6040516106499190612844565b60405180910390f35b80600080600a8111156106685761066761235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a81111561069e5761069d61235c565b5b146106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90612974565b60405180910390fd5b60006004600086815260200190815260200160002090506000600a8111156107ae576107ad61235c565b5b8160060160009054906101000a900460ff16600a8111156107d2576107d161235c565b5b14610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990612a06565b60405180910390fd5b60098160060160006101000a81548160ff0219169083600a81111561083a5761083961235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660006009604051610872929190612a26565b60405180910390a15050505050565b60065481565b6009818154811061089757600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b80600180600a8111156108d1576108d061235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156109075761090661235c565b5b14610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a1957503373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90612ac1565b60405180910390fd5b600060046000868152602001908152602001600020905060048160060160006101000a81548160ff0219169083600a811115610a9757610a9661235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660016004604051610acf929190612a26565b60405180910390a160076000815480929190610aea90612b10565b919050555060006003600060075481526020019081526020016000209050858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160070160006101000a81548160ff02191690836003811115610b7c57610b7b61235c565b5b02179055506000805b600c811015610d1b576000610b9b600854611daa565b905060006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610c8557508560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610cf75760008560060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508380610cef90612b10565b945050610d06565b8280610d0290612b58565b9350505b50508080610d1390612b10565b915050610b85565b5050505050505050565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610d885760019050610d8d565b600090505b90565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690612bcd565b60405180910390fd5b60001515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990612c39565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b60005481565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16905087565b60008060008060008060006004600089815260200190815260200160002090508796508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060020154935080600301549250806005015491505091939550919395565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361109f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109690612bcd565b60405180910390fd5b60001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990612ca5565b60405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060070160009054906101000a900460ff16905087565b80600180600a8111156112115761121061235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156112475761124661235c565b5b14611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461132c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132390612d37565b60405180910390fd5b600060046000868152602001908152602001600020905060088160060160006101000a81548160ff0219169083600a81111561136b5761136a61235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600160086040516113a3929190612a26565b60405180910390a15050505050565b60026020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143890612bcd565b60405180910390fd5b6008600081548092919061145490612b10565b91905055503360056000600854815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b80600080600a8111156114cb576114ca61235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156115015761150061235c565b5b14611541576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611538906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90612d37565b60405180910390fd5b60006004600086815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461168f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168690612dc9565b60405180910390fd5b6000600a8111156116a3576116a261235c565b5b8160060160009054906101000a900460ff16600a8111156116c7576116c661235c565b5b14611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fe90612a06565b60405180910390fd5b60018160060160006101000a81548160ff0219169083600a81111561172f5761172e61235c565b5b02179055507fcd3b1fcca80f9caae633c3e13546995d3810e561957af92839f070c46571942c8533604051611765929190612de9565b60405180910390a17fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600060016040516117a0929190612a26565b60405180910390a15050505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600360008481526020019081526020016000209050600c67ffffffffffffffff81111561181657611815612e12565b5b6040519080825280602002602001820160405280156118445781602001602082028036833780820191505090505b5091506000805b60085481101561198557600015158360060160006005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503611972576005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684838151811061192957611928612e41565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818061196e90612b10565b9250505b808061197d90612b10565b91505061184b565b505050919050565b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790612ee2565b60405180910390fd5b60066000815480929190611a3390612b10565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018481526020018381526020013481526020016000600a811115611aa857611aa761235c565b5b81525060046000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083600a811115611ba157611ba061235c565b5b02179055509050507f76b20af24153d07c8afbb5a938132460fcbbc7790e42c9cb1946ddd77cb3dc12600654336000848688346000604051611bea989796959493929190612f02565b60405180910390a1505050565b80600280600a811115611c0d57611c0c61235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a811115611c4357611c4261235c565b5b14611c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7a906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f90612974565b60405180910390fd5b600060046000868152602001908152602001600020905060038160060160006101000a81548160ff0219169083600a811115611d6757611d6661235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f85604051611d9b9190612341565b60405180910390a15050505050565b6000804233604051602001611dc0929190612fe9565b6040516020818303038152906040528051906020012060001c90508281611de79190613044565b600081905550600054915050919050565b816000806003811115611e0e57611e0d61235c565b5b6003600084815260200190815260200160002060070160009054906101000a900460ff166003811115611e4457611e4361235c565b5b14611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b906130e7565b60405180910390fd5b600060036000868152602001908152602001600020905060006003811115611eaf57611eae61235c565b5b8160070160009054906101000a900460ff166003811115611ed357611ed261235c565b5b14611f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0a90613153565b60405180910390fd5b600015158160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9f906131e5565b60405180910390fd5b600115158160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a9050505080600301600081548092919061200f90612b10565b919050555083156120395780600401600081548092919061202f90612b10565b9190505550612054565b80600501600081548092919061204e90612b10565b91905055505b7f778130d4f9cc3c9c82f6d748f75bbe60e87e8af5d01ff7a7022aef11cd6e71ae856040516120839190612341565b60405180910390a1600c81600301540361221e5760038160070160006101000a81548160ff021916908360038111156120bf576120be61235c565b5b02179055507fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d600060036040516120f7929190613205565b60405180910390a18060050154816004015411156121985760006004600083600101548152602001908152602001600020905060068160060160006101000a81548160ff0219169083600a8111156121525761215161235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f826001015460405161218a9190612341565b60405180910390a15061221d565b60006004600083600101548152602001908152602001600020905060058160060160006101000a81548160ff0219169083600a8111156121db576121da61235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f82600101546040516122139190612341565b60405180910390a1505b5b5050505050565b60085481565b600060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361228e5760019050612293565b600090505b90565b600a81815481106122a657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600080fd5b6000819050919050565b6122e2816122cf565b81146122ed57600080fd5b50565b6000813590506122ff816122d9565b92915050565b60006020828403121561231b5761231a6122ca565b5b6000612329848285016122f0565b91505092915050565b61233b816122cf565b82525050565b60006020820190506123566000830184612332565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061239c5761239b61235c565b5b50565b60008190506123ad8261238b565b919050565b60006123bd8261239f565b9050919050565b6123cd816123b2565b82525050565b60006020820190506123e860008301846123c4565b92915050565b60008115159050919050565b612403816123ee565b82525050565b600060208201905061241e60008301846123fa565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b811461246a57600080fd5b50565b60008135905061247c81612456565b92915050565b600060208284031215612498576124976122ca565b5b60006124a68482850161246d565b91505092915050565b6124b881612444565b82525050565b6000819050919050565b6124d1816124be565b82525050565b600060e0820190506124ec600083018a6124af565b6124f960208301896124af565b61250660408301886124c8565b6125136060830187612332565b6125206080830186612332565b61252d60a0830185612332565b61253a60c08301846123c4565b98975050505050505050565b600060c08201905061255b6000830189612332565b61256860208301886124af565b61257560408301876124af565b61258260608301866124c8565b61258f6080830185612332565b61259c60a0830184612332565b979650505050505050565b600481106125b8576125b761235c565b5b50565b60008190506125c9826125a7565b919050565b60006125d9826125bb565b9050919050565b6125e9816125ce565b82525050565b600060e082019050612604600083018a612332565b6126116020830189612332565b61261e60408301886124af565b61262b6060830187612332565b6126386080830186612332565b61264560a0830185612332565b61265260c08301846125e0565b98975050505050505050565b600060208201905061267360008301846124af565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126ae81612444565b82525050565b60006126c083836126a5565b60208301905092915050565b6000602082019050919050565b60006126e482612679565b6126ee8185612684565b93506126f983612695565b8060005b8381101561272a57815161271188826126b4565b975061271c836126cc565b9250506001810190506126fd565b5085935050505092915050565b6000602082019050818103600083015261275181846126d9565b905092915050565b612762816124be565b811461276d57600080fd5b50565b60008135905061277f81612759565b92915050565b60008060006060848603121561279e5761279d6122ca565b5b60006127ac868287016122f0565b93505060206127bd868287016122f0565b92505060406127ce86828701612770565b9150509250925092565b6127e1816123ee565b81146127ec57600080fd5b50565b6000813590506127fe816127d8565b92915050565b6000806040838503121561281b5761281a6122ca565b5b6000612829858286016122f0565b925050602061283a858286016127ef565b9150509250929050565b600060208201905061285960008301846125e0565b92915050565b600082825260208201905092915050565b7f436f6e7472616374206973206e6f7420696e2074686520636f7272656374207360008201527f746174652e000000000000000000000000000000000000000000000000000000602082015250565b60006128cc60258361285f565b91506128d782612870565b604082019050919050565b600060208201905081810360008301526128fb816128bf565b9050919050565b7f4f6e6c792074686520636c69656e742063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b600061295e60278361285f565b915061296982612902565b604082019050919050565b6000602082019050818103600083015261298d81612951565b9050919050565b7f54686520636f6e74726163742068617320616c7265616479206265656e20736960008201527f676e65642e000000000000000000000000000000000000000000000000000000602082015250565b60006129f060258361285f565b91506129fb82612994565b604082019050919050565b60006020820190508181036000830152612a1f816129e3565b9050919050565b6000604082019050612a3b60008301856123c4565b612a4860208301846123c4565b9392505050565b7f4f6e6c792074686520636c69656e74206f722074686520776f726b657220636160008201527f6e2063616c6c20746869732066756e6374696f6e2e0000000000000000000000602082015250565b6000612aab60358361285f565b9150612ab682612a4f565b604082019050919050565b60006020820190508181036000830152612ada81612a9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b1b826122cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b4d57612b4c612ae1565b5b600182019050919050565b6000612b63826122cf565b915060008203612b7657612b75612ae1565b5b600182039050919050565b7f496e76616c696420616464726573732e00000000000000000000000000000000600082015250565b6000612bb760108361285f565b9150612bc282612b81565b602082019050919050565b60006020820190508181036000830152612be681612baa565b9050919050565b7f576f726b657220616c7265616479206578697374732e00000000000000000000600082015250565b6000612c2360168361285f565b9150612c2e82612bed565b602082019050919050565b60006020820190508181036000830152612c5281612c16565b9050919050565b7f436c69656e7420616c7265616479206578697374732e00000000000000000000600082015250565b6000612c8f60168361285f565b9150612c9a82612c59565b602082019050919050565b60006020820190508181036000830152612cbe81612c82565b9050919050565b7f4f6e6c792074686520776f726b65722063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b6000612d2160278361285f565b9150612d2c82612cc5565b604082019050919050565b60006020820190508181036000830152612d5081612d14565b9050919050565b7f4f6e6c792074686520776f726b65722063616e207369676e207468697320636f60008201527f6e74726163742e00000000000000000000000000000000000000000000000000602082015250565b6000612db360278361285f565b9150612dbe82612d57565b604082019050919050565b60006020820190508181036000830152612de281612da6565b9050919050565b6000604082019050612dfe6000830185612332565b612e0b60208301846124af565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c7920636c69656e742063616e20637265617465206120636f6e7472616360008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ecc60228361285f565b9150612ed782612e70565b604082019050919050565b60006020820190508181036000830152612efb81612ebf565b9050919050565b600061010082019050612f18600083018b612332565b612f25602083018a6124af565b612f3260408301896124af565b612f3f60608301886124c8565b612f4c6080830187612332565b612f5960a0830186612332565b612f6660c0830185612332565b612f7360e08301846123c4565b9998505050505050505050565b6000819050919050565b612f9b612f96826122cf565b612f80565b82525050565b60008160601b9050919050565b6000612fb982612fa1565b9050919050565b6000612fcb82612fae565b9050919050565b612fe3612fde82612444565b612fc0565b82525050565b6000612ff58285612f8a565b6020820191506130058284612fd2565b6014820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304f826122cf565b915061305a836122cf565b92508261306a57613069613015565b5b828206905092915050565b7f44697370757465206973206e6f7420696e2074686520636f727265637420737460008201527f6174652e00000000000000000000000000000000000000000000000000000000602082015250565b60006130d160248361285f565b91506130dc82613075565b604082019050919050565b60006020820190508181036000830152613100816130c4565b9050919050565b7f546865206469737075746520697320616c726561647920636c6f7365642e0000600082015250565b600061313d601e8361285f565b915061314882613107565b602082019050919050565b6000602082019050818103600083015261316c81613130565b9050919050565b7f546865206a757279206d656d6265722068617320616c726561647920766f746560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b60006131cf60228361285f565b91506131da82613173565b604082019050919050565b600060208201905081810360008301526131fe816131c2565b9050919050565b600060408201905061321a60008301856125e0565b61322760208301846125e0565b939250505056fea26469706673582212209eb2ea728eff6004b31a2006ea55969f23c286f07915a3a4e72cfd8788d1426a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101815760003560e01c806361eed2a9116100d1578063a3626ece1161008a578063c9d27afe11610064578063c9d27afe14610596578063e421fbca146105bf578063ef2c02a8146105ea578063fee6fb261461061557610181565b8063a3626ece14610514578063b01f061714610530578063b863bd371461055957610181565b806361eed2a9146103f257806374b4f03a1461042f5780637d36f4d3146104465780639537e8d114610471578063985835901461049a5780639ed854da146104d757610181565b80634048a2571161013e5780634d6d6a9c116101185780634d6d6a9c1461032d578063533aa4741461036f578063564a565d146103865780635823440f146103c957610181565b80634048a2571461028257806342619f66146102bf578063474da79a146102ea57610181565b806305f744c114610186578063067bd3b4146101af5780631d4c6e6d146101da57806327d00fb0146102175780632a2520a7146102405780632b254c771461026b575b600080fd5b34801561019257600080fd5b506101ad60048036038101906101a89190612305565b610652565b005b3480156101bb57600080fd5b506101c4610881565b6040516101d19190612341565b60405180910390f35b3480156101e657600080fd5b5061020160048036038101906101fc9190612305565b610887565b60405161020e91906123d3565b60405180910390f35b34801561022357600080fd5b5061023e60048036038101906102399190612305565b6108bb565b005b34801561024c57600080fd5b50610255610d25565b6040516102629190612409565b60405180910390f35b34801561027757600080fd5b50610280610d90565b005b34801561028e57600080fd5b506102a960048036038101906102a49190612482565b610eeb565b6040516102b69190612409565b60405180910390f35b3480156102cb57600080fd5b506102d4610f0b565b6040516102e19190612341565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190612305565b610f11565b60405161032497969594939291906124d7565b60405180910390f35b34801561033957600080fd5b50610354600480360381019061034f9190612305565b610fa0565b60405161036696959493929190612546565b60405180910390f35b34801561037b57600080fd5b50610384611030565b005b34801561039257600080fd5b506103ad60048036038101906103a89190612305565b61118c565b6040516103c097969594939291906125ef565b60405180910390f35b3480156103d557600080fd5b506103f060048036038101906103eb9190612305565b6111fb565b005b3480156103fe57600080fd5b5061041960048036038101906104149190612482565b6113b2565b6040516104269190612409565b60405180910390f35b34801561043b57600080fd5b506104446113d2565b005b34801561045257600080fd5b5061045b6114af565b6040516104689190612341565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190612305565b6114b5565b005b3480156104a657600080fd5b506104c160048036038101906104bc9190612305565b6117af565b6040516104ce919061265e565b60405180910390f35b3480156104e357600080fd5b506104fe60048036038101906104f99190612305565b6117e2565b60405161050b9190612737565b60405180910390f35b61052e60048036038101906105299190612785565b61198d565b005b34801561053c57600080fd5b5061055760048036038101906105529190612305565b611bf7565b005b34801561056557600080fd5b50610580600480360381019061057b9190612305565b611daa565b60405161058d9190612341565b60405180910390f35b3480156105a257600080fd5b506105bd60048036038101906105b89190612804565b611df8565b005b3480156105cb57600080fd5b506105d4612225565b6040516105e19190612341565b60405180910390f35b3480156105f657600080fd5b506105ff61222b565b60405161060c9190612409565b60405180910390f35b34801561062157600080fd5b5061063c60048036038101906106379190612305565b612296565b6040516106499190612844565b60405180910390f35b80600080600a8111156106685761066761235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a81111561069e5761069d61235c565b5b146106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90612974565b60405180910390fd5b60006004600086815260200190815260200160002090506000600a8111156107ae576107ad61235c565b5b8160060160009054906101000a900460ff16600a8111156107d2576107d161235c565b5b14610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990612a06565b60405180910390fd5b60098160060160006101000a81548160ff0219169083600a81111561083a5761083961235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660006009604051610872929190612a26565b60405180910390a15050505050565b60065481565b6009818154811061089757600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b80600180600a8111156108d1576108d061235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156109075761090661235c565b5b14610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610a1957503373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90612ac1565b60405180910390fd5b600060046000868152602001908152602001600020905060048160060160006101000a81548160ff0219169083600a811115610a9757610a9661235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660016004604051610acf929190612a26565b60405180910390a160076000815480929190610aea90612b10565b919050555060006003600060075481526020019081526020016000209050858160010181905550338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160070160006101000a81548160ff02191690836003811115610b7c57610b7b61235c565b5b02179055506000805b600c811015610d1b576000610b9b600854611daa565b905060006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610c8557508560010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610cf75760008560060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508380610cef90612b10565b945050610d06565b8280610d0290612b58565b9350505b50508080610d1390612b10565b915050610b85565b5050505050505050565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503610d885760019050610d8d565b600090505b90565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690612bcd565b60405180910390fd5b60001515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990612c39565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60016020528060005260406000206000915054906101000a900460ff1681565b60005481565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16905087565b60008060008060008060006004600089815260200190815260200160002090508796508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060020154935080600301549250806005015491505091939550919395565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361109f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109690612bcd565b60405180910390fd5b60001515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990612ca5565b60405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60036020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060070160009054906101000a900460ff16905087565b80600180600a8111156112115761121061235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156112475761124661235c565b5b14611287576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127e906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461132c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132390612d37565b60405180910390fd5b600060046000868152602001908152602001600020905060088160060160006101000a81548160ff0219169083600a81111561136b5761136a61235c565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600160086040516113a3929190612a26565b60405180910390a15050505050565b60026020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143890612bcd565b60405180910390fd5b6008600081548092919061145490612b10565b91905055503360056000600854815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b80600080600a8111156114cb576114ca61235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a8111156115015761150061235c565b5b14611541576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611538906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90612d37565b60405180910390fd5b60006004600086815260200190815260200160002090503373ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461168f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168690612dc9565b60405180910390fd5b6000600a8111156116a3576116a261235c565b5b8160060160009054906101000a900460ff16600a8111156116c7576116c661235c565b5b14611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fe90612a06565b60405180910390fd5b60018160060160006101000a81548160ff0219169083600a81111561172f5761172e61235c565b5b02179055507fcd3b1fcca80f9caae633c3e13546995d3810e561957af92839f070c46571942c8533604051611765929190612de9565b60405180910390a17fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600060016040516117a0929190612a26565b60405180910390a15050505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600360008481526020019081526020016000209050600c67ffffffffffffffff81111561181657611815612e12565b5b6040519080825280602002602001820160405280156118445781602001602082028036833780820191505090505b5091506000805b60085481101561198557600015158360060160006005600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503611972576005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684838151811061192957611928612e41565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818061196e90612b10565b9250505b808061197d90612b10565b91505061184b565b505050919050565b60011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1790612ee2565b60405180910390fd5b60066000815480929190611a3390612b10565b91905055506040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018481526020018381526020013481526020016000600a811115611aa857611aa761235c565b5b81525060046000600654815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083600a811115611ba157611ba061235c565b5b02179055509050507f76b20af24153d07c8afbb5a938132460fcbbc7790e42c9cb1946ddd77cb3dc12600654336000848688346000604051611bea989796959493929190612f02565b60405180910390a1505050565b80600280600a811115611c0d57611c0c61235c565b5b6004600084815260200190815260200160002060060160009054906101000a900460ff16600a811115611c4357611c4261235c565b5b14611c83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7a906128e2565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f90612974565b60405180910390fd5b600060046000868152602001908152602001600020905060038160060160006101000a81548160ff0219169083600a811115611d6757611d6661235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f85604051611d9b9190612341565b60405180910390a15050505050565b6000804233604051602001611dc0929190612fe9565b6040516020818303038152906040528051906020012060001c90508281611de79190613044565b600081905550600054915050919050565b816000806003811115611e0e57611e0d61235c565b5b6003600084815260200190815260200160002060070160009054906101000a900460ff166003811115611e4457611e4361235c565b5b14611e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7b906130e7565b60405180910390fd5b600060036000868152602001908152602001600020905060006003811115611eaf57611eae61235c565b5b8160070160009054906101000a900460ff166003811115611ed357611ed261235c565b5b14611f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0a90613153565b60405180910390fd5b600015158160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611fa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9f906131e5565b60405180910390fd5b600115158160060160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a9050505080600301600081548092919061200f90612b10565b919050555083156120395780600401600081548092919061202f90612b10565b9190505550612054565b80600501600081548092919061204e90612b10565b91905055505b7f778130d4f9cc3c9c82f6d748f75bbe60e87e8af5d01ff7a7022aef11cd6e71ae856040516120839190612341565b60405180910390a1600c81600301540361221e5760038160070160006101000a81548160ff021916908360038111156120bf576120be61235c565b5b02179055507fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d600060036040516120f7929190613205565b60405180910390a18060050154816004015411156121985760006004600083600101548152602001908152602001600020905060068160060160006101000a81548160ff0219169083600a8111156121525761215161235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f826001015460405161218a9190612341565b60405180910390a15061221d565b60006004600083600101548152602001908152602001600020905060058160060160006101000a81548160ff0219169083600a8111156121db576121da61235c565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f82600101546040516122139190612341565b60405180910390a1505b5b5050505050565b60085481565b600060011515600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615150361228e5760019050612293565b600090505b90565b600a81815481106122a657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b600080fd5b6000819050919050565b6122e2816122cf565b81146122ed57600080fd5b50565b6000813590506122ff816122d9565b92915050565b60006020828403121561231b5761231a6122ca565b5b6000612329848285016122f0565b91505092915050565b61233b816122cf565b82525050565b60006020820190506123566000830184612332565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061239c5761239b61235c565b5b50565b60008190506123ad8261238b565b919050565b60006123bd8261239f565b9050919050565b6123cd816123b2565b82525050565b60006020820190506123e860008301846123c4565b92915050565b60008115159050919050565b612403816123ee565b82525050565b600060208201905061241e60008301846123fa565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244f82612424565b9050919050565b61245f81612444565b811461246a57600080fd5b50565b60008135905061247c81612456565b92915050565b600060208284031215612498576124976122ca565b5b60006124a68482850161246d565b91505092915050565b6124b881612444565b82525050565b6000819050919050565b6124d1816124be565b82525050565b600060e0820190506124ec600083018a6124af565b6124f960208301896124af565b61250660408301886124c8565b6125136060830187612332565b6125206080830186612332565b61252d60a0830185612332565b61253a60c08301846123c4565b98975050505050505050565b600060c08201905061255b6000830189612332565b61256860208301886124af565b61257560408301876124af565b61258260608301866124c8565b61258f6080830185612332565b61259c60a0830184612332565b979650505050505050565b600481106125b8576125b761235c565b5b50565b60008190506125c9826125a7565b919050565b60006125d9826125bb565b9050919050565b6125e9816125ce565b82525050565b600060e082019050612604600083018a612332565b6126116020830189612332565b61261e60408301886124af565b61262b6060830187612332565b6126386080830186612332565b61264560a0830185612332565b61265260c08301846125e0565b98975050505050505050565b600060208201905061267360008301846124af565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6126ae81612444565b82525050565b60006126c083836126a5565b60208301905092915050565b6000602082019050919050565b60006126e482612679565b6126ee8185612684565b93506126f983612695565b8060005b8381101561272a57815161271188826126b4565b975061271c836126cc565b9250506001810190506126fd565b5085935050505092915050565b6000602082019050818103600083015261275181846126d9565b905092915050565b612762816124be565b811461276d57600080fd5b50565b60008135905061277f81612759565b92915050565b60008060006060848603121561279e5761279d6122ca565b5b60006127ac868287016122f0565b93505060206127bd868287016122f0565b92505060406127ce86828701612770565b9150509250925092565b6127e1816123ee565b81146127ec57600080fd5b50565b6000813590506127fe816127d8565b92915050565b6000806040838503121561281b5761281a6122ca565b5b6000612829858286016122f0565b925050602061283a858286016127ef565b9150509250929050565b600060208201905061285960008301846125e0565b92915050565b600082825260208201905092915050565b7f436f6e7472616374206973206e6f7420696e2074686520636f7272656374207360008201527f746174652e000000000000000000000000000000000000000000000000000000602082015250565b60006128cc60258361285f565b91506128d782612870565b604082019050919050565b600060208201905081810360008301526128fb816128bf565b9050919050565b7f4f6e6c792074686520636c69656e742063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b600061295e60278361285f565b915061296982612902565b604082019050919050565b6000602082019050818103600083015261298d81612951565b9050919050565b7f54686520636f6e74726163742068617320616c7265616479206265656e20736960008201527f676e65642e000000000000000000000000000000000000000000000000000000602082015250565b60006129f060258361285f565b91506129fb82612994565b604082019050919050565b60006020820190508181036000830152612a1f816129e3565b9050919050565b6000604082019050612a3b60008301856123c4565b612a4860208301846123c4565b9392505050565b7f4f6e6c792074686520636c69656e74206f722074686520776f726b657220636160008201527f6e2063616c6c20746869732066756e6374696f6e2e0000000000000000000000602082015250565b6000612aab60358361285f565b9150612ab682612a4f565b604082019050919050565b60006020820190508181036000830152612ada81612a9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b1b826122cf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b4d57612b4c612ae1565b5b600182019050919050565b6000612b63826122cf565b915060008203612b7657612b75612ae1565b5b600182039050919050565b7f496e76616c696420616464726573732e00000000000000000000000000000000600082015250565b6000612bb760108361285f565b9150612bc282612b81565b602082019050919050565b60006020820190508181036000830152612be681612baa565b9050919050565b7f576f726b657220616c7265616479206578697374732e00000000000000000000600082015250565b6000612c2360168361285f565b9150612c2e82612bed565b602082019050919050565b60006020820190508181036000830152612c5281612c16565b9050919050565b7f436c69656e7420616c7265616479206578697374732e00000000000000000000600082015250565b6000612c8f60168361285f565b9150612c9a82612c59565b602082019050919050565b60006020820190508181036000830152612cbe81612c82565b9050919050565b7f4f6e6c792074686520776f726b65722063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b6000612d2160278361285f565b9150612d2c82612cc5565b604082019050919050565b60006020820190508181036000830152612d5081612d14565b9050919050565b7f4f6e6c792074686520776f726b65722063616e207369676e207468697320636f60008201527f6e74726163742e00000000000000000000000000000000000000000000000000602082015250565b6000612db360278361285f565b9150612dbe82612d57565b604082019050919050565b60006020820190508181036000830152612de281612da6565b9050919050565b6000604082019050612dfe6000830185612332565b612e0b60208301846124af565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c7920636c69656e742063616e20637265617465206120636f6e7472616360008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ecc60228361285f565b9150612ed782612e70565b604082019050919050565b60006020820190508181036000830152612efb81612ebf565b9050919050565b600061010082019050612f18600083018b612332565b612f25602083018a6124af565b612f3260408301896124af565b612f3f60608301886124c8565b612f4c6080830187612332565b612f5960a0830186612332565b612f6660c0830185612332565b612f7360e08301846123c4565b9998505050505050505050565b6000819050919050565b612f9b612f96826122cf565b612f80565b82525050565b60008160601b9050919050565b6000612fb982612fa1565b9050919050565b6000612fcb82612fae565b9050919050565b612fe3612fde82612444565b612fc0565b82525050565b6000612ff58285612f8a565b6020820191506130058284612fd2565b6014820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304f826122cf565b915061305a836122cf565b92508261306a57613069613015565b5b828206905092915050565b7f44697370757465206973206e6f7420696e2074686520636f727265637420737460008201527f6174652e00000000000000000000000000000000000000000000000000000000602082015250565b60006130d160248361285f565b91506130dc82613075565b604082019050919050565b60006020820190508181036000830152613100816130c4565b9050919050565b7f546865206469737075746520697320616c726561647920636c6f7365642e0000600082015250565b600061313d601e8361285f565b915061314882613107565b602082019050919050565b6000602082019050818103600083015261316c81613130565b9050919050565b7f546865206a757279206d656d6265722068617320616c726561647920766f746560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b60006131cf60228361285f565b91506131da82613173565b604082019050919050565b600060208201905081810360008301526131fe816131c2565b9050919050565b600060408201905061321a60008301856125e0565b61322760208301846125e0565b939250505056fea26469706673582212209eb2ea728eff6004b31a2006ea55969f23c286f07915a3a4e72cfd8788d1426a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2253,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "randomResult",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1264,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "workers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1268,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "clients",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1273,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Dispute)1260_storage)"
      },
      {
        "astId": 1278,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ContractPact)1240_storage)"
      },
      {
        "astId": 1282,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "juryPool",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1285,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contractCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1288,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputeCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1291,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "juryCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1312,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "contractStates",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_enum(ContractState)1303)dyn_storage"
      },
      {
        "astId": 1316,
        "contract": "contracts/FreelanceContract.sol:FreelanceContract",
        "label": "disputeStates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_enum(DisputeState)1308)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(ContractState)1303)dyn_storage": {
        "base": "t_enum(ContractState)1303",
        "encoding": "dynamic_array",
        "label": "enum FreelanceContract.ContractState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(DisputeState)1308)dyn_storage": {
        "base": "t_enum(DisputeState)1308",
        "encoding": "dynamic_array",
        "label": "enum FreelanceContract.DisputeState[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractState)1303": {
        "encoding": "inplace",
        "label": "enum FreelanceContract.ContractState",
        "numberOfBytes": "1"
      },
      "t_enum(DisputeState)1308": {
        "encoding": "inplace",
        "label": "enum FreelanceContract.DisputeState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ContractPact)1240_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FreelanceContract.ContractPact)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractPact)1240_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)1260_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FreelanceContract.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)1260_storage"
      },
      "t_struct(ContractPact)1240_storage": {
        "encoding": "inplace",
        "label": "struct FreelanceContract.ContractPact",
        "members": [
          {
            "astId": 1226,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1228,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "worker",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1230,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "hashJob",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1232,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1234,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "createAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1236,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1239,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ContractState)1303"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Dispute)1260_storage": {
        "encoding": "inplace",
        "label": "struct FreelanceContract.Dispute",
        "members": [
          {
            "astId": 1242,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1244,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1246,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeInitiator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1248,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1250,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "clientVoteCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1252,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "workerVoteCount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1256,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "disputeJury",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1259,
            "contract": "contracts/FreelanceContract.sol:FreelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(DisputeState)1308"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}