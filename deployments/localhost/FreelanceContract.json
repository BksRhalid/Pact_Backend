{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_protocolFee",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_juryFee",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "_juryLength",
          "type": "uint24"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "ContractCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        }
      ],
      "name": "ContractIsFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractReviewRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "ContractSigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum freelanceContract.ContractState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "ContractStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        }
      ],
      "name": "DisputeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum freelanceContract.DisputeState",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum freelanceContract.DisputeState",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "DisputeStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "juryAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addJury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByClient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "cancelContractByWorker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "clients",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contractStates",
      "outputs": [
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "contracts",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "createAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "enum freelanceContract.ContractState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_today",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "createContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputeStates",
      "outputs": [
        {
          "internalType": "enum freelanceContract.DisputeState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "totalVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "clientVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "workerVoteCount",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "disputeInitiator",
          "type": "address"
        },
        {
          "internalType": "enum freelanceContract.DisputeState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "getContractDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contractId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "client",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "hashJob",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getJuryMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClient",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isJury",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_juryAddress",
          "type": "address"
        }
      ],
      "name": "isJuryInDispute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isWorker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "juryLength",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "juryPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "openDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "pullPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "random",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "requestClientValidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "revealState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "selectJuryMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "setIsFinishedAndAllowPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contractId",
          "type": "uint256"
        }
      ],
      "name": "signContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4571c4b5a2a0fa99a02fe7767d565ee8f8e8a6b58c320b8339a07a8faaafb22c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4879978",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x47bd508bbeecb32bacd1cbde6c46eb889b78f664f88b2999d44184ee6c9f2e66",
    "transactionHash": "0x4571c4b5a2a0fa99a02fe7767d565ee8f8e8a6b58c320b8339a07a8faaafb22c",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4879978",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    5,
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "6b4076317923bc00f5e47fd32ae952cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_protocolFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_juryFee\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"_juryLength\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"ContractCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"}],\"name\":\"ContractIsFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractReviewRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"ContractSigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"ContractStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"}],\"name\":\"DisputeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum freelanceContract.DisputeState\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum freelanceContract.DisputeState\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"DisputeStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"juryAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"cancelContractByWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"clients\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contractStates\",\"outputs\":[{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum freelanceContract.ContractState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_today\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeStates\",\"outputs\":[{\"internalType\":\"enum freelanceContract.DisputeState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"totalVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"clientVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"workerVoteCount\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"disputeInitiator\",\"type\":\"address\"},{\"internalType\":\"enum freelanceContract.DisputeState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"getContractDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contractId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashJob\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getJuryMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isJury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_juryAddress\",\"type\":\"address\"}],\"name\":\"isJuryInDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWorker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"juryLength\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"juryPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"pullPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"random\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"requestClientValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"revealState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"selectJuryMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"setIsFinishedAndAllowPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"signContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/freelanceContract.sol\":\"freelanceContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/freelanceContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"./utils/randomNumber.sol\\\";\\n\\n// import \\\"./utils/admin.sol\\\";\\n\\ncontract freelanceContract is randomNumber {\\n    // State variables\\n\\n    struct ContractPact {\\n        address payable client; // client address\\n        address payable worker; // worker address\\n        bytes32 hashJob; // title + description of the work - should be a hash\\n        uint256 deadline; // timestamp\\n        uint256 createAt; // timestamp\\n        uint256 price; // price of the work in wei\\n        ContractState state; // state of the contract\\n        uint256 disputeId; // dispute id\\n    }\\n\\n    struct Dispute {\\n        uint256 disputeId; // dispute id\\n        uint256 contractId; // contract id\\n        uint24 totalVoteCount; // jury vote\\n        uint24 clientVoteCount; // client vote count private until reveal\\n        uint24 workerVoteCount; // worker vote count private until reveal\\n        address disputeInitiator; // dispute initiator\\n        juryMember[] juryMembers; // jury address => jury hasVoted\\n        DisputeState state;\\n    }\\n\\n    struct juryMember {\\n        uint24 juryId; // jury id\\n        bool hasVoted; // jury vote\\n        address payable juryAddress; // jury address\\n    }\\n\\n    // Mappings\\n\\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\\n\\n    uint256 public contractCounter = 0; // counter of contracts\\n    uint256 public disputeCounter = 0; // counter of disputes\\n    uint256 public juryCounter = 0; // counter of jury\\n\\n    enum ContractState {\\n        WaitingWorkerSign,\\n        WorkStarted,\\n        WaitingClientReview,\\n        WorkFinishedSuccessufully,\\n        DisputeOpened,\\n        WaitingforJuryVote,\\n        DisputeClosed,\\n        ClientLostInDispute,\\n        WorkerLostInDispute,\\n        CancelByFreelancer,\\n        CancelByClient,\\n        Archived\\n    }\\n    enum DisputeState {\\n        WaitingForJurySelection,\\n        WaitingJuryVote,\\n        DisputeClosed,\\n        ClientWon,\\n        WorkerWon\\n    }\\n    // reveal won or lost in dispute after jury vote completed (if jury vote is 50% or more)\\n\\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\\n    DisputeState[] public disputeStates; // array of contract states - could be used to display contract states in the frontend\\n\\n    uint24 public juryLength; // jury length\\n    // protocol fee\\n    uint8 public protocolFee; // 5% of the contract price\\n    uint8 public juryFee; // 5% of the contract price\\n    address payable protocolAddress; // protocol address\\n\\n    // import from admin constructor\\n\\n    constructor(\\n        uint8 _protocolFee,\\n        uint8 _juryFee,\\n        uint24 _juryLength\\n    ) {\\n        protocolAddress = payable(msg.sender);\\n        protocolFee = _protocolFee;\\n        juryFee = _juryFee;\\n        juryLength = _juryLength;\\n    }\\n\\n    // Events\\n\\n    // Event to display contract state change\\n    event ContractStateChange(\\n        ContractState previousStatus,\\n        ContractState newStatus\\n    );\\n    event DisputeStateChange(\\n        DisputeState previousStatus,\\n        DisputeState newStatus\\n    );\\n    // Event to display contract creation by client\\n    event ContractCreated(\\n        uint256 contractId,\\n        address client,\\n        address worker,\\n        bytes32 hashJob,\\n        uint256 createAt,\\n        uint256 deadline,\\n        uint256 price,\\n        ContractState state\\n    );\\n\\n    event DisputeCreated(\\n        uint256 disputeId,\\n        uint256 contractId,\\n        address disputeInitiator\\n    );\\n\\n    // Event to display contract signing by worker\\n    event ContractSigned(uint256 contractId, address worker);\\n\\n    // Event to display work is finish by worker\\n    event ContractReviewRequested(uint256 contractId, address worker);\\n\\n    // Event to display work is validated by client\\n    event ContractIsFinished(uint256 contractId);\\n\\n    event Voted(uint256 disputeId, address juryAddress);\\n\\n    // Modifiers\\n\\n    // Modifier to check if the contract is in the correct state\\n    modifier inState(uint256 _contractId, ContractState _state) {\\n        require(\\n            contracts[_contractId].state == _state,\\n            \\\"Contract is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    // Modifier to check if the dispute is in the correct state\\n    modifier inStateDispute(uint256 _disputeId, DisputeState _state) {\\n        require(\\n            disputes[_disputeId].state == _state,\\n            \\\"Dispute is not in the correct state.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].worker == msg.sender,\\n            \\\"Only the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClient(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender,\\n            \\\"Only the client can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyClientOrWorker(uint256 _contractId) {\\n        require(\\n            contracts[_contractId].client == msg.sender ||\\n                contracts[_contractId].worker == msg.sender,\\n            \\\"Only the client or the worker can call this function.\\\"\\n        );\\n        _;\\n    }\\n\\n    // TODO : add modifier to check only jury of the dispute can call the function\\n    // if disputes[_disputeId].juryMembers[msg.sender] exists, then onlyJury\\n\\n    // Functions\\n\\n    // Function to add a worker to the workers mapping\\n\\n    function addWorker() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(workers[msg.sender] == false, \\\"Worker already exists.\\\");\\n        workers[msg.sender] = true;\\n    }\\n\\n    // Function to add a client to the clients mapping\\n\\n    function addClient() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(clients[msg.sender] == false, \\\"Client already exists.\\\");\\n        clients[msg.sender] = true;\\n    }\\n\\n    // Function to add a jury to the clients mapping\\n\\n    function addJury() external {\\n        require(msg.sender != address(0), \\\"Invalid address.\\\");\\n        require(isJury(msg.sender) == false, \\\"Jury already exists.\\\");\\n        // add a new jury of juryPool\\n        juryCounter++;\\n        juryPool[juryCounter] = msg.sender;\\n    }\\n\\n    function isClient() external view returns (bool) {\\n        if (clients[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isWorker() external view returns (bool) {\\n        if (workers[msg.sender] == true) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function isJury(address _address) public view returns (bool) {\\n        for (uint256 i = 0; i < juryCounter; i++) {\\n            if (juryPool[i] == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // Function to create a new contract send by client\\n    function createContract(\\n        uint256 _deadline,\\n        uint256 _today,\\n        bytes32 _hash\\n    ) public payable {\\n        require(\\n            clients[msg.sender] == true,\\n            \\\"Only client can create a contract.\\\"\\n        );\\n        require(msg.value > 0, \\\"The price must be greater than 0.\\\");\\n        contractCounter++;\\n        contracts[contractCounter] = ContractPact({\\n            client: payable(msg.sender),\\n            worker: payable(address(0)),\\n            hashJob: _hash,\\n            createAt: _today,\\n            deadline: _deadline,\\n            price: msg.value,\\n            state: ContractState.WaitingWorkerSign,\\n            disputeId: 0\\n        });\\n\\n        emit ContractCreated(\\n            contractCounter,\\n            msg.sender,\\n            address(0),\\n            _hash,\\n            _today,\\n            _deadline,\\n            msg.value,\\n            ContractState.WaitingWorkerSign\\n        );\\n    }\\n\\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\\n\\n    function cancelContractByClient(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n        thisContract.state = ContractState.CancelByClient;\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.CancelByClient\\n        );\\n    }\\n\\n    // Function for the worker to cancel the contract\\n\\n    function cancelContractByWorker(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.CancelByFreelancer;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.CancelByFreelancer\\n        );\\n    }\\n\\n    // Function for the worker to sign the contract\\n    function signContract(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingWorkerSign)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        require(\\n            thisContract.state == ContractState.WaitingWorkerSign,\\n            \\\"The contract has already been signed.\\\"\\n        );\\n\\n        thisContract.worker = payable(msg.sender);\\n        thisContract.state = ContractState.WorkStarted;\\n\\n        emit ContractSigned(_contractId, msg.sender);\\n        emit ContractStateChange(\\n            ContractState.WaitingWorkerSign,\\n            ContractState.WorkStarted\\n        );\\n    }\\n\\n    // Function to get the contract details\\n\\n    function getContractDetails(uint256 _contractId)\\n        external\\n        view\\n        returns (\\n            uint256 contractId,\\n            address client,\\n            address worker,\\n            bytes32 hashJob,\\n            uint256 deadline,\\n            uint256 price\\n        )\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        contractId = _contractId;\\n        client = thisContract.client;\\n        worker = thisContract.worker;\\n        hashJob = thisContract.hashJob;\\n        deadline = thisContract.deadline;\\n        price = thisContract.price;\\n    }\\n\\n    // Worker can request client validation\\n\\n    function requestClientValidation(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WaitingClientReview;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.WaitingClientReview\\n        );\\n    }\\n\\n    // Function for the client to validate the contract\\n\\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WaitingClientReview)\\n        onlyClient(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\\n        emit ContractIsFinished(_contractId);\\n    }\\n\\n    function openDispute(uint256 _contractId)\\n        external\\n        inState(_contractId, ContractState.WorkStarted)\\n        onlyClientOrWorker(_contractId)\\n    {\\n        require(\\n            juryCounter > juryLength,\\n            \\\"Not enough jury in juryPool to open a dispute.\\\"\\n        );\\n        ContractPact storage thisContract = contracts[_contractId];\\n        thisContract.state = ContractState.DisputeOpened;\\n        emit ContractStateChange(\\n            ContractState.WorkStarted,\\n            ContractState.DisputeOpened\\n        );\\n\\n        disputeCounter++;\\n        Dispute storage thisDispute = disputes[disputeCounter];\\n\\n        // create an array address(0) of jury member with juryLength\\n        // initialize the jury members struct array\\n        // struct juryMember\\n\\n        // juryMember memory jury;\\n\\n        // for (uint24 i = 0; i <= juryLength; i++) {\\n        //     jury = juryMember({\\n        //         juryId: i,\\n        //         juryAddress: payable(address(0)),\\n        //         hasVoted: false\\n        //     });\\n        //     thisDispute.juryMembers.push(jury);\\n        // }\\n\\n        thisDispute.contractId = _contractId;\\n        thisDispute.disputeInitiator = msg.sender;\\n        thisDispute.state = DisputeState.WaitingJuryVote;\\n        thisContract.disputeId = disputeCounter;\\n\\n        emit DisputeCreated(disputeCounter, _contractId, msg.sender);\\n    }\\n\\n    // only the initiator can launch the jury selection\\n    // only if not already selected\\n    function selectJuryMember(uint256 _contractId) external {\\n        // address[] memory selectedJurors = new address[](juryLength);\\n        address[3] memory selectedJurors;\\n\\n        ContractPact storage thisContract = contracts[_contractId];\\n        Dispute storage _thisDispute = disputes[thisContract.disputeId];\\n\\n        // select a jury member\\n        juryMember memory jury;\\n\\n        address jurySelected = msg.sender;\\n        for (uint24 i = 0; i < juryLength; i++) {\\n            uint24 _seed = i;\\n            // uint256 randomIndex = random(_seed);\\n            // randomIndex = randomIndex % juryCounter;\\n            jurySelected = generateRandomJury(_contractId, _seed);\\n            bool selected = false;\\n            for (uint24 count = 0; count < selectedJurors.length; count++) {\\n                if (jurySelected == selectedJurors[i]) {\\n                    selected = true;\\n                    break;\\n                }\\n                selected = false;\\n            }\\n            if (\\n                _thisDispute.juryMembers.length < juryLength &&\\n                selected == false\\n            ) {\\n                selectedJurors[i] = jurySelected;\\n                jury = juryMember({\\n                    juryId: i,\\n                    juryAddress: payable(jurySelected),\\n                    hasVoted: false\\n                });\\n                _thisDispute.juryMembers.push(jury);\\n            } else {\\n                i--;\\n                continue;\\n            }\\n        }\\n        thisContract.state = ContractState.WaitingforJuryVote;\\n        emit ContractStateChange(\\n            ContractState.DisputeOpened,\\n            ContractState.WaitingforJuryVote\\n        );\\n        _thisDispute.state = DisputeState.WaitingJuryVote;\\n        emit DisputeStateChange(\\n            DisputeState.WaitingJuryVote,\\n            DisputeState.WaitingJuryVote\\n        );\\n    }\\n\\n    function generateRandomJury(uint256 _contractId, uint256 _seed)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        address jurySelected = msg.sender;\\n        uint256 randomIndex;\\n        for (uint256 i = 0; i <= 3; i++) {\\n            uint256 randomSeed = uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        jurySelected,\\n                        block.timestamp,\\n                        block.number,\\n                        _seed,\\n                        i\\n                    )\\n                )\\n            );\\n            randomIndex = random(randomSeed) % juryCounter;\\n            jurySelected = juryPool[randomIndex];\\n            if (\\n                jurySelected != address(0) &&\\n                jurySelected != thisContract.client &&\\n                jurySelected != thisContract.worker\\n            ) {\\n                break;\\n            }\\n        }\\n        return jurySelected;\\n    }\\n\\n    // Function to get check if jury is in the Dispute\\n\\n    // function isNotAlreadySelected(\\n    //     address _jurySelected,\\n    //     address[3] storage _selectedJurors\\n    // ) internal pure returns (bool) {\\n    //     for (uint256 i = 0; i < _selectedJurors.length; i++) {\\n    //         if (_jurySelected == _selectedJurors[i]) {\\n    //             return true;\\n    //         }\\n    //     }\\n    //     return false;\\n    // }\\n\\n    function isJuryInDispute(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == _juryAddress) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function getJuryMembers(uint256 _disputeId)\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        address[] memory juryMembers = new address[](\\n            thisDispute.juryMembers.length\\n        );\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            juryMembers[i] = thisDispute.juryMembers[i].juryAddress;\\n        }\\n        return juryMembers;\\n    }\\n\\n    function hasVoted(uint256 _disputeId, address _juryAddress)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        bool result = false;\\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\\n            if (\\n                thisDispute.juryMembers[i].juryAddress == _juryAddress &&\\n                thisDispute.juryMembers[i].hasVoted == true\\n            ) {\\n                result = true;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    // Function for the jury to vote for the dispute between the client and the worker\\n\\n    function vote(uint256 _disputeId, bool _vote)\\n        external\\n        inStateDispute(_disputeId, DisputeState.WaitingJuryVote)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        uint256 _contractId = thisDispute.contractId;\\n        ContractPact storage thisContract = contracts[_contractId];\\n\\n        // get the jury member id in the disput\\n        uint256 juryId = 0;\\n        uint256 juryMemberLength = thisDispute.juryMembers.length;\\n        for (uint256 i = 0; i < juryMemberLength; i++) {\\n            if (thisDispute.juryMembers[i].juryAddress == msg.sender) {\\n                juryId = i;\\n            }\\n        }\\n\\n        require(\\n            thisDispute.state == DisputeState.WaitingJuryVote,\\n            \\\"The dispute is already closed.\\\"\\n        );\\n        //\\\"The jury member has already voted.\\\"\\n        require(\\n            thisDispute.juryMembers[juryId].hasVoted == false,\\n            \\\"The jury member has already voted.\\\"\\n        );\\n\\n        thisDispute.juryMembers[juryId].hasVoted = true;\\n        thisDispute.totalVoteCount++;\\n        if (_vote) {\\n            thisDispute.clientVoteCount++;\\n        } else {\\n            thisDispute.workerVoteCount++;\\n        }\\n        emit Voted(_disputeId, msg.sender);\\n\\n        // Check if all jury members have voted and return true if they have\\n        uint256 voteCount = 0;\\n        for (uint256 i = 0; i < juryMemberLength; i++) {\\n            if (thisDispute.juryMembers[i].hasVoted == true) {\\n                voteCount++;\\n            }\\n        }\\n\\n        // replate TotalVoteCount by voteCount due to issue with the jury members\\n        if (voteCount == juryMemberLength) {\\n            thisContract.state = ContractState.DisputeClosed;\\n            emit ContractStateChange(\\n                ContractState.WaitingforJuryVote,\\n                ContractState.DisputeClosed\\n            );\\n            thisDispute.state = DisputeState.DisputeClosed;\\n            emit DisputeStateChange(\\n                DisputeState.WaitingJuryVote,\\n                DisputeState.DisputeClosed\\n            );\\n        }\\n    }\\n\\n    // Function to reveal and count the vote of the jury\\n\\n    function revealState(uint256 _disputeId)\\n        external\\n        inStateDispute(_disputeId, DisputeState.DisputeClosed)\\n    {\\n        Dispute storage thisDispute = disputes[_disputeId];\\n        uint256 _contractId = thisDispute.contractId;\\n        ContractPact storage thisContract = contracts[_contractId];\\n\\n        if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\\n            thisContract.state = ContractState.WorkerLostInDispute;\\n            thisDispute.state = DisputeState.ClientWon;\\n            emit ContractIsFinished(_contractId);\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.WorkerLostInDispute\\n            );\\n            emit DisputeStateChange(\\n                DisputeState.DisputeClosed,\\n                DisputeState.ClientWon\\n            );\\n        } else {\\n            thisContract.state = ContractState.ClientLostInDispute;\\n            thisDispute.state = DisputeState.WorkerWon;\\n            emit ContractIsFinished(_contractId);\\n            emit ContractStateChange(\\n                ContractState.DisputeClosed,\\n                ContractState.ClientLostInDispute\\n            );\\n            emit DisputeStateChange(\\n                DisputeState.DisputeClosed,\\n                DisputeState.WorkerWon\\n            );\\n        }\\n    }\\n\\n    // Function for client or worker to pull payment and split if juryDispute with jury Members and protocol share and the worker if he won the dispute\\n    //should call payment function with constructor(address[] memory payees, uint256[] memory shares)\\n\\n    function pullPayment(uint256 _contractId)\\n        external\\n        onlyClientOrWorker(_contractId)\\n    {\\n        ContractPact storage thisContract = contracts[_contractId];\\n        // amount in wei\\n        uint256 amount = thisContract.price;\\n        uint256 _disputeId = thisContract.disputeId;\\n\\n        // if there is no dispute\\n        // if the job have been canceled by the client or freelance\\n        if (\\n            thisContract.state == ContractState.CancelByFreelancer ||\\n            thisContract.state == ContractState.CancelByClient\\n        ) {\\n            address payable clientAddress = thisContract.client;\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            (bool success, ) = clientAddress.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\");\\n        }\\n        // if the job is finished successfully\\n        else if (\\n            thisContract.state == ContractState.WorkFinishedSuccessufully\\n        ) {\\n            address WinnerAddress = thisContract.worker;\\n            uint256 WinnerShare = amount * (1 - (protocolFee / 100));\\n            // protocol address and share\\n            address[] memory payees = new address[](2);\\n            payees[0] = WinnerAddress;\\n            payees[1] = protocolAddress;\\n            uint256[] memory shares = new uint256[](2);\\n            shares[0] = WinnerShare;\\n            shares[1] = amount * (protocolFee / 100);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n            // create a new payment\\n            // PaymentSplitter payment = new PaymentSplitter(payees, shares);\\n            // transfer the amount to the payment contract\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        }\\n        //if dispute existe and the client or worker lost the dispute\\n        // As dispute finished split payment between jurors, protocol and who wants\\n        else if (thisContract.state == ContractState.ClientLostInDispute) {\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n\\n            address WinnerAddress = thisContract.worker;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = ProtocolShare;\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = amount * (juryFee / juryMemberLength / 100);\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else if (thisContract.state == ContractState.WorkerLostInDispute) {\\n            // jury members address and share\\n            Dispute storage thisDispute = disputes[_disputeId];\\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\\n            address[] memory payees = new address[](juryMemberLength + 2);\\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\\n\\n            // Update state and price\\n            thisContract.state = ContractState.Archived;\\n            thisContract.price = 0;\\n\\n            // get jury members address and share\\n            address WinnerAddress = thisContract.client;\\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\\n            uint256 ProtocolShare = amount * (protocolFee / 100);\\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\\n\\n            payees[0] = WinnerAddress;\\n            shares[0] = WinnerShare;\\n            payees[1] = protocolAddress;\\n            shares[1] = amount * (protocolFee / 100);\\n            for (uint256 i = 0; i < juryMemberLength; i++) {\\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\\n                shares[i + 2] = (amount * (juryFee / juryMemberLength)) / 100;\\n            }\\n            // create a payment\\n            for (uint256 i = 0; i < payees.length; i++) {\\n                (bool success, ) = payees[i].call{value: shares[i]}(\\\"\\\");\\n                require(success, \\\"Transfer failed.\\\");\\n            }\\n        } else {\\n            revert(\\\"No allowed to pull payment\\\");\\n        }\\n        // transfer the payment to the contract\\n        //payment.transfer(amount); // <--- this is the line that fails\\n        // delete the contract\\n        // delete contracts[_contractId];\\n\\n        // emit PaymentReleased(_contractId, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe9d512ecb91ffd73671a58f5728d1a8ceb17b345b32470641afb83753dbfd80f\",\"license\":\"MIT\"},\"contracts/utils/randomNumber.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nabstract contract randomNumber {\\n    // function random() public view returns (uint256) {\\n    //     return block.prevrandao;\\n    // }\\n\\n    function random(uint256 _seed) public view returns (uint256) {\\n        uint256 result = uint256(\\n            keccak256(\\n                abi.encodePacked(block.timestamp, block.prevrandao, _seed)\\n            )\\n        );\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc88c7a274790d2e7ee119b4fc650e03428c4bda7413bd28021fc28481af3a768\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c806374b4f03a11610118578063b0e21e8a116100a0578063c8ac5e5f1161006f578063c8ac5e5f146107a2578063c9d27afe146107cb578063e421fbca146107f4578063ef2c02a81461081f578063fee6fb261461084a57610204565b8063b0e21e8a146106d4578063b406df6d146106ff578063b863bd371461073c578063b9b268fe1461077957610204565b80639537e8d1116100e75780639537e8d1146105fe5780639858359014610627578063a3626ece14610664578063a7e7ec2014610680578063b01f0617146106ab57610204565b806374b4f03a1461055657806374b739971461056d5780637d36f4d3146105aa5780638008e8bc146105d557610204565b8063438596321161019b578063533aa4741161016a578063533aa47414610459578063564a565d146104705780635823440f146104b357806361eed2a9146104dc5780636b655e451461051957610204565b8063438596321461036b578063474da79a146103a85780634b4d3489146103ec5780634d6d6a9c1461041757610204565b806327d00fb0116101d757806327d00fb0146102c35780632a2520a7146102ec5780632b254c77146103175780634048a2571461032e57610204565b806305f744c114610209578063067bd3b4146102325780631c798b6a1461025d5780631d4c6e6d14610286575b600080fd5b34801561021557600080fd5b50610230600480360381019061022b919061428b565b610887565b005b34801561023e57600080fd5b50610247610ab6565b60405161025491906142c7565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f919061428b565b610abc565b005b34801561029257600080fd5b506102ad60048036038101906102a8919061428b565b610e41565b6040516102ba9190614359565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e5919061428b565b610e75565b005b3480156102f857600080fd5b506103016111e5565b60405161030e919061438f565b60405180910390f35b34801561032357600080fd5b5061032c61124f565b005b34801561033a57600080fd5b5061035560048036038101906103509190614408565b6113a9565b604051610362919061438f565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190614435565b6113c9565b60405161039f919061438f565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca919061428b565b6114cf565b6040516103e39897969594939291906144af565b60405180910390f35b3480156103f857600080fd5b50610401611564565b60405161040e919061454b565b60405180910390f35b34801561042357600080fd5b5061043e6004803603810190610439919061428b565b611579565b60405161045096959493929190614575565b60405180910390f35b34801561046557600080fd5b5061046e611609565b005b34801561047c57600080fd5b506104976004803603810190610492919061428b565b611764565b6040516104aa979695949392919061461e565b60405180910390f35b3480156104bf57600080fd5b506104da60048036038101906104d5919061428b565b611800565b005b3480156104e857600080fd5b5061050360048036038101906104fe9190614408565b6119b7565b604051610510919061438f565b60405180910390f35b34801561052557600080fd5b50610540600480360381019061053b919061428b565b6119d7565b60405161054d919061474b565b60405180910390f35b34801561056257600080fd5b5061056b611b05565b005b34801561057957600080fd5b50610594600480360381019061058f9190614408565b611c31565b6040516105a1919061438f565b60405180910390f35b3480156105b657600080fd5b506105bf611cd1565b6040516105cc91906142c7565b60405180910390f35b3480156105e157600080fd5b506105fc60048036038101906105f7919061428b565b611cd7565b005b34801561060a57600080fd5b506106256004803603810190610620919061428b565b611fee565b005b34801561063357600080fd5b5061064e6004803603810190610649919061428b565b6121f3565b60405161065b919061476d565b60405180910390f35b61067e600480360381019061067991906147b4565b612226565b005b34801561068c57600080fd5b506106956124e5565b6040516106a29190614823565b60405180910390f35b3480156106b757600080fd5b506106d260048036038101906106cd919061428b565b6124f8565b005b3480156106e057600080fd5b506106e96126ab565b6040516106f69190614823565b60405180910390f35b34801561070b57600080fd5b5061072660048036038101906107219190614435565b6126be565b604051610733919061438f565b60405180910390f35b34801561074857600080fd5b50610763600480360381019061075e919061428b565b612789565b60405161077091906142c7565b60405180910390f35b34801561078557600080fd5b506107a0600480360381019061079b919061428b565b6127c5565b005b3480156107ae57600080fd5b506107c960048036038101906107c4919061428b565b6138e6565b005b3480156107d757600080fd5b506107f260048036038101906107ed919061486a565b613a9d565b005b34801561080057600080fd5b50610809613f85565b60405161081691906142c7565b60405180910390f35b34801561082b57600080fd5b50610834613f8b565b604051610841919061438f565b60405180910390f35b34801561085657600080fd5b50610871600480360381019061086c919061428b565b613ff6565b60405161087e91906148aa565b60405180910390f35b80600080600b81111561089d5761089c6142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b8111156108d3576108d26142e2565b5b14610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90614948565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af906149da565b60405180910390fd5b60006003600086815260200190815260200160002090506000600b8111156109e3576109e26142e2565b5b8160060160009054906101000a900460ff16600b811115610a0757610a066142e2565b5b14610a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3e90614a6c565b60405180910390fd5b600a8160060160006101000a81548160ff0219169083600b811115610a6f57610a6e6142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df5666000600a604051610aa7929190614a8c565b60405180910390a15050505050565b60055481565b610ac46141f0565b6000600360008481526020019081526020016000209050600060026000836007015481526020019081526020016000209050610afe614212565b600033905060005b600a60009054906101000a900462ffffff1662ffffff168162ffffff161015610d69576000819050610b3d888262ffffff1661402a565b92506000805b60038162ffffff161015610bc057888462ffffff1660038110610b6957610b68614ab5565b5b602002015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610ba95760019150610bc0565b600091508080610bb890614b13565b915050610b43565b50600a60009054906101000a900462ffffff1662ffffff168660030180549050108015610bf1575060001515811515145b15610d3e5783888462ffffff1660038110610c0f57610c0e614ab5565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060405180606001604052808462ffffff1681526020016000151581526020018573ffffffffffffffffffffffffffffffffffffffff16815250945085600301859080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548162ffffff021916908362ffffff16021790555060208201518160000160036101000a81548160ff02191690831515021790555060408201518160000160046101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610d53565b8280610d4990614b3e565b9350505050610d56565b50505b8080610d6190614b13565b915050610b06565b5060058460060160006101000a81548160ff0219169083600b811115610d9257610d916142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660046005604051610dca929190614a8c565b60405180910390a160018360040160006101000a81548160ff02191690836004811115610dfa57610df96142e2565b5b02179055507fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d600180604051610e31929190614b67565b60405180910390a1505050505050565b60088181548110610e5157600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b80600180600b811115610e8b57610e8a6142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b811115610ec157610ec06142e2565b5b14610f01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef890614948565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610fd357503373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990614c02565b60405180910390fd5b600a60009054906101000a900462ffffff1662ffffff166007541161106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106390614c94565b60405180910390fd5b600060036000868152602001908152602001600020905060048160060160006101000a81548160ff0219169083600b8111156110ab576110aa6142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600160046040516110e3929190614a8c565b60405180910390a1600660008154809291906110fe90614cb4565b919050555060006002600060065481526020019081526020016000209050858160010181905550338160020160096101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160040160006101000a81548160ff021916908360048111156111905761118f6142e2565b5b021790555060065482600701819055507f89b79bdd21d92f99bbf75358698d6a2b7a0a48fe9467a9ff8e5bac1ac638a3fc60065487336040516111d593929190614cfc565b60405180910390a1505050505050565b6000600115156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503611247576001905061124c565b600090505b90565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036112be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b590614d7f565b60405180910390fd5b600015156000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134790614deb565b60405180910390fd5b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60006020528060005260406000206000915054906101000a900460ff1681565b6000806002600085815260200190815260200160002090506000805b82600301805490508110156114c3578473ffffffffffffffffffffffffffffffffffffffff1683600301828154811061142157611420614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156114a657506001151583600301828154811061148757611486614ab5565b5b9060005260206000200160000160039054906101000a900460ff161515145b156114b057600191505b80806114bb90614cb4565b9150506113e5565b50809250505092915050565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060160009054906101000a900460ff16908060070154905088565b600a60009054906101000a900462ffffff1681565b60008060008060008060006003600089815260200190815260200160002090508796508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1695508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508060020154935080600301549250806005015491505091939550919395565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611678576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166f90614d7f565b60405180910390fd5b60001515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461170b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170290614e57565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550565b60026020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900462ffffff16908060020160039054906101000a900462ffffff16908060020160069054906101000a900462ffffff16908060020160099054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160009054906101000a900460ff16905087565b80600180600b811115611816576118156142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b81111561184c5761184b6142e2565b5b1461188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188390614948565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611931576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192890614ee9565b60405180910390fd5b600060036000868152602001908152602001600020905060098160060160006101000a81548160ff0219169083600b8111156119705761196f6142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600160096040516119a8929190614a8c565b60405180910390a15050505050565b60016020528060005260406000206000915054906101000a900460ff1681565b606060006002600084815260200190815260200160002090506000816003018054905067ffffffffffffffff811115611a1357611a12614f09565b5b604051908082528060200260200182016040528015611a415781602001602082028036833780820191505090505b50905060005b8260030180549050811015611afa57826003018181548110611a6c57611a6b614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611aad57611aac614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611af290614cb4565b915050611a47565b508092505050919050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6b90614d7f565b60405180910390fd5b60001515611b8133611c31565b151514611bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bba90614f84565b60405180910390fd5b60076000815480929190611bd690614cb4565b91905055503360046000600754815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080600090505b600754811015611cc6578273ffffffffffffffffffffffffffffffffffffffff166004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611cb3576001915050611ccc565b8080611cbe90614cb4565b915050611c39565b50600090505b919050565b60065481565b806002806004811115611ced57611cec6142e2565b5b6002600084815260200190815260200160002060040160009054906101000a900460ff166004811115611d2357611d226142e2565b5b14611d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5a90615016565b60405180910390fd5b600060026000858152602001908152602001600020905060008160010154905060006003600083815260200190815260200160002090508260020160069054906101000a900462ffffff1662ffffff168360020160039054906101000a900462ffffff1662ffffff161115611ede5760088160060160006101000a81548160ff0219169083600b811115611dfa57611df96142e2565b5b021790555060038360040160006101000a81548160ff02191690836004811115611e2757611e266142e2565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f82604051611e5b91906142c7565b60405180910390a17fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660066008604051611e96929190614a8c565b60405180910390a17fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d60026003604051611ed1929190614b67565b60405180910390a1611fe6565b60078160060160006101000a81548160ff0219169083600b811115611f0657611f056142e2565b5b021790555060048360040160006101000a81548160ff02191690836004811115611f3357611f326142e2565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f82604051611f6791906142c7565b60405180910390a17fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660066007604051611fa2929190614a8c565b60405180910390a17fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d60026004604051611fdd929190614b67565b60405180910390a15b505050505050565b80600080600b811115612004576120036142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b81111561203a576120396142e2565b5b1461207a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207190614948565b60405180910390fd5b60006003600085815260200190815260200160002090506000600b8111156120a5576120a46142e2565b5b8160060160009054906101000a900460ff16600b8111156120c9576120c86142e2565b5b14612109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210090614a6c565b60405180910390fd5b338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160060160006101000a81548160ff0219169083600b811115612174576121736142e2565b5b02179055507fcd3b1fcca80f9caae633c3e13546995d3810e561957af92839f070c46571942c84336040516121aa929190615036565b60405180910390a17fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df566600060016040516121e5929190614a8c565b60405180910390a150505050565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146122b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b0906150d1565b60405180910390fd5b600034116122fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f390615163565b60405180910390fd5b6005600081548092919061230f90614cb4565b91905055506040518061010001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018481526020018381526020013481526020016000600b811115612385576123846142e2565b5b8152602001600081525060036000600554815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff0219169083600b811115612485576124846142e2565b5b021790555060e082015181600701559050507f76b20af24153d07c8afbb5a938132460fcbbc7790e42c9cb1946ddd77cb3dc126005543360008486883460006040516124d8989796959493929190615183565b60405180910390a1505050565b600a60049054906101000a900460ff1681565b80600280600b81111561250e5761250d6142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b811115612544576125436142e2565b5b14612584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257b90614948565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612629576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612620906149da565b60405180910390fd5b600060036000868152602001908152602001600020905060038160060160006101000a81548160ff0219169083600b811115612668576126676142e2565b5b02179055507f3dd96a11406d183e06e4d2e202d402fb58f4bd545234c42c2cc1fcf83ac4cd6f8560405161269c91906142c7565b60405180910390a15050505050565b600a60039054906101000a900460ff1681565b60008060026000858152602001908152602001600020905060005b816003018054905081101561277c578373ffffffffffffffffffffffffffffffffffffffff1682600301828154811061271557612714614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361276957600192505050612783565b808061277490614cb4565b9150506126d9565b5060009150505b92915050565b6000804244846040516020016127a193929190615222565b6040516020818303038152906040528051906020012060001c905080915050919050565b803373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061289757503373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6128d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cd90614c02565b60405180910390fd5b60006003600084815260200190815260200160002090506000816005015490506000826007015490506009600b811115612913576129126142e2565b5b8360060160009054906101000a900460ff16600b811115612937576129366142e2565b5b14806129785750600a600b811115612952576129516142e2565b5b8360060160009054906101000a900460ff16600b811115612976576129756142e2565b5b145b15612a905760008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600b8460060160006101000a81548160ff0219169083600b8111156129ce576129cd6142e2565b5b02179055506000846005018190555060008173ffffffffffffffffffffffffffffffffffffffff1684604051612a0390615290565b60006040518083038185875af1925050503d8060008114612a40576040519150601f19603f3d011682016040523d82523d6000602084013e612a45565b606091505b5050905080612a89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a80906152f1565b60405180910390fd5b50506138df565b6003600b811115612aa457612aa36142e2565b5b8360060160009054906101000a900460ff16600b811115612ac857612ac76142e2565b5b03612e385760008360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006064600a60039054906101000a900460ff16612b149190615340565b6001612b209190615371565b60ff1684612b2e91906153a6565b90506000600267ffffffffffffffff811115612b4d57612b4c614f09565b5b604051908082528060200260200182016040528015612b7b5781602001602082028036833780820191505090505b5090508281600081518110612b9357612b92614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110612c0457612c03614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600267ffffffffffffffff811115612c5b57612c5a614f09565b5b604051908082528060200260200182016040528015612c895781602001602082028036833780820191505090505b5090508281600081518110612ca157612ca0614ab5565b5b6020026020010181815250506064600a60039054906101000a900460ff16612cc99190615340565b60ff1686612cd791906153a6565b81600181518110612ceb57612cea614ab5565b5b602002602001018181525050600b8760060160006101000a81548160ff0219169083600b811115612d1f57612d1e6142e2565b5b02179055506000876005018190555060005b8251811015612e2e576000838281518110612d4f57612d4e614ab5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16838381518110612d8057612d7f614ab5565b5b6020026020010151604051612d9490615290565b60006040518083038185875af1925050503d8060008114612dd1576040519150601f19603f3d011682016040523d82523d6000602084013e612dd6565b606091505b5050905080612e1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e11906152f1565b60405180910390fd5b508080612e2690614cb4565b915050612d31565b50505050506138de565b6007600b811115612e4c57612e4b6142e2565b5b8360060160009054906101000a900460ff16600b811115612e7057612e6f6142e2565b5b036133585760006002600083815260200190815260200160002090506000816003018054905090506000600282612ea791906153e8565b67ffffffffffffffff811115612ec057612ebf614f09565b5b604051908082528060200260200182016040528015612eee5781602001602082028036833780820191505090505b5090506000600283612f0091906153e8565b67ffffffffffffffff811115612f1957612f18614f09565b5b604051908082528060200260200182016040528015612f475781602001602082028036833780820191505090505b509050600b8760060160006101000a81548160ff0219169083600b811115612f7257612f716142e2565b5b02179055506000876005018190555060008760010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060648886600a60049054906101000a900460ff1660ff16612fcd919061541c565b612fd791906153a6565b612fe1919061541c565b905060006064600a60039054906101000a900460ff166130019190615340565b60ff168961300f91906153a6565b9050600081838b613020919061544d565b61302a919061544d565b9050838660008151811061304157613040614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080856000815181106130905761308f614ab5565b5b602002602001018181525050600a60059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866001815181106130d3576130d2614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818560018151811061312257613121614ab5565b5b60200260200101818152505060005b878110156132495788600301818154811061314f5761314e614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760028361318b91906153e8565b8151811061319c5761319b614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606488600a60049054906101000a900460ff1660ff166131f6919061541c565b613200919061541c565b8b61320b91906153a6565b8660028361321991906153e8565b8151811061322a57613229614ab5565b5b602002602001018181525050808061324190614cb4565b915050613131565b5060005b865181101561334a57600087828151811061326b5761326a614ab5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1687838151811061329c5761329b614ab5565b5b60200260200101516040516132b090615290565b60006040518083038185875af1925050503d80600081146132ed576040519150601f19603f3d011682016040523d82523d6000602084013e6132f2565b606091505b5050905080613336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161332d906152f1565b60405180910390fd5b50808061334290614cb4565b91505061324d565b5050505050505050506138dd565b6008600b81111561336c5761336b6142e2565b5b8360060160009054906101000a900460ff16600b8111156133905761338f6142e2565b5b036138a157600060026000838152602001908152602001600020905060008160030180549050905060006002826133c791906153e8565b67ffffffffffffffff8111156133e0576133df614f09565b5b60405190808252806020026020018201604052801561340e5781602001602082028036833780820191505090505b509050600060028361342091906153e8565b67ffffffffffffffff81111561343957613438614f09565b5b6040519080825280602002602001820160405280156134675781602001602082028036833780820191505090505b509050600b8760060160006101000a81548160ff0219169083600b811115613492576134916142e2565b5b02179055506000876005018190555060008760000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060648886600a60049054906101000a900460ff1660ff166134ed919061541c565b6134f791906153a6565b613501919061541c565b905060006064600a60039054906101000a900460ff166135219190615340565b60ff168961352f91906153a6565b9050600081838b613540919061544d565b61354a919061544d565b9050838660008151811061356157613560614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080856000815181106135b0576135af614ab5565b5b602002602001018181525050600a60059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866001815181106135f3576135f2614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506064600a60039054906101000a900460ff166136499190615340565b60ff168a61365791906153a6565b8560018151811061366b5761366a614ab5565b5b60200260200101818152505060005b878110156137925788600301818154811061369857613697614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff16876002836136d491906153e8565b815181106136e5576136e4614ab5565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606488600a60049054906101000a900460ff1660ff1661373f919061541c565b8c61374a91906153a6565b613754919061541c565b8660028361376291906153e8565b8151811061377357613772614ab5565b5b602002602001018181525050808061378a90614cb4565b91505061367a565b5060005b86518110156138935760008782815181106137b4576137b3614ab5565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168783815181106137e5576137e4614ab5565b5b60200260200101516040516137f990615290565b60006040518083038185875af1925050503d8060008114613836576040519150601f19603f3d011682016040523d82523d6000602084013e61383b565b606091505b505090508061387f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613876906152f1565b60405180910390fd5b50808061388b90614cb4565b915050613796565b5050505050505050506138dc565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138d3906154cd565b60405180910390fd5b5b5b5b5050505050565b80600180600b8111156138fc576138fb6142e2565b5b6003600084815260200190815260200160002060060160009054906101000a900460ff16600b811115613932576139316142e2565b5b14613972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161396990614948565b60405180910390fd5b823373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614613a17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a0e90614ee9565b60405180910390fd5b600060036000868152602001908152602001600020905060028160060160006101000a81548160ff0219169083600b811115613a5657613a556142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660016002604051613a8e929190614a8c565b60405180910390a15050505050565b816001806004811115613ab357613ab26142e2565b5b6002600084815260200190815260200160002060040160009054906101000a900460ff166004811115613ae957613ae86142e2565b5b14613b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b2090615016565b60405180910390fd5b600060026000868152602001908152602001600020905060008160010154905060006003600083815260200190815260200160002090506000808460030180549050905060005b81811015613c05573373ffffffffffffffffffffffffffffffffffffffff16866003018281548110613ba557613ba4614ab5565b5b9060005260206000200160000160049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603613bf2578092505b8080613bfd90614cb4565b915050613b70565b5060016004811115613c1a57613c196142e2565b5b8560040160009054906101000a900460ff166004811115613c3e57613c3d6142e2565b5b14613c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c7590615539565b60405180910390fd5b60001515856003018381548110613c9857613c97614ab5565b5b9060005260206000200160000160039054906101000a900460ff16151514613cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cec906155cb565b60405180910390fd5b6001856003018381548110613d0d57613d0c614ab5565b5b9060005260206000200160000160036101000a81548160ff02191690831515021790555084600201600081819054906101000a900462ffffff1680929190613d5490614b13565b91906101000a81548162ffffff021916908362ffffff160217905550508715613dbc5784600201600381819054906101000a900462ffffff1680929190613d9a90614b13565b91906101000a81548162ffffff021916908362ffffff16021790555050613dfd565b84600201600681819054906101000a900462ffffff1680929190613ddf90614b13565b91906101000a81548162ffffff021916908362ffffff160217905550505b7f030b0f8dcd86a031eddb071f91882edeac8173663ba775713b677b42b51be44b8933604051613e2e929190615036565b60405180910390a16000805b82811015613ea05760011515876003018281548110613e5c57613e5b614ab5565b5b9060005260206000200160000160039054906101000a900460ff16151503613e8d578180613e8990614cb4565b9250505b8080613e9890614cb4565b915050613e3a565b50818103613f795760068460060160006101000a81548160ff0219169083600b811115613ed057613ecf6142e2565b5b02179055507fca0909b6a575d31f318fe4f6dcc11334c453853c378dcd7fcb70a9ed8a9df56660056006604051613f08929190614a8c565b60405180910390a160028660040160006101000a81548160ff02191690836004811115613f3857613f376142e2565b5b02179055507fe7fa67f28f4ce1c8de77ca1fb7001091dd68726c125cf31cce5afe21ebfeed1d60016002604051613f70929190614b67565b60405180910390a15b50505050505050505050565b60075481565b600060011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151503613fee5760019050613ff3565b600090505b90565b6009818154811061400657600080fd5b9060005260206000209060209182820401919006915054906101000a900460ff1681565b6000806003600085815260200190815260200160002090506000339050600080600090505b600381116141e35760008342438985604051602001614072959493929190615633565b6040516020818303038152906040528051906020012060001c905060075461409982612789565b6140a39190615692565b92506004600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415801561416857508460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b80156141c457508460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156141cf57506141e3565b5080806141db90614cb4565b91505061404f565b5081935050505092915050565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060600160405280600062ffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600080fd5b6000819050919050565b61426881614255565b811461427357600080fd5b50565b6000813590506142858161425f565b92915050565b6000602082840312156142a1576142a0614250565b5b60006142af84828501614276565b91505092915050565b6142c181614255565b82525050565b60006020820190506142dc60008301846142b8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600c8110614322576143216142e2565b5b50565b600081905061433382614311565b919050565b600061434382614325565b9050919050565b61435381614338565b82525050565b600060208201905061436e600083018461434a565b92915050565b60008115159050919050565b61438981614374565b82525050565b60006020820190506143a46000830184614380565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006143d5826143aa565b9050919050565b6143e5816143ca565b81146143f057600080fd5b50565b600081359050614402816143dc565b92915050565b60006020828403121561441e5761441d614250565b5b600061442c848285016143f3565b91505092915050565b6000806040838503121561444c5761444b614250565b5b600061445a85828601614276565b925050602061446b858286016143f3565b9150509250929050565b6000614480826143aa565b9050919050565b61449081614475565b82525050565b6000819050919050565b6144a981614496565b82525050565b6000610100820190506144c5600083018b614487565b6144d2602083018a614487565b6144df60408301896144a0565b6144ec60608301886142b8565b6144f960808301876142b8565b61450660a08301866142b8565b61451360c083018561434a565b61452060e08301846142b8565b9998505050505050505050565b600062ffffff82169050919050565b6145458161452d565b82525050565b6000602082019050614560600083018461453c565b92915050565b61456f816143ca565b82525050565b600060c08201905061458a60008301896142b8565b6145976020830188614566565b6145a46040830187614566565b6145b160608301866144a0565b6145be60808301856142b8565b6145cb60a08301846142b8565b979650505050505050565b600581106145e7576145e66142e2565b5b50565b60008190506145f8826145d6565b919050565b6000614608826145ea565b9050919050565b614618816145fd565b82525050565b600060e082019050614633600083018a6142b8565b61464060208301896142b8565b61464d604083018861453c565b61465a606083018761453c565b614667608083018661453c565b61467460a0830185614566565b61468160c083018461460f565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6146c2816143ca565b82525050565b60006146d483836146b9565b60208301905092915050565b6000602082019050919050565b60006146f88261468d565b6147028185614698565b935061470d836146a9565b8060005b8381101561473e57815161472588826146c8565b9750614730836146e0565b925050600181019050614711565b5085935050505092915050565b6000602082019050818103600083015261476581846146ed565b905092915050565b60006020820190506147826000830184614566565b92915050565b61479181614496565b811461479c57600080fd5b50565b6000813590506147ae81614788565b92915050565b6000806000606084860312156147cd576147cc614250565b5b60006147db86828701614276565b93505060206147ec86828701614276565b92505060406147fd8682870161479f565b9150509250925092565b600060ff82169050919050565b61481d81614807565b82525050565b60006020820190506148386000830184614814565b92915050565b61484781614374565b811461485257600080fd5b50565b6000813590506148648161483e565b92915050565b6000806040838503121561488157614880614250565b5b600061488f85828601614276565b92505060206148a085828601614855565b9150509250929050565b60006020820190506148bf600083018461460f565b92915050565b600082825260208201905092915050565b7f436f6e7472616374206973206e6f7420696e2074686520636f7272656374207360008201527f746174652e000000000000000000000000000000000000000000000000000000602082015250565b60006149326025836148c5565b915061493d826148d6565b604082019050919050565b6000602082019050818103600083015261496181614925565b9050919050565b7f4f6e6c792074686520636c69656e742063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b60006149c46027836148c5565b91506149cf82614968565b604082019050919050565b600060208201905081810360008301526149f3816149b7565b9050919050565b7f54686520636f6e74726163742068617320616c7265616479206265656e20736960008201527f676e65642e000000000000000000000000000000000000000000000000000000602082015250565b6000614a566025836148c5565b9150614a61826149fa565b604082019050919050565b60006020820190508181036000830152614a8581614a49565b9050919050565b6000604082019050614aa1600083018561434a565b614aae602083018461434a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b1e8261452d565b915062ffffff8203614b3357614b32614ae4565b5b600182019050919050565b6000614b498261452d565b915060008203614b5c57614b5b614ae4565b5b600182039050919050565b6000604082019050614b7c600083018561460f565b614b89602083018461460f565b9392505050565b7f4f6e6c792074686520636c69656e74206f722074686520776f726b657220636160008201527f6e2063616c6c20746869732066756e6374696f6e2e0000000000000000000000602082015250565b6000614bec6035836148c5565b9150614bf782614b90565b604082019050919050565b60006020820190508181036000830152614c1b81614bdf565b9050919050565b7f4e6f7420656e6f756768206a75727920696e206a757279506f6f6c20746f206f60008201527f70656e206120646973707574652e000000000000000000000000000000000000602082015250565b6000614c7e602e836148c5565b9150614c8982614c22565b604082019050919050565b60006020820190508181036000830152614cad81614c71565b9050919050565b6000614cbf82614255565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614cf157614cf0614ae4565b5b600182019050919050565b6000606082019050614d1160008301866142b8565b614d1e60208301856142b8565b614d2b6040830184614566565b949350505050565b7f496e76616c696420616464726573732e00000000000000000000000000000000600082015250565b6000614d696010836148c5565b9150614d7482614d33565b602082019050919050565b60006020820190508181036000830152614d9881614d5c565b9050919050565b7f576f726b657220616c7265616479206578697374732e00000000000000000000600082015250565b6000614dd56016836148c5565b9150614de082614d9f565b602082019050919050565b60006020820190508181036000830152614e0481614dc8565b9050919050565b7f436c69656e7420616c7265616479206578697374732e00000000000000000000600082015250565b6000614e416016836148c5565b9150614e4c82614e0b565b602082019050919050565b60006020820190508181036000830152614e7081614e34565b9050919050565b7f4f6e6c792074686520776f726b65722063616e2063616c6c207468697320667560008201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000602082015250565b6000614ed36027836148c5565b9150614ede82614e77565b604082019050919050565b60006020820190508181036000830152614f0281614ec6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4a75727920616c7265616479206578697374732e000000000000000000000000600082015250565b6000614f6e6014836148c5565b9150614f7982614f38565b602082019050919050565b60006020820190508181036000830152614f9d81614f61565b9050919050565b7f44697370757465206973206e6f7420696e2074686520636f727265637420737460008201527f6174652e00000000000000000000000000000000000000000000000000000000602082015250565b60006150006024836148c5565b915061500b82614fa4565b604082019050919050565b6000602082019050818103600083015261502f81614ff3565b9050919050565b600060408201905061504b60008301856142b8565b6150586020830184614566565b9392505050565b7f4f6e6c7920636c69656e742063616e20637265617465206120636f6e7472616360008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b60006150bb6022836148c5565b91506150c68261505f565b604082019050919050565b600060208201905081810360008301526150ea816150ae565b9050919050565b7f546865207072696365206d7573742062652067726561746572207468616e203060008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b600061514d6021836148c5565b9150615158826150f1565b604082019050919050565b6000602082019050818103600083015261517c81615140565b9050919050565b600061010082019050615199600083018b6142b8565b6151a6602083018a614566565b6151b36040830189614566565b6151c060608301886144a0565b6151cd60808301876142b8565b6151da60a08301866142b8565b6151e760c08301856142b8565b6151f460e083018461434a565b9998505050505050505050565b6000819050919050565b61521c61521782614255565b615201565b82525050565b600061522e828661520b565b60208201915061523e828561520b565b60208201915061524e828461520b565b602082019150819050949350505050565b600081905092915050565b50565b600061527a60008361525f565b91506152858261526a565b600082019050919050565b600061529b8261526d565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b60006152db6010836148c5565b91506152e6826152a5565b602082019050919050565b6000602082019050818103600083015261530a816152ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061534b82614807565b915061535683614807565b92508261536657615365615311565b5b828204905092915050565b600061537c82614807565b915061538783614807565b9250828203905060ff8111156153a05761539f614ae4565b5b92915050565b60006153b182614255565b91506153bc83614255565b92508282026153ca81614255565b915082820484148315176153e1576153e0614ae4565b5b5092915050565b60006153f382614255565b91506153fe83614255565b925082820190508082111561541657615415614ae4565b5b92915050565b600061542782614255565b915061543283614255565b92508261544257615441615311565b5b828204905092915050565b600061545882614255565b915061546383614255565b925082820390508181111561547b5761547a614ae4565b5b92915050565b7f4e6f20616c6c6f77656420746f2070756c6c207061796d656e74000000000000600082015250565b60006154b7601a836148c5565b91506154c282615481565b602082019050919050565b600060208201905081810360008301526154e6816154aa565b9050919050565b7f546865206469737075746520697320616c726561647920636c6f7365642e0000600082015250565b6000615523601e836148c5565b915061552e826154ed565b602082019050919050565b6000602082019050818103600083015261555281615516565b9050919050565b7f546865206a757279206d656d6265722068617320616c726561647920766f746560008201527f642e000000000000000000000000000000000000000000000000000000000000602082015250565b60006155b56022836148c5565b91506155c082615559565b604082019050919050565b600060208201905081810360008301526155e4816155a8565b9050919050565b60008160601b9050919050565b6000615603826155eb565b9050919050565b6000615615826155f8565b9050919050565b61562d615628826143ca565b61560a565b82525050565b600061563f828861561c565b60148201915061564f828761520b565b60208201915061565f828661520b565b60208201915061566f828561520b565b60208201915061567f828461520b565b6020820191508190509695505050505050565b600061569d82614255565b91506156a883614255565b9250826156b8576156b7615311565b5b82820690509291505056fea264697066735822122097d0fe5c36a7b73b7d6ac25b492150868070dfaf294a478210b213cfcaca7f9f64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "workers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 57,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "clients",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 62,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Dispute)42_storage)"
      },
      {
        "astId": 67,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(ContractPact)22_storage)"
      },
      {
        "astId": 71,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryPool",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 74,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 77,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputeCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 80,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 103,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "contractStates",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_enum(ContractState)93)dyn_storage"
      },
      {
        "astId": 107,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "disputeStates",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_enum(DisputeState)99)dyn_storage"
      },
      {
        "astId": 109,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryLength",
        "offset": 0,
        "slot": "10",
        "type": "t_uint24"
      },
      {
        "astId": 111,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolFee",
        "offset": 3,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 113,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "juryFee",
        "offset": 4,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 115,
        "contract": "contracts/freelanceContract.sol:freelanceContract",
        "label": "protocolAddress",
        "offset": 5,
        "slot": "10",
        "type": "t_address_payable"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(ContractState)93)dyn_storage": {
        "base": "t_enum(ContractState)93",
        "encoding": "dynamic_array",
        "label": "enum freelanceContract.ContractState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(DisputeState)99)dyn_storage": {
        "base": "t_enum(DisputeState)99",
        "encoding": "dynamic_array",
        "label": "enum freelanceContract.DisputeState[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(juryMember)49_storage)dyn_storage": {
        "base": "t_struct(juryMember)49_storage",
        "encoding": "dynamic_array",
        "label": "struct freelanceContract.juryMember[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ContractState)93": {
        "encoding": "inplace",
        "label": "enum freelanceContract.ContractState",
        "numberOfBytes": "1"
      },
      "t_enum(DisputeState)99": {
        "encoding": "inplace",
        "label": "enum freelanceContract.DisputeState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ContractPact)22_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.ContractPact)",
        "numberOfBytes": "32",
        "value": "t_struct(ContractPact)22_storage"
      },
      "t_mapping(t_uint256,t_struct(Dispute)42_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct freelanceContract.Dispute)",
        "numberOfBytes": "32",
        "value": "t_struct(Dispute)42_storage"
      },
      "t_struct(ContractPact)22_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.ContractPact",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "client",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 8,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "worker",
            "offset": 0,
            "slot": "1",
            "type": "t_address_payable"
          },
          {
            "astId": 10,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hashJob",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 12,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "createAt",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ContractState)93"
          },
          {
            "astId": 21,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Dispute)42_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.Dispute",
        "members": [
          {
            "astId": 24,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "contractId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 28,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "totalVoteCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 30,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "clientVoteCount",
            "offset": 3,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 32,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "workerVoteCount",
            "offset": 6,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 34,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "disputeInitiator",
            "offset": 9,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 38,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryMembers",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_struct(juryMember)49_storage)dyn_storage"
          },
          {
            "astId": 41,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "state",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(DisputeState)99"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(juryMember)49_storage": {
        "encoding": "inplace",
        "label": "struct freelanceContract.juryMember",
        "members": [
          {
            "astId": 44,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 46,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "hasVoted",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 48,
            "contract": "contracts/freelanceContract.sol:freelanceContract",
            "label": "juryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}