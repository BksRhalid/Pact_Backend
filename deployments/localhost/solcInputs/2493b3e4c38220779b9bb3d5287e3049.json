{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/freelanceContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"./utils/randomNumber.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract freelanceContract is randomNumber, Ownable {\n    // State variables\n\n    uint24 public juryLength; // jury length\n    // protocol fee\n    uint8 public protocolFee; // 5% of the contract price\n    uint8 public juryFee; // 5% of the contract price\n    address payable protocolAddress; // protocol address\n\n    // admin constructor\n    constructor(\n        uint8 _protocolFee,\n        uint8 _juryFee,\n        uint24 _juryLength\n    ) {\n        protocolFee = _protocolFee;\n        juryFee = _juryFee;\n        juryLength = _juryLength;\n        protocolAddress = payable(msg.sender);\n    }\n\n    struct ContractPact {\n        address payable client; // client address\n        address payable worker; // worker address\n        bytes32 hashJob; // title + description of the work - should be a hash\n        uint256 deadline; // timestamp\n        uint256 createAt; // timestamp\n        uint256 price; // price of the work in wei\n        uint256 disputeId; // dispute id\n        ContractState state; // state of the contract\n    }\n\n    struct Dispute {\n        uint256 disputeId; // dispute id\n        uint256 contractId; // contract id\n        uint24 totalVoteCount; // jury vote\n        uint24 clientVoteCount; // client vote count private until reveal\n        uint24 workerVoteCount; // worker vote count private until reveal\n        address disputeInitiator; // dispute initiator\n        juryMember[] juryMembers; // jury address => jury hasVoted\n    }\n\n    struct juryMember {\n        uint24 juryId; // jury id\n        bool hasVoted; // jury vote\n        address payable juryAddress; // jury address\n    }\n\n    // Mappings\n\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\n\n    uint256 public contractCounter = 0; // counter of contracts\n    uint256 public disputeCounter = 0; // counter of disputes\n    uint256 public juryCounter = 0; // counter of jury\n\n    enum ContractState {\n        WaitingWorkerSign,\n        WorkStarted,\n        WaitingClientReview,\n        WorkFinishedSuccessufully,\n        DisputeOpened,\n        WaitingforJuryVote,\n        DisputeClosed,\n        ClientLostInDispute,\n        WorkerLostInDispute,\n        CancelByFreelancer,\n        CancelByClient,\n        Archived\n    }\n    // reveal won or lost in dispute after jury vote completed (if jury vote is 50% or more)\n\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\n\n    // Events\n\n    // Event to display contract state change\n    event ContractStateChange(\n        ContractState previousStatus,\n        ContractState newStatus\n    );\n\n    event Voted(uint256 disputeId, address juryAddress);\n\n    // Modifiers\n\n    // Modifier to check if the contract is in the correct state\n    modifier inState(uint256 _contractId, ContractState _state) {\n        require(\n            contracts[_contractId].state == _state,\n            \"Contract is not in the correct state.\"\n        );\n        _;\n    }\n\n    modifier onlyWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].worker == msg.sender,\n            \"Only the worker can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClient(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender,\n            \"Only the client can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClientOrWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender ||\n                contracts[_contractId].worker == msg.sender,\n            \"Only the client or the worker can call this function.\"\n        );\n        _;\n    }\n\n    // Functions admin\n\n    function setProtocolFee(uint8 _protocolFee) public onlyOwner {\n        protocolFee = _protocolFee;\n    }\n\n    function setJuryFee(uint8 _juryFee) public onlyOwner {\n        juryFee = _juryFee;\n    }\n\n    function setJuryLength(uint8 _juryLength) public onlyOwner {\n        juryLength = _juryLength;\n    }\n\n    // Function to add a worker to the workers mapping\n\n    function addWorker() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(workers[msg.sender] == false, \"Worker already exists.\");\n        workers[msg.sender] = true;\n    }\n\n    // Function to add a client to the clients mapping\n\n    function addClient() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(clients[msg.sender] == false, \"Client already exists.\");\n        clients[msg.sender] = true;\n    }\n\n    // Function to add a jury to the clients mapping\n\n    function addJury() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(isJury(msg.sender) == false, \"Jury already exists.\");\n        // add a new jury of juryPool\n        juryCounter++;\n        juryPool[juryCounter] = msg.sender;\n    }\n\n    // Function to remove a client from the clients mapping\n    function removeClient() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(clients[msg.sender] == true, \"Client does not exist.\");\n        clients[msg.sender] = false;\n    }\n\n    // Function to remove a worker from the workers mapping\n    function removeWorker() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(workers[msg.sender] == true, \"Worker does not exist.\");\n        workers[msg.sender] = false;\n    }\n\n    // Function to remove a jury from the juryPool mapping\n    function removeJury() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(isJury(msg.sender) == true, \"Jury does not exist.\");\n        // remove a jury of juryPool\n        bool found = false;\n        for (uint256 i = 0; i < juryCounter && !found; i++) {\n            if (juryPool[i] == msg.sender) {\n                delete juryPool[i];\n                found = true;\n            }\n        }\n        juryCounter--;\n    }\n\n    function isClient() external view returns (bool) {\n        if (clients[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function isWorker() external view returns (bool) {\n        if (workers[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function isJury(address _address) public view returns (bool) {\n        for (uint256 i = 0; i < juryCounter; i++) {\n            if (juryPool[i] == _address) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // Function to create a new contract send by client\n    function createContract(\n        uint256 _deadline,\n        uint256 _today,\n        bytes32 _hash\n    ) public payable {\n        require(\n            clients[msg.sender] == true,\n            \"Only client can create a contract.\"\n        );\n        require(msg.value > 0, \"The price must be greater than 0.\");\n        contractCounter++;\n        contracts[contractCounter] = ContractPact({\n            client: payable(msg.sender),\n            worker: payable(address(0)),\n            hashJob: _hash,\n            createAt: _today,\n            deadline: _deadline,\n            price: msg.value,\n            state: ContractState.WaitingWorkerSign,\n            disputeId: 0\n        });\n    }\n\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\n\n    function cancelContractByClient(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n        thisContract.state = ContractState.CancelByClient;\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.CancelByClient\n        );\n    }\n\n    // Function for the worker to cancel the contract\n\n    function cancelContractByWorker(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.CancelByFreelancer;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.CancelByFreelancer\n        );\n    }\n\n    // Function for the worker to sign the contract\n    function signContract(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n\n        thisContract.worker = payable(msg.sender);\n        thisContract.state = ContractState.WorkStarted;\n\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.WorkStarted\n        );\n    }\n\n    // Function to get the contract details\n\n    function getContractDetails(uint256 _contractId)\n        external\n        view\n        returns (\n            uint256 contractId,\n            address client,\n            address worker,\n            bytes32 hashJob,\n            uint256 deadline,\n            uint256 price\n        )\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        contractId = _contractId;\n        client = thisContract.client;\n        worker = thisContract.worker;\n        hashJob = thisContract.hashJob;\n        deadline = thisContract.deadline;\n        price = thisContract.price;\n    }\n\n    // Worker can request client validation\n\n    function requestClientValidation(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.WaitingClientReview;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.WaitingClientReview\n        );\n    }\n\n    // Function for the client to validate the contract\n\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingClientReview)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\n    }\n\n    function openDispute(uint256 _contractId)\n        external\n        onlyClientOrWorker(_contractId)\n    {\n        require(\n            juryCounter > juryLength,\n            \"Not enough jury in juryPool to open a dispute.\"\n        );\n        require(\n            contracts[_contractId].state == ContractState.WorkStarted ||\n                contracts[_contractId].state ==\n                ContractState.WaitingClientReview,\n            \"The contract must be in work started or waiting client review state.\"\n        );\n\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.DisputeOpened;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.DisputeOpened\n        );\n\n        disputeCounter++;\n        Dispute storage thisDispute = disputes[disputeCounter];\n        thisDispute.contractId = _contractId;\n        thisDispute.disputeInitiator = msg.sender;\n        thisContract.disputeId = disputeCounter;\n    }\n\n    // only the initiator can launch the jury selection\n    // only if not already selected\n    function selectJuryMember(uint256 _contractId) external {\n        // address[] memory selectedJurors = new address[](juryLength);\n        address[3] memory selectedJurors;\n\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage _thisDispute = disputes[thisContract.disputeId];\n\n        // select a jury member\n        juryMember memory jury;\n\n        address jurySelected = msg.sender;\n        for (uint24 i = 0; i < juryLength; i++) {\n            uint24 _seed = i;\n            // uint256 randomIndex = random(_seed);\n            // randomIndex = randomIndex % juryCounter;\n            jurySelected = generateRandomJury(_contractId, _seed);\n            bool selected = false;\n            for (uint24 count = 0; count < selectedJurors.length; count++) {\n                if (jurySelected == selectedJurors[count]) {\n                    selected = true;\n                    break;\n                }\n                selected = false;\n            }\n            if (\n                _thisDispute.juryMembers.length < juryLength &&\n                selected == false\n            ) {\n                selectedJurors[i] = jurySelected;\n                jury = juryMember({\n                    juryId: i,\n                    juryAddress: payable(jurySelected),\n                    hasVoted: false\n                });\n                _thisDispute.juryMembers.push(jury);\n            } else {\n                i--;\n                continue;\n            }\n        }\n        thisContract.state = ContractState.WaitingforJuryVote;\n        emit ContractStateChange(\n            ContractState.DisputeOpened,\n            ContractState.WaitingforJuryVote\n        );\n    }\n\n    function generateRandomJury(uint256 _contractId, uint256 _seed)\n        internal\n        view\n        returns (address)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        address jurySelected = msg.sender;\n        uint256 randomIndex;\n        for (uint256 i = 0; i <= 3; i++) {\n            uint256 randomSeed = uint256(\n                keccak256(\n                    abi.encodePacked(\n                        jurySelected,\n                        block.timestamp,\n                        block.number,\n                        _seed,\n                        i\n                    )\n                )\n            );\n            randomIndex = random(randomSeed) % juryCounter;\n            jurySelected = juryPool[randomIndex];\n            if (\n                jurySelected != address(0) &&\n                jurySelected != thisContract.client &&\n                jurySelected != thisContract.worker\n            ) {\n                break;\n            }\n        }\n        return jurySelected;\n    }\n\n    function isJuryInDispute(uint256 _disputeId, address _juryAddress)\n        external\n        view\n        returns (bool)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            if (thisDispute.juryMembers[i].juryAddress == _juryAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function getJuryMembers(uint256 _disputeId)\n        external\n        view\n        returns (address[] memory)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        address[] memory juryMembers = new address[](\n            thisDispute.juryMembers.length\n        );\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            juryMembers[i] = thisDispute.juryMembers[i].juryAddress;\n        }\n        return juryMembers;\n    }\n\n    function hasVoted(uint256 _disputeId, address _juryAddress)\n        external\n        view\n        returns (bool)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        bool result = false;\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            if (\n                thisDispute.juryMembers[i].juryAddress == _juryAddress &&\n                thisDispute.juryMembers[i].hasVoted == true\n            ) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    // Function for the jury to vote for the dispute between the client and the worker\n\n    function vote(uint256 _contractId, bool _vote)\n        external\n        inState(_contractId, ContractState.WaitingforJuryVote)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\n\n        // get the jury member id in the disput\n        uint24 juryId = 0;\n        uint256 juryMemberLength = thisDispute.juryMembers.length;\n        for (uint24 i = 0; i < juryMemberLength; i++) {\n            if (thisDispute.juryMembers[i].juryAddress == msg.sender) {\n                juryId = i;\n            }\n        }\n        //\"The jury member has already voted.\"\n        require(\n            thisDispute.juryMembers[juryId].hasVoted == false,\n            \"The jury member has already voted.\"\n        );\n\n        thisDispute.juryMembers[juryId].hasVoted = true;\n        thisDispute.totalVoteCount++;\n        if (_vote) {\n            thisDispute.clientVoteCount++;\n        } else {\n            thisDispute.workerVoteCount++;\n        }\n        if (thisDispute.totalVoteCount == juryMemberLength) {\n            thisContract.state = ContractState.DisputeClosed;\n            emit ContractStateChange(\n                ContractState.WaitingforJuryVote,\n                ContractState.DisputeClosed\n            );\n        }\n    }\n\n    // Function to reveal and count the vote of the jury\n\n    function revealState(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.DisputeClosed)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\n\n        if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\n            thisContract.state = ContractState.WorkerLostInDispute;\n            emit ContractStateChange(\n                ContractState.DisputeClosed,\n                ContractState.WorkerLostInDispute\n            );\n        } else {\n            thisContract.state = ContractState.ClientLostInDispute;\n            emit ContractStateChange(\n                ContractState.DisputeClosed,\n                ContractState.ClientLostInDispute\n            );\n        }\n    }\n\n    // Function for client or worker to pull payment and split if juryDispute with jury Members and protocol share and the worker if he won the dispute\n    //should call payment function with constructor(address[] memory payees, uint256[] memory shares)\n\n    function pullPayment(uint256 _contractId)\n        external\n        onlyClientOrWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        // amount in wei\n        uint256 amount = thisContract.price;\n        uint256 _disputeId = thisContract.disputeId;\n\n        // if there is no dispute\n        // if the job have been canceled by the client or freelance\n        if (\n            thisContract.state == ContractState.CancelByFreelancer ||\n            thisContract.state == ContractState.CancelByClient\n        ) {\n            address payable clientAddress = thisContract.client;\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n            (bool success, ) = clientAddress.call{value: amount}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n        // if the job is finished successfully\n        else if (\n            thisContract.state == ContractState.WorkFinishedSuccessufully\n        ) {\n            address WinnerAddress = thisContract.worker;\n            uint256 WinnerShare = amount * (1 - (protocolFee / 100));\n            // protocol address and share\n            address[] memory payees = new address[](2);\n            payees[0] = WinnerAddress;\n            payees[1] = protocolAddress;\n            uint256[] memory shares = new uint256[](2);\n            shares[0] = WinnerShare;\n            shares[1] = amount * (protocolFee / 100);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n            // create a new payment\n            // PaymentSplitter payment = new PaymentSplitter(payees, shares);\n            // transfer the amount to the payment contract\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        }\n        //if dispute existe and the client or worker lost the dispute\n        // As dispute finished split payment between jurors, protocol and who wants\n        else if (thisContract.state == ContractState.ClientLostInDispute) {\n            Dispute storage thisDispute = disputes[_disputeId];\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\n            address[] memory payees = new address[](juryMemberLength + 2);\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n\n            // get jury members address and share\n\n            address WinnerAddress = thisContract.worker;\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\n            uint256 ProtocolShare = amount * (protocolFee / 100);\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\n\n            payees[0] = WinnerAddress;\n            shares[0] = WinnerShare;\n            payees[1] = protocolAddress;\n            shares[1] = ProtocolShare;\n            for (uint256 i = 0; i < juryMemberLength; i++) {\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\n                shares[i + 2] = amount * (juryFee / juryMemberLength / 100);\n            }\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        } else if (thisContract.state == ContractState.WorkerLostInDispute) {\n            // jury members address and share\n            Dispute storage thisDispute = disputes[_disputeId];\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\n            address[] memory payees = new address[](juryMemberLength + 2);\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n\n            // get jury members address and share\n            address WinnerAddress = thisContract.client;\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\n            uint256 ProtocolShare = amount * (protocolFee / 100);\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\n\n            payees[0] = WinnerAddress;\n            shares[0] = WinnerShare;\n            payees[1] = protocolAddress;\n            shares[1] = amount * (protocolFee / 100);\n            for (uint256 i = 0; i < juryMemberLength; i++) {\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\n                shares[i + 2] = (amount * (juryFee / juryMemberLength)) / 100;\n            }\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        } else {\n            revert(\"No allowed to pull payment\");\n        }\n        // transfer the payment to the contract\n        //payment.transfer(amount); // <--- this is the line that fails\n        // delete the contract\n        // delete contracts[_contractId];\n\n        // emit PaymentReleased(_contractId, amount);\n    }\n}\n"
    },
    "contracts/utils/randomNumber.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nabstract contract randomNumber {\n    // function random() public view returns (uint256) {\n    //     return block.prevrandao;\n    // }\n\n    function random(uint256 _seed) public view returns (uint256) {\n        uint256 result = uint256(\n            keccak256(\n                abi.encodePacked(block.timestamp, block.prevrandao, _seed)\n            )\n        );\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 400
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}