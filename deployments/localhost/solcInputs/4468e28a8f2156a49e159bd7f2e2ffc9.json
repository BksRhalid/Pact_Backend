{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/finance/PaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (finance/PaymentSplitter.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/utils/SafeERC20.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @title PaymentSplitter\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n * that the Ether will be split in this way, since it is handled transparently by the contract.\n *\n * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n * an amount proportional to the percentage of total shares they were assigned. The distribution of shares is set at the\n * time of contract deployment and can't be updated thereafter.\n *\n * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n * function.\n *\n * NOTE: This contract assumes that ERC20 tokens will behave similarly to native tokens (Ether). Rebasing tokens, and\n * tokens that apply fees during transfers, are likely to not be supported as expected. If in doubt, we encourage you\n * to run tests before sending real value to this contract.\n */\ncontract PaymentSplitter is Context {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address to, uint256 amount);\n    event ERC20PaymentReleased(IERC20 indexed token, address to, uint256 amount);\n    event PaymentReceived(address from, uint256 amount);\n\n    uint256 private _totalShares;\n    uint256 private _totalReleased;\n\n    mapping(address => uint256) private _shares;\n    mapping(address => uint256) private _released;\n    address[] private _payees;\n\n    mapping(IERC20 => uint256) private _erc20TotalReleased;\n    mapping(IERC20 => mapping(address => uint256)) private _erc20Released;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    constructor(address[] memory payees, uint256[] memory shares_) payable {\n        require(payees.length == shares_.length, \"PaymentSplitter: payees and shares length mismatch\");\n        require(payees.length > 0, \"PaymentSplitter: no payees\");\n\n        for (uint256 i = 0; i < payees.length; i++) {\n            _addPayee(payees[i], shares_[i]);\n        }\n    }\n\n    /**\n     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n     * reliability of the events, and not the actual splitting of Ether.\n     *\n     * To learn more about this see the Solidity documentation for\n     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n     * functions].\n     */\n    receive() external payable virtual {\n        emit PaymentReceived(_msgSender(), msg.value);\n    }\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    function totalShares() public view returns (uint256) {\n        return _totalShares;\n    }\n\n    /**\n     * @dev Getter for the total amount of Ether already released.\n     */\n    function totalReleased() public view returns (uint256) {\n        return _totalReleased;\n    }\n\n    /**\n     * @dev Getter for the total amount of `token` already released. `token` should be the address of an IERC20\n     * contract.\n     */\n    function totalReleased(IERC20 token) public view returns (uint256) {\n        return _erc20TotalReleased[token];\n    }\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    function shares(address account) public view returns (uint256) {\n        return _shares[account];\n    }\n\n    /**\n     * @dev Getter for the amount of Ether already released to a payee.\n     */\n    function released(address account) public view returns (uint256) {\n        return _released[account];\n    }\n\n    /**\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function released(IERC20 token, address account) public view returns (uint256) {\n        return _erc20Released[token][account];\n    }\n\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    function payee(uint256 index) public view returns (address) {\n        return _payees[index];\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable Ether.\n     */\n    function releasable(address account) public view returns (uint256) {\n        uint256 totalReceived = address(this).balance + totalReleased();\n        return _pendingPayment(account, totalReceived, released(account));\n    }\n\n    /**\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\n     * IERC20 contract.\n     */\n    function releasable(IERC20 token, address account) public view returns (uint256) {\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased(token);\n        return _pendingPayment(account, totalReceived, released(token, account));\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address payable account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _totalReleased is the sum of all values in _released.\n        // If \"_totalReleased += payment\" does not overflow, then \"_released[account] += payment\" cannot overflow.\n        _totalReleased += payment;\n        unchecked {\n            _released[account] += payment;\n        }\n\n        Address.sendValue(account, payment);\n        emit PaymentReleased(account, payment);\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of `token` tokens they are owed, according to their\n     * percentage of the total shares and their previous withdrawals. `token` must be the address of an IERC20\n     * contract.\n     */\n    function release(IERC20 token, address account) public virtual {\n        require(_shares[account] > 0, \"PaymentSplitter: account has no shares\");\n\n        uint256 payment = releasable(token, account);\n\n        require(payment != 0, \"PaymentSplitter: account is not due payment\");\n\n        // _erc20TotalReleased[token] is the sum of all values in _erc20Released[token].\n        // If \"_erc20TotalReleased[token] += payment\" does not overflow, then \"_erc20Released[token][account] += payment\"\n        // cannot overflow.\n        _erc20TotalReleased[token] += payment;\n        unchecked {\n            _erc20Released[token][account] += payment;\n        }\n\n        SafeERC20.safeTransfer(token, account, payment);\n        emit ERC20PaymentReleased(token, account, payment);\n    }\n\n    /**\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\n     * already released amounts.\n     */\n    function _pendingPayment(\n        address account,\n        uint256 totalReceived,\n        uint256 alreadyReleased\n    ) private view returns (uint256) {\n        return (totalReceived * _shares[account]) / _totalShares - alreadyReleased;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param shares_ The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 shares_) private {\n        require(account != address(0), \"PaymentSplitter: account is the zero address\");\n        require(shares_ > 0, \"PaymentSplitter: shares are 0\");\n        require(_shares[account] == 0, \"PaymentSplitter: account already has shares\");\n\n        _payees.push(account);\n        _shares[account] = shares_;\n        _totalShares = _totalShares + shares_;\n        emit PayeeAdded(account, shares_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FreelanceContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"./utils/randomNumber.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// import \"./utils/payments.sol\"; // to be added later with openzeppelin payment splitter\n\n// Contract to create a freelance contract\n\n/**\n * @title freelanceContract\n * @dev This contract manage PACT dAPP with main functionallités to create a contract between client to hire a worker to perform a task,\n *      and allows the worker to sign the contract, start working, request client validation,\n *      and for the client to validate the work and allow payment. The client can also cancel the\n *      contract before the worker signs, and the worker can cancel the contract at any time.\n *      If a dispute arises, the client or worker can open a dispute and a jury will be selected randomly\n *      to resolve the dispute. They resolve the dispute by voting on whether the worker or client is\n *      in the right. The jury can also vote to split the payment between the client and worker.\n * @notice This contract is not audited and should not be used in production.\n * @dev This contract is working in progress and is not yet complete.\n * todo: add a function to limit time for the jury to vote and if not call a new jury to vote\n * todo: add a function to limit time for the client to reveal the vote and if not call a new jury to vote\n * todo: add payment splitter to split the payment between the client and worker\n * todo: improve randomness of jury selection to pay less gas\n */\ncontract freelanceContract is randomNumber, Ownable {\n    // State variables\n    uint24 public juryLength; // jury length\n    // protocol fee\n    uint8 public protocolFee; // 5% of the contract price\n    uint8 public juryFee; // 5% of the contract price\n    address payable protocolAddress; // protocol address\n\n    /**\n     * @dev Constructor to set the protocol and jury fees, as well as the jury length\n     * @param _protocolFee The protocol fee percentage\n     * @param _juryFee The jury fee percentage\n     * @param _juryLength The length of time for the jury vote\n     */\n    constructor(\n        uint8 _protocolFee,\n        uint8 _juryFee,\n        uint24 _juryLength\n    ) {\n        protocolFee = _protocolFee;\n        juryFee = _juryFee;\n        juryLength = _juryLength;\n        protocolAddress = payable(msg.sender);\n    }\n\n    struct ContractPact {\n        address payable client; // client address\n        address payable worker; // worker address\n        bytes32 hashJob; // title + description of the work - should be a hash\n        uint256 deadline; // timestamp\n        uint256 createAt; // timestamp\n        uint256 price; // price of the work in wei\n        uint256 disputeId; // dispute id\n        ContractState state; // state of the contract\n    }\n\n    struct Dispute {\n        uint256 disputeId; // dispute id\n        uint256 contractId; // contract id\n        uint24 totalVoteCount; // jury vote\n        uint24 clientVoteCount; // client vote count private until reveal\n        uint24 workerVoteCount; // worker vote count private until reveal\n        address disputeInitiator; // dispute initiator\n        juryMember[] juryMembers; // jury address => jury hasVoted\n    }\n\n    struct juryMember {\n        uint24 juryId; // jury id\n        bool hasVoted; // jury vote\n        address payable juryAddress; // jury address\n    }\n\n    // Mappings\n\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\n\n    uint256 public contractCounter = 0; // counter of contracts\n    uint256 public disputeCounter = 0; // counter of disputes\n    uint256 public juryCounter = 0; // counter of jury\n\n    enum ContractState {\n        WaitingWorkerSign,\n        WorkStarted,\n        WaitingClientReview,\n        WorkFinishedSuccessufully,\n        DisputeOpened,\n        WaitingforJuryVote,\n        DisputeClosed,\n        ClientLostInDispute,\n        WorkerLostInDispute,\n        CancelByFreelancer,\n        CancelByClient,\n        Archived\n    }\n    // reveal won or lost in dispute after jury vote completed (if jury vote is 50% or more)\n\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\n\n    // Events\n\n    // Event to display contract state change\n    event ContractStateChange(\n        ContractState previousStatus,\n        ContractState newStatus\n    );\n\n    event Voted(uint256 disputeId, address juryAddress);\n\n    // Modifiers\n\n    // Modifier to check if the contract is in the correct state\n    modifier inState(uint256 _contractId, ContractState _state) {\n        require(\n            contracts[_contractId].state == _state,\n            \"Contract is not in the correct state.\"\n        );\n        _;\n    }\n\n    modifier onlyWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].worker == msg.sender,\n            \"Only the worker can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClient(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender,\n            \"Only the client can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClientOrWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender ||\n                contracts[_contractId].worker == msg.sender,\n            \"Only the client or the worker can call this function.\"\n        );\n        _;\n    }\n\n    // Functions admin\n\n    /**\n     * @dev Function to set the protocol fee percentage.\n     * @notice Only the owner of the contract can call this function.\n     * @param _protocolFee The new protocol fee percentage to be set.\n     */\n    function setProtocolFee(uint8 _protocolFee) public onlyOwner {\n        protocolFee = _protocolFee;\n    }\n\n    /**\n     * @dev Function to set the jury fee percentage.\n     * @notice Only the owner of the contract can call this function.\n     * @param _juryFee The new jury fee percentage to be set.\n     */\n    function setJuryFee(uint8 _juryFee) public onlyOwner {\n        juryFee = _juryFee;\n    }\n\n    /**\n     * @dev Function to set the length of time in days that a jury member can vote in a dispute.\n     * @notice Only the owner of the contract can call this function.\n     * @param _juryLength The new length of time in days to be set.\n     */\n    function setJuryLength(uint8 _juryLength) public onlyOwner {\n        juryLength = _juryLength;\n    }\n\n    /**\n     * @dev Add a new worker to the workers mapping.\n     * @notice Caller should be a non-zero addresses and the worker doesn't already exist.\n     */\n    function addWorker() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(workers[msg.sender] == false, \"Worker already exists.\");\n        workers[msg.sender] = true;\n    }\n\n    /**\n     * @dev Add a new client to the clients mapping.\n     * @notice Caller should be a non-zero addresses and the client doesn't already exist.\n     */\n    function addClient() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(clients[msg.sender] == false, \"Client already exists.\");\n        clients[msg.sender] = true;\n    }\n\n    /**\n     * @dev Add a new jury to the juryPool mapping.\n     * @notice Caller should be a non-zero addresses\n     * Increments the juryCounter, and adds the sender to the juryPool with the new jury ID.\n     */\n    function addJury() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        // add a new jury of juryPool\n        juryCounter++;\n        juryPool[juryCounter] = msg.sender;\n    }\n\n    /**\n     * @dev  Function to remove a client from the clients mapping\n     *@notice Caller should be a non-zero addresses and the client already exists.\n     * @notice If the client does not exist, the function will revert.\n     */\n    function removeClient() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(clients[msg.sender] == true, \"Client does not exist.\");\n        clients[msg.sender] = false;\n    }\n\n    /**\n     * @dev  Function to remove a worker from the workers mapping\n     * @notice If the worker to be removed does not exist in the workers mapping, the function will revert.\n     */\n    function removeWorker() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(workers[msg.sender] == true, \"Worker does not exist.\");\n        workers[msg.sender] = false;\n    }\n\n    /**\n     * @dev Function to remove a jury from the juryPool mapping\n     */\n    function removeJury() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(isJury(msg.sender) == true, \"Jury does not exist.\");\n        // remove a jury of juryPool\n        bool found = false;\n        for (uint256 i = 0; i < juryCounter && !found; i++) {\n            if (juryPool[i] == msg.sender) {\n                found = true;\n                delete juryPool[i];\n            }\n        }\n        juryCounter--;\n    }\n\n    /**\n     * @dev Function to check if the caller is registered as a client\n     * @return a boolean value indicating if the sender is a client (true) or not (false)\n     */\n    function isClient() external view returns (bool) {\n        if (clients[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Function to check if the caller is registered as a worker\n     * @return a boolean value indicating if the sender is a worker (true) or not (false)\n     */\n    function isWorker() external view returns (bool) {\n        if (workers[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Function to check if the caller is registered as a jury\n     * @param _address the address to be checked\n     * @return a boolean value indicating if the sender is a jury (true) or not (false)\n     */\n    function isJury(address _address) public view returns (bool) {\n        bool stop = false;\n        for (uint256 i = 0; i < juryCounter && !stop; i++) {\n            if (juryPool[i] == _address) {\n                stop = true;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Function to create a new contract sent by a client\n     * @param _deadline the deadline for the contract\n     * @param _today the current date\n     * @param _hash the hash of the job bytes32 of title and description\n     */\n    function createContract(\n        uint256 _deadline,\n        uint256 _today,\n        bytes32 _hash\n    ) public payable {\n        require(\n            clients[msg.sender] == true,\n            \"Only client can create a contract.\"\n        );\n        require(msg.value > 0, \"The price must be greater than 0.\");\n        contractCounter++;\n        contracts[contractCounter] = ContractPact({\n            client: payable(msg.sender),\n            worker: payable(address(0)),\n            hashJob: _hash,\n            createAt: _today,\n            deadline: _deadline,\n            price: msg.value,\n            state: ContractState.WaitingWorkerSign,\n            disputeId: 0\n        });\n    }\n\n    /**\n     * @dev Allows the client to cancel the contract only if the worker didn't sign the contract yet.\n     * @param _contractId The ID of the contract to be canceled\n     */\n    function cancelContractByClient(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n        thisContract.state = ContractState.CancelByClient;\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.CancelByClient\n        );\n    }\n\n    /**\n     * @dev Allows the worker to cancel the contract\n     * @param _contractId The ID of the contract to be canceled\n     */\n    function cancelContractByWorker(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.CancelByFreelancer;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.CancelByFreelancer\n        );\n    }\n\n    /**\n     * @dev Allows the worker to take the job\n     * @param _contractId The ID of the contract to be signed\n     */\n    function signContract(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n\n        thisContract.worker = payable(msg.sender);\n        thisContract.state = ContractState.WorkStarted;\n\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.WorkStarted\n        );\n    }\n\n    /**\n     * @dev Allows the worker to request client validation to the client when the work is done\n     * @param _contractId The ID of the contract to be reviewed by the client.\n     */\n    function requestClientValidation(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.WaitingClientReview;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.WaitingClientReview\n        );\n    }\n\n    /**\n     * @dev Allows the client to validate the work done by the worker\n     * @param _contractId The ID of the contract to be validated\n     */\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingClientReview)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\n    }\n\n    /**\n     * @dev Allows the client or worker to open a dispute\n     * @param _contractId The ID of the contract to open a dispute\n     */\n    function openDispute(uint256 _contractId)\n        external\n        onlyClientOrWorker(_contractId)\n    {\n        require(\n            juryCounter > juryLength,\n            \"Not enough jury in juryPool to open a dispute.\"\n        );\n        require(\n            contracts[_contractId].state == ContractState.WorkStarted ||\n                contracts[_contractId].state ==\n                ContractState.WaitingClientReview,\n            \"The contract must be in work started or waiting client review state.\"\n        );\n\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.DisputeOpened;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.DisputeOpened\n        );\n\n        disputeCounter++;\n        Dispute storage thisDispute = disputes[disputeCounter];\n        thisDispute.contractId = _contractId;\n        thisDispute.disputeInitiator = msg.sender;\n        thisContract.disputeId = disputeCounter;\n    }\n\n    /**\n     * @notice Selects a jury member for a given contract's dispute\n     * @dev Allows the client or worker to open a dispute\n     * @param _contractId The ID of the contract in dispute\n     */\n    function selectJuryMember(uint256 _contractId) external {\n        // address[] memory selectedJurors = new address[](juryLength);\n        address[] memory selectedJurors = new address[](juryLength);\n\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage _thisDispute = disputes[thisContract.disputeId];\n\n        // select a jury member\n        juryMember memory jury;\n\n        address jurySelected = msg.sender;\n        for (uint24 i = 0; i < juryLength; i++) {\n            uint24 _seed = i;\n            // uint256 randomIndex = random(_seed);\n            // randomIndex = randomIndex % juryCounter;\n            jurySelected = generateRandomJury(_contractId, _seed);\n            bool selected = false;\n            for (uint24 count = 0; count < selectedJurors.length; count++) {\n                if (jurySelected == selectedJurors[count]) {\n                    selected = true;\n                    break;\n                }\n                selected = false;\n            }\n            // check if juryselected is already selected in mapping\n            // bool selected = selectedJurors[jurySelected];\n\n            if (\n                _thisDispute.juryMembers.length < juryLength &&\n                selected == false\n            ) {\n                // selectedJurors[i] = jurySelected;\n                // selectedJurors[jurySelected] = true;\n                jury = juryMember({\n                    juryId: i,\n                    juryAddress: payable(jurySelected),\n                    hasVoted: false\n                });\n                _thisDispute.juryMembers.push(jury);\n            } else {\n                i--;\n                continue;\n            }\n        }\n        thisContract.state = ContractState.WaitingforJuryVote;\n        emit ContractStateChange(\n            ContractState.DisputeOpened,\n            ContractState.WaitingforJuryVote\n        );\n    }\n\n    /**\n     * @notice Generates a random jury member from the jury pool, excluding the client and worker of the contract\n     * @dev Uses a given seed value to generate a random index in the jury pool and returns the corresponding address if it is not the client or worker of the contract\n     * @param _contractId The ID of the contract in dispute\n     * @param _seed The seed value to use for random number generation\n     * @return The address of the randomly selected jury member\n     */\n\n    function generateRandomJury(uint256 _contractId, uint24 _seed)\n        internal\n        view\n        returns (address)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        address jurySelected = msg.sender;\n        uint256 randomIndex;\n        for (uint8 i = 0; i <= 3; i++) {\n            randomIndex = random(_seed) % juryCounter;\n            jurySelected = juryPool[randomIndex];\n            if (\n                jurySelected != address(0) &&\n                jurySelected != thisContract.client &&\n                jurySelected != thisContract.worker\n            ) {\n                break;\n            }\n        }\n        return jurySelected;\n    }\n\n    /**\n     * @notice Checks if a given address is a member of the jury for a particular dispute\n     * @param _disputeId The ID of the dispute to check\n     * @param _juryAddress The address to check for membership in the dispute's jury\n     * @return true if the address is a member of the dispute's jury, false otherwise\n     */\n    function isJuryInDispute(uint256 _disputeId, address _juryAddress)\n        external\n        view\n        returns (bool)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            if (thisDispute.juryMembers[i].juryAddress == _juryAddress) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @notice Returns the addresses of all the jury members for a given dispute\n     * @param _disputeId The ID of the dispute to get jury members for\n     * @return An array of addresses representing the jury members for the dispute\n     */\n    function getJuryMembers(uint256 _disputeId)\n        external\n        view\n        returns (address[] memory)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        address[] memory juryMembers = new address[](\n            thisDispute.juryMembers.length\n        );\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            juryMembers[i] = thisDispute.juryMembers[i].juryAddress;\n        }\n        return juryMembers;\n    }\n\n    /**\n     * @notice Checks if a given jury member has voted on a specific dispute\n     * @param _disputeId The ID of the dispute to check\n     * @param _juryAddress The address of the jury member to check for a vote\n     * @return true if the jury member has voted on the dispute, false otherwise\n     */\n    function hasVoted(uint256 _disputeId, address _juryAddress)\n        external\n        view\n        returns (bool)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        bool result = false;\n        for (uint256 i = 0; i < thisDispute.juryMembers.length; i++) {\n            if (\n                thisDispute.juryMembers[i].juryAddress == _juryAddress &&\n                thisDispute.juryMembers[i].hasVoted == true\n            ) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    // Function for the jury to vote for the dispute between the client and the worker\n\n    /**\n     * @dev This function for the jury to vote for the dispute between the client and the worker\n     * @param _contractId The ID of the contract.\n     * @param _vote The vote of the jury member.\n     */\n    function vote(uint256 _contractId, bool _vote)\n        external\n        inState(_contractId, ContractState.WaitingforJuryVote)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\n\n        // get the jury member id in the disput\n        uint24 juryId = 0;\n        uint256 juryMemberLength = thisDispute.juryMembers.length;\n        for (uint24 i = 0; i < juryMemberLength; i++) {\n            if (thisDispute.juryMembers[i].juryAddress == msg.sender) {\n                juryId = i;\n            }\n        }\n        //\"The jury member has already voted.\"\n        require(\n            thisDispute.juryMembers[juryId].hasVoted == false,\n            \"The jury member has already voted.\"\n        );\n\n        thisDispute.juryMembers[juryId].hasVoted = true;\n        thisDispute.totalVoteCount++;\n        if (_vote) {\n            thisDispute.clientVoteCount++;\n        } else {\n            thisDispute.workerVoteCount++;\n        }\n        if (thisDispute.totalVoteCount == juryMemberLength) {\n            thisContract.state = ContractState.DisputeClosed;\n            emit ContractStateChange(\n                ContractState.WaitingforJuryVote,\n                ContractState.DisputeClosed\n            );\n        }\n    }\n\n    /**\n     * @dev This function reveals the state of a dispute and determines whether the client or the worker won the dispute.\n     * @param _contractId The ID of the contract.\n     */\n    function revealState(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.DisputeClosed)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        Dispute storage thisDispute = disputes[thisContract.disputeId];\n\n        if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\n            thisContract.state = ContractState.WorkerLostInDispute;\n            emit ContractStateChange(\n                ContractState.DisputeClosed,\n                ContractState.WorkerLostInDispute\n            );\n        } else {\n            thisContract.state = ContractState.ClientLostInDispute;\n            emit ContractStateChange(\n                ContractState.DisputeClosed,\n                ContractState.ClientLostInDispute\n            );\n        }\n    }\n\n    /**\n     * @dev This function allows the client or worker to pull payment and split if jury dispute with jury Members and protocol share and the worker if he won the dispute.\n     * @param _contractId The ID of the contract.\n     */\n    //TODO: ADAPT AND USE PAYMENT SPLITTER\n    function pullPayment(uint256 _contractId)\n        external\n        onlyClientOrWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.price > 0,\n            \"This job contract balance is equal to zero\"\n        );\n\n        // amount in wei\n        uint256 amount = thisContract.price;\n        uint256 _disputeId = thisContract.disputeId;\n\n        // if there is no dispute\n        // if the job have been canceled by the client or freelance\n        if (\n            thisContract.state == ContractState.CancelByFreelancer ||\n            thisContract.state == ContractState.CancelByClient\n        ) {\n            address payable clientAddress = thisContract.client;\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n            (bool success, ) = clientAddress.call{value: amount}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n        // if the job is finished successfully\n        else if (\n            thisContract.state == ContractState.WorkFinishedSuccessufully\n        ) {\n            address WinnerAddress = thisContract.worker;\n            uint256 WinnerShare = amount * (1 - (protocolFee / 100));\n            // protocol address and share\n            address[] memory payees = new address[](2);\n            payees[0] = WinnerAddress;\n            payees[1] = protocolAddress;\n            uint256[] memory shares = new uint256[](2);\n            shares[0] = WinnerShare;\n            shares[1] = amount * (protocolFee / 100);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        }\n        //if dispute existe and the client or worker lost the dispute\n        // As dispute finished split payment between jurors, protocol and who wants\n        else if (thisContract.state == ContractState.ClientLostInDispute) {\n            Dispute storage thisDispute = disputes[_disputeId];\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\n            address[] memory payees = new address[](juryMemberLength + 2);\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n\n            // get jury members address and share\n\n            address WinnerAddress = thisContract.worker;\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\n            uint256 ProtocolShare = amount * (protocolFee / 100);\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\n\n            payees[0] = WinnerAddress;\n            shares[0] = WinnerShare;\n            payees[1] = protocolAddress;\n            shares[1] = ProtocolShare;\n            for (uint256 i = 0; i < juryMemberLength; i++) {\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\n                shares[i + 2] = amount * (juryFee / juryMemberLength / 100);\n            }\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        } else if (thisContract.state == ContractState.WorkerLostInDispute) {\n            // jury members address and share\n            Dispute storage thisDispute = disputes[_disputeId];\n            uint256 juryMemberLength = thisDispute.juryMembers.length;\n            address[] memory payees = new address[](juryMemberLength + 2);\n            uint256[] memory shares = new uint256[](juryMemberLength + 2);\n\n            // Update state and price\n            thisContract.state = ContractState.Archived;\n            thisContract.price = 0;\n\n            // get jury members address and share\n            address WinnerAddress = thisContract.client;\n            uint256 JuryShare = ((juryFee / juryMemberLength) * amount) / 100;\n            uint256 ProtocolShare = amount * (protocolFee / 100);\n            uint256 WinnerShare = amount - JuryShare - ProtocolShare;\n\n            payees[0] = WinnerAddress;\n            shares[0] = WinnerShare;\n            payees[1] = protocolAddress;\n            shares[1] = amount * (protocolFee / 100);\n            for (uint256 i = 0; i < juryMemberLength; i++) {\n                payees[i + 2] = thisDispute.juryMembers[i].juryAddress;\n                shares[i + 2] = (amount * (juryFee / juryMemberLength)) / 100;\n            }\n            // create a payment\n            for (uint256 i = 0; i < payees.length; i++) {\n                (bool success, ) = payees[i].call{value: shares[i]}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n        } else {\n            revert(\"No allowed to pull payment\");\n        }\n    }\n}\n"
    },
    "contracts/utils/payments.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/finance/PaymentSplitter.sol\";\n\ncontract payments is PaymentSplitter {\n    constructor(address[] memory _payees, uint256[] memory _shares)\n        payable\n        PaymentSplitter(_payees, _shares)\n    {}\n}\n"
    },
    "contracts/utils/random_ChainLink.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\n// import \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\n// abstract contract randomNumber is VRFConsumerBaseV2 {\n//     VRFCoordinatorV2Interface COORDINATOR;\n\n//     // Goerli coordinator. For other networks,\n//     // see https://docs.chain.link/docs/vrf-contracts/#configurations\n//     address vrfCoordinator = 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed;\n\n//     // The gas lane to use, which specifies the maximum gas price to bump to.\n//     // For a list of available gas lanes on each network,\n//     // see https://docs.chain.link/docs/vrf-contracts/#configurations\n//     bytes32 keyHash =\n//         0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f;\n\n//     // Depends on the number of requested values that you want sent to the\n//     // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n//     // so 100,000 is a safe default for this example contract. Test and adjust\n//     // this limit based on the network that you select, the size of the request,\n//     // and the processing of the callback request in the fulfillRandomWords()\n//     // function.\n//     uint32 callbackGasLimit = 100000;\n\n//     // The default is 3, but you can set this higher.\n//     uint16 requestConfirmations = 3;\n\n//     uint32 numWords = 1;\n\n//     uint256[] public s_randomWords;\n//     uint256 public s_requestId;\n\n//     constructor(uint64 subscriptionId) VRFConsumerBaseV2(vrfCoordinator) {\n//         subscriptionId = s_subscriptionId; // get from ChainLink\n//         COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n//     }\n\n//     function requestRandomWords() external {\n//         s_requestId = COORDINATOR.requestRandomWords(\n//             keyHash,\n//             s_subscriptionId,\n//             requestConfirmations,\n//             callbackGasLimit,\n//             numWords\n//         );\n//     }\n\n//     function fulfillRandomWords(uint256, uint256[] memory randomWords)\n//         internal\n//         override\n//     {\n//         s_randomWords = randomWords;\n//     }\n\n//     function random() public view returns (uint256) {\n//         return s_randomWords[0];\n//     }\n// }\n"
    },
    "contracts/utils/randomNumber.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nabstract contract randomNumber {\n    // function random() public view returns (uint256) {\n    //     return block.prevrandao;\n    // }\n\n    function random(uint256 _seed) public view returns (uint256) {\n        uint256 result = uint256(\n            keccak256(\n                abi.encodePacked(block.timestamp, block.prevrandao, _seed)\n            )\n        );\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}