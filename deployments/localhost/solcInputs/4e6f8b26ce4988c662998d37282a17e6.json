{
  "language": "Solidity",
  "sources": {
    "contracts/FreelanceContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./utils/randomNumber.sol\";\n\ncontract FreelanceContract is randomNumber {\n    // State variables\n\n    struct ContractPact {\n        address client; // client address\n        address worker; // worker address\n        bytes32 hashJob; // title + description of the work - should be a hash\n        uint256 deadline; // timestamp\n        uint256 createAt; // timestamp\n        uint256 price; // price of the work in wei\n        ContractState state; // state of the contract\n    }\n\n    struct Dispute {\n        uint256 disputeId; // dispute id\n        uint256 contractId; // contract id\n        address disputeInitiator; // dispute initiator\n        uint256 totalVoteCount; // jury vote\n        uint256 clientVoteCount; // client vote count\n        uint256 workerVoteCount; // worker vote count\n        mapping(address => bool) disputeJury; // jury address => jury vote\n        DisputeState state;\n    }\n\n    // Mappings\n\n    mapping(address => bool) public workers; // mapping of workers - not related to contracts creation - could be used to display workers in the frontend\n    mapping(address => bool) public clients; // mapping of clients - not related to contracts creation - could be used to display clients in the frontend\n    mapping(uint256 => Dispute) public disputes; // mapping of disputes\n    mapping(uint256 => ContractPact) public contracts; // mapping of contracts\n    mapping(uint256 => address) public juryPool; // mapping of jury (jury address => jury struct)\n\n    uint256 public contractCounter = 0; // counter of contracts\n    uint256 public disputeCounter = 0; // counter of disputes\n    uint256 public juryCounter = 0; // counter of jury\n\n    enum ContractState {\n        WaitingWorkerSign,\n        WorkStarted,\n        WaitingClientReview,\n        WorkFinishedSuccessufully,\n        DisputeOpened,\n        ClientLostInCourt,\n        WorkerLostInCourt,\n        DisputeClosed,\n        CancelByFreelancer,\n        CancelByClient,\n        Archived\n    }\n    enum DisputeState {\n        WaitingJuryVote,\n        ClientWon,\n        WorkerWon,\n        DisputeClosed\n    }\n\n    ContractState[] public contractStates; // array of contract states - could be used to display contract states in the frontend\n    DisputeState[] public disputeStates; // array of contract states - could be used to display contract states in the frontend\n\n    // Events\n\n    // Event to display contract state change\n    event ContractStateChange(\n        ContractState previousStatus,\n        ContractState newStatus\n    );\n    event DisputeStateChange(\n        DisputeState previousStatus,\n        DisputeState newStatus\n    );\n    // Event to display contract creation by client\n    event ContractCreated(\n        uint256 contractId,\n        address client,\n        address worker,\n        bytes32 hashJob,\n        uint256 createAt,\n        uint256 deadline,\n        uint256 price,\n        ContractState state\n    );\n\n    event DisputeCreated(\n        uint256 disputeId,\n        uint256 contractId,\n        address disputeInitiator\n    );\n\n    // Event to display contract signing by worker\n    event ContractSigned(uint256 contractId, address worker);\n\n    // Event to display work is finish by worker\n    event ContractReviewRequested(uint256 contractId, address worker);\n\n    // Event to display work is validated by client\n    event ContractIsFinished(uint256 contractId);\n\n    event JuryVote(uint256 disputeId);\n\n    // Modifiers\n\n    // Modifier to check if the contract is in the correct state\n    modifier inState(uint256 _contractId, ContractState _state) {\n        require(\n            contracts[_contractId].state == _state,\n            \"Contract is not in the correct state.\"\n        );\n        _;\n    }\n\n    // Modifier to check if the dispute is in the correct state\n    modifier inStateDispute(uint256 _disputeId, DisputeState _state) {\n        require(\n            disputes[_disputeId].state == _state,\n            \"Dispute is not in the correct state.\"\n        );\n        _;\n    }\n\n    modifier onlyWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].worker == msg.sender,\n            \"Only the worker can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClient(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender,\n            \"Only the client can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyClientOrWorker(uint256 _contractId) {\n        require(\n            contracts[_contractId].client == msg.sender ||\n                contracts[_contractId].worker == msg.sender,\n            \"Only the client or the worker can call this function.\"\n        );\n        _;\n    }\n\n    modifier onlyJury(uint256 _disputeId) {\n        require(\n            disputes[_disputeId].disputeJury[msg.sender] == true,\n            \"Only the jury can call this function.\"\n        );\n        _;\n    }\n\n    // TODO : add modifier to check only jury of the dispute can call the function\n\n    // Functions\n\n    // Function to add a worker to the workers mapping\n\n    function addWorker() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(workers[msg.sender] == false, \"Worker already exists.\");\n        workers[msg.sender] = true;\n    }\n\n    // Function to add a client to the clients mapping\n\n    function addClient() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        require(clients[msg.sender] == false, \"Client already exists.\");\n        clients[msg.sender] = true;\n    }\n\n    // Function to add a jury to the clients mapping\n\n    function addJury() external {\n        require(msg.sender != address(0), \"Invalid address.\");\n        // have to be a worker or client before to apply to be a jury\n\n        // add a new jury of juryPool\n\n        juryCounter++;\n        juryPool[juryCounter] = msg.sender;\n    }\n\n    function isClient() external view returns (bool) {\n        if (clients[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function isWorker() external view returns (bool) {\n        if (workers[msg.sender] == true) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // Function to create a new contract send by client\n    function createContract(\n        uint256 _deadline,\n        uint256 _today,\n        bytes32 _hash\n    ) public payable {\n        require(\n            clients[msg.sender] == true,\n            \"Only client can create a contract.\"\n        );\n        contractCounter++;\n        contracts[contractCounter] = ContractPact({\n            client: msg.sender,\n            worker: address(0),\n            hashJob: _hash,\n            createAt: _today,\n            deadline: _deadline,\n            price: msg.value,\n            state: ContractState.WaitingWorkerSign\n        });\n\n        emit ContractCreated(\n            contractCounter,\n            msg.sender,\n            address(0),\n            _hash,\n            _today,\n            _deadline,\n            msg.value,\n            ContractState.WaitingWorkerSign\n        );\n    }\n\n    // Function for the client to cancel the contract only if the worker didn't sign the contract\n\n    function cancelContractByClient(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n        thisContract.state = ContractState.CancelByClient;\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.CancelByClient\n        );\n    }\n\n    // Function for the worker to cancel the contract\n\n    function cancelContractByWorker(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.CancelByFreelancer;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.CancelByFreelancer\n        );\n    }\n\n    // Function for the worker to sign the contract\n    function signContract(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingWorkerSign)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        require(\n            thisContract.state == ContractState.WaitingWorkerSign,\n            \"The contract has already been signed.\"\n        );\n\n        thisContract.worker = msg.sender;\n        thisContract.state = ContractState.WorkStarted;\n\n        emit ContractSigned(_contractId, msg.sender);\n        emit ContractStateChange(\n            ContractState.WaitingWorkerSign,\n            ContractState.WorkStarted\n        );\n    }\n\n    // Function to get the contract details\n\n    function getContractDetails(uint256 _contractId)\n        external\n        view\n        returns (\n            uint256 contractId,\n            address client,\n            address worker,\n            bytes32 hashJob,\n            uint256 deadline,\n            uint256 price\n        )\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        contractId = _contractId;\n        client = thisContract.client;\n        worker = thisContract.worker;\n        hashJob = thisContract.hashJob;\n        deadline = thisContract.deadline;\n        price = thisContract.price;\n    }\n\n    // Function for the client to validate the contract\n\n    function setIsFinishedAndAllowPayment(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WaitingClientReview)\n        onlyClient(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.WorkFinishedSuccessufully;\n        emit ContractIsFinished(_contractId);\n    }\n\n    // Function for the client or worker to open a dispute\n    function openDispute(uint256 _contractId)\n        external\n        inState(_contractId, ContractState.WorkStarted)\n        onlyClientOrWorker(_contractId)\n    {\n        ContractPact storage thisContract = contracts[_contractId];\n        thisContract.state = ContractState.DisputeOpened;\n        emit ContractStateChange(\n            ContractState.WorkStarted,\n            ContractState.DisputeOpened\n        );\n\n        // create a new dispute\n        disputeCounter++;\n        Dispute storage thisDispute = disputes[disputeCounter];\n        thisDispute.contractId = _contractId;\n        thisDispute.disputeInitiator = msg.sender;\n        thisDispute.state = DisputeState.WaitingJuryVote;\n\n        // select a jury member\n        uint256 juryIndex = 0;\n\n        for (uint256 i = 0; i < 12; i++) {\n            uint256 randomIndex = random(juryCounter);\n            address jurySelected = juryPool[randomIndex];\n            // address jurySelected = juryPool[juryIndex].juryAddress;\n            if (\n                jurySelected != thisContract.client &&\n                jurySelected != thisContract.worker\n            ) {\n                thisDispute.disputeJury[jurySelected] = false;\n                juryIndex++;\n            } else {\n                i--;\n            }\n        }\n        // create a new dispute\n    }\n\n    // Function to get the disputeJury list of a dispute\n\n    function getDisputeJury(uint256 _disputeId)\n        external\n        view\n        returns (address[] memory juryList)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n        juryList = new address[](12);\n        uint256 index = 0;\n        //get adress mapping\n        for (uint256 i = 0; i < juryCounter; i++) {\n            if (thisDispute.disputeJury[juryPool[i]] == false) {\n                juryList[index] = juryPool[i];\n                index++;\n            }\n        }\n        return juryList;\n    }\n\n    // Function for the jury to vote for the dispute between the client and the worker\n\n    function vote(uint256 _disputeId, bool _vote)\n        external\n        inStateDispute(_disputeId, DisputeState.WaitingJuryVote)\n    {\n        Dispute storage thisDispute = disputes[_disputeId];\n\n        // get the jury member\n\n        require(\n            thisDispute.state == DisputeState.WaitingJuryVote,\n            \"The dispute is already closed.\"\n        );\n        require(\n            thisDispute.disputeJury[msg.sender] == false,\n            \"The jury member has already voted.\"\n        );\n        thisDispute.disputeJury[msg.sender] == true;\n        thisDispute.totalVoteCount++;\n        if (_vote) {\n            thisDispute.clientVoteCount++;\n        } else {\n            thisDispute.workerVoteCount++;\n        }\n        emit JuryVote(_disputeId);\n        if (thisDispute.totalVoteCount == 12) {\n            thisDispute.state = DisputeState.DisputeClosed;\n            emit DisputeStateChange(\n                DisputeState.WaitingJuryVote,\n                DisputeState.DisputeClosed\n            );\n            if (thisDispute.clientVoteCount > thisDispute.workerVoteCount) {\n                ContractPact storage thisContract = contracts[\n                    thisDispute.contractId\n                ];\n                thisContract.state = ContractState.WorkerLostInCourt;\n                emit ContractIsFinished(thisDispute.contractId);\n            } else {\n                ContractPact storage thisContract = contracts[\n                    thisDispute.contractId\n                ];\n                thisContract.state = ContractState.ClientLostInCourt;\n                emit ContractIsFinished(thisDispute.contractId);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/randomNumber.sol": {
      "content": "// create random number generator contract to generate random number for jury selection\n\n// https://soliditydeveloper.com/prevrandao\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ncontract randomNumber {\n    uint256 public randomResult;\n\n    function random(uint256 _upper) public virtual returns (uint256) {\n        uint256 randomnumber = uint256(\n            keccak256(abi.encodePacked(block.timestamp, msg.sender))\n        );\n        randomResult = randomnumber % _upper;\n        return randomResult;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}